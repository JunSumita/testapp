#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.14
# from Racc grammer file "".
#

require 'racc/parser.rb'
class Ruby22Parser < RubyParser::Parser


require "ruby_lexer"
require "ruby_parser_extras"

# :stopdoc:

# Local Variables: **
# racc-token-length-max:14 **
# End: **
##### State transition tables begin ###

clist = [
'-606,584,456,-102,1003,-100,271,-606,-606,-606,-518,584,-606,-606,-606',
'271,-606,755,564,-94,561,560,559,112,562,-606,-606,-606,-606,-98,-100',
'-99,-102,824,209,590,-606,-606,584,-606,-606,-606,-606,-606,584,584',
'-101,-103,-104,-106,735,707,-90,626,853,824,629,564,-106,561,560,559',
'735,562,271,-105,-99,-606,-606,-606,-606,-606,-606,-606,-606,-606,-606',
'-606,-606,-606,-606,-602,735,-606,-606,-606,-94,791,-606,-101,-103,-606',
'83,270,-606,-606,849,-606,-602,-606,84,-606,270,-606,-606,-606,-606',
'-606,-606,-606,-91,-606,-606,-606,-603,116,625,-102,937,628,115,-94',
'-102,754,-94,116,-606,-606,-606,-606,115,-606,-288,-606,-89,983,-90',
'-93,-94,-288,-288,-288,116,-102,-100,-288,-288,115,-288,-100,116,270',
'116,-95,-97,115,706,115,116,116,-101,-103,116,115,115,-101,-103,115',
'-288,-288,-96,-288,-288,-288,-288,-288,885,218,219,665,665,271,116,210',
'-92,221,610,115,218,219,218,219,610,242,-92,-94,211,94,95,-288,-288',
'-288,-288,-288,-288,-288,-288,-288,-288,-288,-288,-288,-288,664,664',
'-288,-288,-288,746,648,-84,222,747,-288,217,239,-288,94,95,241,240,-288',
'-100,-288,-70,-288,-288,-288,-288,-288,-288,-288,261,-288,320,-288,-417',
'612,611,610,321,-92,-599,612,611,608,765,-503,-288,-288,-517,-95,222',
'-288,-503,-503,-503,222,270,-503,-503,-503,242,-503,680,-104,96,97,222',
'357,222,-503,-517,-503,-503,-503,-92,116,-511,-92,-600,790,115,-503',
'-503,-511,-503,-503,-503,-503,-503,-518,-89,-92,239,-503,96,97,241,240',
'612,611,-503,529,381,789,-98,-599,610,767,541,-503,-606,540,-503,-503',
'-503,-503,-503,-503,-503,-503,-503,-503,-503,-503,-503,-503,-98,-599',
'-503,-503,-503,-506,-503,-503,-606,-103,-503,384,-506,-503,-503,387',
'-503,-600,-503,-99,-503,-506,-503,-503,-503,-503,-503,-503,-503,-426',
'-503,-105,-503,-101,390,610,665,-606,615,-600,610,612,611,623,-606,-503',
'-503,-503,-503,-602,-503,-606,-503,-606,541,569,406,543,-606,-606,-606',
'-606,-503,569,-606,-606,572,-606,-606,411,664,-606,665,-602,572,408',
'-606,-606,116,264,410,409,-426,115,455,610,265,-606,-606,-426,-606,-606',
'-606,-606,-606,-606,612,611,-426,580,579,612,611,618,610,-503,664,580',
'579,610,-506,541,-503,457,543,458,-426,-506,-606,-606,-606,-606,-606',
'-606,-606,-606,-606,-606,-606,-606,-606,-606,221,573,-606,-606,-606',
'775,649,642,541,573,-606,543,-513,-606,612,611,608,216,-606,-513,-606',
'489,-606,-606,-606,-606,-606,-606,-606,273,-606,-606,-606,612,611,613',
'529,643,612,611,630,218,219,499,-506,-606,-606,-91,-93,-92,-606,-506',
'-506,-506,853,824,-506,-506,-506,-97,-506,-100,-102,-101,218,219,502',
'-512,-506,-514,-506,-506,-506,-106,-512,215,-514,504,-96,-94,-506,-506',
'214,-506,-506,-506,-506,-506,-69,-508,222,212,-105,-103,515,564,-508',
'561,560,559,-509,562,564,-510,561,560,559,-509,562,516,-510,-506,-506',
'-506,-506,-506,-506,-506,-506,-506,-506,-506,-506,-506,-506,580,579',
'-506,-506,-506,-280,-506,-506,721,523,-506,276,-280,-506,-506,721,-506',
'724,-506,222,-506,-280,-506,-506,-506,-506,-506,-506,-506,273,-506,526',
'-506,564,264,561,560,559,569,562,222,265,530,1007,242,-506,-506,-506',
'-506,572,-506,-288,-506,218,219,538,116,544,-288,-288,-288,115,-506',
'-288,-288,-288,564,-288,561,560,559,567,562,218,219,590,400,-288,-288',
'-288,577,576,580,579,116,594,595,-288,-288,115,-288,-288,-288,-288,-288',
'116,617,621,624,564,115,561,560,559,721,562,564,627,561,560,559,634',
'562,929,-262,636,573,222,-288,-288,-288,-288,-288,-288,-288,-288,-288',
'-288,-288,-288,-288,-288,640,242,-288,-288,-288,721,792,-288,641,273',
'-288,652,721,-288,-288,242,-288,242,-288,242,-288,724,-288,-288,-288',
'-288,-288,-288,-288,116,-288,116,-288,239,115,215,115,241,240,237,238',
'242,964,222,222,-288,-288,-288,-288,222,-288,751,-288,-288,296,72,73',
'74,12,60,-288,-84,-104,66,67,-603,683,222,70,-288,68,69,71,33,34,75',
'76,119,120,121,122,123,32,31,30,104,103,105,106,876,877,22,534,878,110',
'111,653,11,48,694,13,108,107,109,98,59,100,99,101,699,102,110,111,700',
'94,95,222,45,46,44,242,246,251,252,253,248,250,258,259,254,255,215,235',
'236,-280,703,256,257,532,43,504,-280,36,709,712,61,62,454,713,63,-280',
'38,239,715,245,47,241,240,237,238,249,247,243,23,244,717,719,-289,91',
'83,85,86,87,89,-289,727,728,84,92,729,260,731,-239,-289,590,65,738,768',
'81,88,90,769,770,96,97,296,72,73,74,12,60,-263,776,-336,66,67,489,489',
'222,70,-336,68,69,71,33,34,75,76,794,-336,261,502,504,32,31,30,104,103',
'105,106,694,222,22,273,273,694,242,637,11,48,824,13,108,107,109,98,59',
'100,99,101,222,102,110,111,847,94,95,222,45,46,44,242,246,251,252,253',
'248,250,258,259,254,255,215,235,236,215,824,256,257,964,43,857,453,36',
'222,-264,61,62,751,884,63,454,38,239,887,245,47,241,240,237,238,249',
'247,243,23,244,712,890,-288,91,83,85,86,87,89,-288,-289,893,84,92,-603',
'260,895,-289,-288,897,65,222,899,81,88,90,-289,900,96,97,296,72,73,74',
'12,60,694,908,-516,66,67,-262,912,914,70,-516,68,69,71,33,34,75,76,915',
'-516,222,712,918,32,31,30,104,103,105,106,920,922,22,924,924,222,930',
'653,11,48,932,13,108,107,109,98,59,100,99,101,934,102,110,111,222,94',
'95,944,45,46,44,242,246,251,252,253,248,250,258,259,254,255,-288,235',
'236,215,945,256,257,-288,43,222,522,36,-603,948,61,62,-288,-265,63,520',
'38,239,958,245,47,241,240,237,238,249,247,243,23,244,965,966,215,91',
'83,85,86,87,89,593,-516,968,84,92,969,260,985,-516,591,987,65,988,992',
'81,88,90,-516,712,96,97,296,72,73,74,12,60,997,999,215,66,67,1001,1003',
'1003,70,749,68,69,71,33,34,75,76,1010,751,1015,1016,924,32,31,30,104',
'103,105,106,924,961,22,561,560,559,924,562,11,48,1021,13,108,107,109',
'98,59,100,99,101,985,102,110,111,-603,94,95,-602,45,46,44,242,246,251',
'252,253,248,250,258,259,254,255,-515,235,236,-289,699,256,257,-515,43',
'985,-289,36,1044,1045,61,62,-515,1046,63,-289,38,239,1047,245,47,241',
'240,237,238,249,247,243,23,244,1003,1003,-515,91,83,85,86,87,89,-515',
'215,1003,84,92,222,260,924,1014,-515,985,65,3,,81,88,90,1012,,96,97',
'296,72,73,74,12,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,119,120,121',
'122,123,32,31,30,104,103,105,106,,961,22,561,560,559,,562,11,48,,13',
'108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,242,246,251',
'252,253,248,250,258,259,254,255,,235,236,,,256,257,,43,,,36,,,61,62',
',,63,,38,239,,245,47,241,240,237,238,249,247,243,23,244,,,,91,83,85',
'86,87,89,,,,84,92,222,260,,,,,65,,,81,88,90,,,96,97,296,72,73,74,12',
'60,,,,66,67,,,,70,,68,69,71,33,34,75,76,119,120,121,122,123,32,31,30',
'104,103,105,106,,,22,119,120,121,122,123,11,48,,13,108,107,109,98,59',
'100,99,101,,102,110,111,,94,95,,45,46,44,242,246,251,252,253,248,250',
'258,259,254,255,,235,236,,,256,257,,43,,,36,,,61,62,,,63,,38,239,,245',
'47,241,240,237,238,249,247,243,23,244,,,,91,83,85,86,87,89,,,,84,92',
',260,,,,,65,,,81,88,90,,,96,97,296,72,73,74,12,60,,,,66,67,,,,70,,68',
'69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,22,,,,,,11,48,,13',
'108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,242,246,251',
'252,253,248,250,258,259,254,255,,235,236,,,256,257,,43,,,36,,,61,62',
',,63,,38,239,,245,47,241,240,237,238,249,247,243,23,244,,,,91,83,85',
'86,87,89,,,,84,92,,260,,,,,65,,,81,88,90,,,96,97,8,72,73,74,12,60,,',
',66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,22',
',,,,,11,48,10,13,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45',
'46,44,242,246,251,252,253,248,250,258,259,254,255,,235,236,,,256,257',
',43,,,36,,,61,62,,,63,,38,239,,245,47,241,240,237,238,249,247,243,23',
'244,,,,91,83,85,86,87,89,,,,84,92,,260,,,,,65,,,81,88,90,,,96,97,296',
'72,73,74,12,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104',
'103,105,106,,,22,,,,,,11,48,,13,108,107,109,98,59,100,99,101,,102,110',
'111,,94,95,,45,46,44,242,246,251,252,253,248,250,258,259,254,255,,235',
'236,,,256,257,,43,,,36,,,61,62,,,63,,38,239,,245,47,241,240,237,238',
'249,247,243,23,244,,,,91,83,85,86,87,89,,,,84,92,,260,,,,,65,,,81,88',
'90,,,96,97,296,72,73,74,12,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,',
',,,,32,31,30,104,103,105,106,,,22,,,,,,11,48,,13,108,107,109,98,59,100',
'99,101,,102,110,111,,94,95,,45,46,44,242,246,251,252,253,248,250,258',
'259,254,255,,235,236,,,256,257,,43,,,36,,,61,62,,,63,,38,239,,245,47',
'241,240,237,238,249,247,243,23,244,,,,91,83,85,86,87,89,,,,84,92,,260',
',,,,65,,,81,88,90,,,96,97,8,72,73,74,12,60,,,,66,67,,,,70,,68,69,71',
'33,34,75,76,,,,,,32,31,30,104,103,105,106,,,22,,,,,,11,48,10,13,108',
'107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,242,246,251,252',
'253,248,250,258,259,254,255,,235,236,,,256,257,,43,,,36,,,61,62,,,63',
',38,239,,245,47,241,240,237,238,249,247,243,23,244,,,,91,83,85,86,87',
'89,,,,84,92,,260,,,,,65,,,81,88,90,,,96,97,296,72,73,74,12,60,,,,66',
'67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,22,,',
',,,11,48,,13,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46',
'44,242,246,251,252,253,248,250,258,259,254,255,,235,236,,,256,257,,43',
',,36,,,61,62,,,63,,38,239,,245,47,241,240,237,238,249,247,243,23,244',
',,,91,83,85,86,87,89,,,,84,92,,260,,,,,65,,,81,88,90,,,96,97,296,72',
'73,74,12,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103',
'105,106,,,22,,,,,,11,48,,13,108,107,109,98,59,100,99,101,,102,110,111',
',94,95,,45,46,44,242,246,251,252,253,248,250,258,259,254,255,,235,236',
',,256,257,,43,,,36,,,61,62,,,63,,38,239,,245,47,241,240,237,238,249',
'247,243,23,244,,,,91,83,85,86,87,89,,,,84,92,,260,,,,,65,,,81,88,90',
',,96,97,296,72,73,74,12,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,',
',32,31,30,104,103,105,106,,,22,,,,,,11,48,,13,108,107,109,98,59,100',
'99,101,,102,110,111,,94,95,,45,46,44,242,246,251,252,253,248,250,258',
'259,254,255,,235,236,,,256,257,,43,,,36,,,61,62,,,63,,38,239,,245,47',
'241,240,237,238,249,247,243,23,244,,,,91,83,85,86,87,89,,,,84,92,,260',
',,,,65,,,81,88,90,,,96,97,296,72,73,74,12,60,,,,66,67,,,,70,,68,69,71',
'33,34,75,76,,,,,,32,31,30,104,103,105,106,,,22,,,,,,11,48,,13,108,107',
'109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,242,246,251,252,253',
'248,250,258,259,254,255,,235,236,,,256,257,,43,,,36,,,61,62,,,63,,38',
'239,,245,47,241,240,237,238,249,247,243,23,244,,,,91,83,85,86,87,89',
',,,84,92,,260,,,,,65,,,81,88,90,,,96,97,296,72,73,74,12,60,,,,66,67',
',,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,22,,,,,',
'11,48,,13,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44',
'242,246,251,252,253,248,250,258,259,254,255,,235,236,,,256,257,,43,',
',36,,,61,62,,,63,,38,239,,245,47,241,240,237,238,249,247,243,23,244',
',,,91,83,85,86,87,89,,,,84,92,,260,,,,,65,,,81,88,90,,,96,97,296,72',
'73,74,12,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103',
'105,106,,,22,,,,,,11,48,,13,108,107,109,98,59,100,99,101,,102,110,111',
',94,95,,45,46,44,242,246,251,252,253,248,250,258,259,254,255,,235,236',
',,256,257,,43,,,36,,,61,62,,,63,,38,239,,245,47,241,240,237,238,249',
'247,243,23,244,,,,91,83,85,86,87,89,,,,84,92,,260,,,,,65,,,81,88,90',
',,96,97,296,72,73,74,12,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,',
',32,31,30,104,103,105,106,,564,22,561,560,559,242,562,11,48,,13,108',
'107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,242,246,251,252',
'253,248,250,239,721,254,255,241,240,237,238,,256,257,,43,,,36,,,61,62',
',,63,,38,239,,245,47,241,240,237,238,249,247,243,23,244,,,,91,83,85',
'86,87,89,,,,84,92,,564,,561,560,559,65,562,,81,88,90,,,96,97,296,72',
'73,74,12,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,721,,,,,32,31,30,104',
'103,105,106,,,22,,,,,,11,48,,13,108,107,109,98,59,100,99,101,,102,110',
'111,,94,95,,45,46,44,242,246,251,252,253,248,250,258,259,254,255,,-626',
'-626,,,256,257,,43,,,36,,,61,62,,,63,,38,239,,245,47,241,240,237,238',
'249,247,243,23,244,,,,91,83,85,86,87,89,,,,84,92,,564,,561,560,559,65',
'562,,81,88,90,,,96,97,296,72,73,74,12,60,,,,66,67,,,,70,,68,69,71,33',
'34,75,76,721,,,,,32,31,30,104,103,105,106,,,22,,,,,,11,48,,13,108,107',
'109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,242,246,251,252,253',
'248,250,258,259,254,255,,-626,-626,,,256,257,,43,,,36,,,61,62,,,63,',
'38,239,,245,47,241,240,237,238,249,247,243,23,244,,,,91,83,85,86,87',
'89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,296,72,73,74,12,60,,,,66,67',
',,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,22,,,,,',
'11,48,,13,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44',
'242,-626,-626,-626,-626,248,250,,,-626,-626,,,,,,256,257,,43,,,36,,',
'61,62,,,63,,38,239,,245,47,241,240,237,238,249,247,243,23,244,,,,91',
'83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,296,72,73,74,12',
'60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106',
',,22,,,,,,11,48,,13,108,107,109,98,59,100,99,101,,102,110,111,,94,95',
',45,46,44,242,,,,,,,,,,,,,,,,256,257,,43,,,36,,242,61,62,,,63,,38,239',
',245,47,241,240,237,238,256,257,243,23,244,,,,91,83,85,86,87,89,,,239',
'84,92,,241,240,237,238,,65,,,81,88,90,,,96,97,296,72,73,74,12,60,,,',
'66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,22',
',,,,,11,48,,13,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45',
'46,44,242,,,,,,,,,,,,,,,,256,257,,43,,,298,,,61,62,,,63,,38,239,,245',
'47,241,240,237,238,,,243,23,244,,,,91,83,85,86,87,89,,,,84,92,,,,,,',
'65,,,81,88,90,,,96,97,296,72,73,74,12,60,,,,66,67,,,,70,,68,69,71,33',
'34,75,76,,,,,,32,31,30,104,103,105,106,,,22,,,,,,11,48,,13,108,107,109',
'98,59,100,99,101,,102,110,111,,94,95,,45,46,44,242,,,,,,,,,,,,,,,,256',
'257,,43,,,36,,,61,62,,,63,,38,239,,245,47,241,240,237,238,,,243,23,244',
',,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,296,72,73',
'74,12,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103',
'105,106,,,22,,,,,,11,48,,13,108,107,109,98,59,100,99,101,,102,110,111',
',94,95,,45,46,44,242,,,,,,,,,,,,,,,,256,257,,43,,,36,,,61,62,,,63,,38',
'239,,245,47,241,240,237,238,,,243,23,244,,,,91,83,85,86,87,89,,,,84',
'92,,,,,,,65,,,81,88,90,,,96,97,296,72,73,74,12,60,,,,66,67,,,,70,,68',
'69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,22,,,,,,11,48,,13',
'108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,242,-626',
'-626,-626,-626,248,250,,,-626,-626,,,,,,256,257,,43,,,36,,,61,62,,,63',
',38,239,,245,47,241,240,237,238,249,247,243,23,244,,,,91,83,85,86,87',
'89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,296,72,73,74,12,60,,,,66,67',
',,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,22,,,,,',
'11,48,,13,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44',
'242,-626,-626,-626,-626,248,250,,,-626,-626,,,,,,256,257,,43,,,298,',
',61,62,,,63,,38,239,,245,47,241,240,237,238,249,247,243,23,244,,,,91',
'83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,296,72,73,74,12',
'60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106',
',,22,,,,,,11,48,,13,108,107,109,98,59,100,99,101,,102,110,111,,94,95',
',45,46,44,242,-626,-626,-626,-626,248,250,,,-626,-626,,,,,,256,257,',
'43,,,298,,,61,62,,,63,,38,239,,245,47,241,240,237,238,249,247,243,23',
'244,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,296,72',
'73,74,12,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103',
'105,106,,,22,,,,,,11,48,,13,108,107,109,98,59,100,99,101,,102,110,111',
',94,95,,45,46,44,242,-626,-626,-626,-626,248,250,,,-626,-626,,,,,,256',
'257,,43,,,36,,,61,62,,,63,,38,239,,245,47,241,240,237,238,249,247,243',
'23,244,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,296',
'72,73,74,12,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104',
'103,105,106,,,22,,,,,,11,48,,13,108,107,109,98,59,100,99,101,,102,110',
'111,,94,95,,45,46,44,242,-626,-626,-626,-626,248,250,,,-626,-626,,,',
',,256,257,,43,,,36,,,61,62,,,63,,38,239,,245,47,241,240,237,238,249',
'247,243,23,244,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96',
'97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104',
'103,105,106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101,289,102,110',
'111,,94,95,,45,46,44,242,246,251,252,253,248,250,258,,254,255,,,,,,256',
'257,,227,,,233,,,61,62,,,63,,285,239,283,245,47,241,240,237,238,249',
'247,243,232,244,,,,91,286,85,86,87,89,,,,84,287,,,,,,,65,,290,81,88',
'90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,313,314,75,76,,,,,',
'309,310,316,104,103,105,106,,,234,,,,,,,48,,,108,107,109,98,59,100,99',
'101,,102,110,111,,94,95,,45,46,44,242,,,,,,,,,,,,,,,,256,257,,227,,',
'233,,,61,62,,,63,,,239,,245,47,241,240,237,238,,,,232,,,,,91,83,85,86',
'87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,',
'70,,68,69,71,313,314,75,76,,,,,,309,310,316,104,103,105,106,,,234,,',
',,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44',
'242,,,,,,,,,,,,,,,,256,257,,227,,,233,,,61,62,,,63,,,239,,245,47,241',
'240,237,238,,,,232,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90',
',,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,313,314,75,76,,,,,,309',
'310,316,104,103,105,106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101',
',102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,',
',63,,,,,,47,,,,,,,,232,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81',
'88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,313,314,75,76,,',
',,,309,310,316,104,103,105,106,,,234,,,,,,,48,,,108,107,109,98,59,100',
'99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,',
'61,62,,,63,,,,,,47,,,,,,,,232,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65',
',,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,313,314,75',
'76,,,,,,309,310,316,104,103,105,106,,,234,,,,,,,48,,,108,107,109,98',
'59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,',
',233,,,61,62,,,63,,,,,,47,,,,,,,,232,,,,,91,83,85,86,87,89,,,,84,92',
',,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,313',
'314,75,76,,,,,,309,310,316,104,103,105,106,,,234,,,,,,,48,,,108,107',
'109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,',
',,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232,,,,,91,83,85,86,87,89,,',
',84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,12,60,,,,66,67,,,,70,,68',
'69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,22,,,,,,11,48,,13',
'108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,',
',,,,,,,,,,43,,,36,,,61,62,,,63,,38,,,,47,,,,,,,,23,,,,,91,83,85,86,87',
'89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70',
',68,69,71,313,314,75,76,,,,,,309,310,316,104,103,105,106,,,234,,,,,',
',311,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,,,317,,,,,',
',,,,,,,,,,,,,,307,,,303,,,61,62,,,63,,,,,,,,,,,,,,,,,,,91,83,85,86,87',
'89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70',
',68,69,71,313,314,75,76,,,,,,309,310,316,104,103,105,106,,,234,,,,,',
',311,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,,,317,,,,,',
',,,,,,,,,,,,,,307,,,303,,,61,62,,,63,,302,,,,,,,,,,,,,,,,,91,83,85,86',
'87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,',
'70,,68,69,71,313,314,75,76,,,,,,309,310,316,104,103,105,106,,,234,,',
',,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44',
',,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232,,,,,91',
'83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,',
'66,67,,,,70,,68,69,71,313,314,75,76,,,,,,309,310,316,104,103,105,106',
',,234,,,,,,,311,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,',
',,317,,,,,,,,,,,,,,,,,,,,307,,,233,,,61,62,,,63,,,,,,,,,,,,,,,,,,,91',
'83,85,86,87,89,,,,84,92,,,,319,,,65,,,81,88,90,,,96,97,72,73,74,,60',
',,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,',
',22,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45',
'46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,23,,',
',,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60',
',,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,',
',22,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45',
'46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,23,,',
',,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60',
',,,66,67,,,,70,,68,69,71,313,314,75,76,,,,,,309,310,316,104,103,105',
'106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95',
',45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232',
',,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74',
',60,,,,66,67,,,,70,,68,69,71,313,314,75,76,,,,,,309,310,316,104,103',
'105,106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,',
'94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,',
',,,,,232,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97',
'72,73,74,,60,,,,66,67,,,,70,,68,69,71,313,314,75,76,,,,,,309,310,316',
'104,103,105,106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110',
'111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,',
'47,,,,,,,,232,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96',
'97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,313,314,75,76,,,,,,309,310',
'316,104,103,105,106,,,234,,,,,,,311,,,108,107,109,98,59,100,99,101,',
'102,110,111,,94,95,,,,317,,,,,,,,,,,,,,,,,,,,307,,,233,,,61,62,,,63',
',,,,,,,,,,,,,,,,,,91,83,85,86,87,89,,,,84,92,,,,518,,,65,,,81,88,90',
',,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31',
'30,104,103,105,106,,,22,,,,,,,48,,,108,107,109,98,59,100,99,101,,102',
'110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,',
',,,,47,,,,,,,,23,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90',
',,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,313,314,75,76,,,,,,309',
'310,316,104,103,105,106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101',
',102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,',
',63,,,,,,47,,,,,,,,232,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81',
'88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,313,314,75,76,,',
',,,309,310,316,104,103,105,106,,,234,,,,,,,48,,,108,107,109,98,59,100',
'99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,',
'61,62,,,63,,,,,,47,,,,,,,,232,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65',
',,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,313,314,75',
'76,,,,,,309,310,316,104,103,105,106,,,234,,,,,,,48,,,108,107,109,98',
'59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,',
',233,,,61,62,,,63,,,,,,47,,,,,,,,232,,,,,91,83,85,86,87,89,,,,84,92',
',,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,313',
'314,75,76,,,,,,309,310,316,104,103,105,106,,,234,,,,,,,48,,,108,107',
'109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,',
',,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232,,,,,91,83,85,86,87,89,,',
',84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69',
'71,313,314,75,76,,,,,,309,310,316,104,103,105,106,,,234,,,,,,,48,,,108',
'107,109,98,59,100,99,101,289,102,110,111,,94,95,,45,46,44,,,,,,,,,,',
',,,,,,,,,227,,,233,,,61,62,,,63,,,,283,,47,,,,,,,,232,,,,,91,286,85',
'86,87,89,,,,84,287,,,,,,,65,,290,81,88,90,,,96,97,72,73,74,,60,,,,66',
'67,,,,70,,68,69,71,313,314,75,76,,,,,,309,310,316,104,103,105,106,,',
'234,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45',
'46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232,',
',,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,',
'60,,,,66,67,,,,70,,68,69,71,313,314,75,76,,,,,,309,310,316,104,103,105',
'106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95',
',45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232',
',,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74',
',60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106',
',,234,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45',
'46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232,',
',,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,',
'60,,,,66,67,,,,70,,68,69,71,313,314,75,76,,,,,,309,310,316,104,103,105',
'106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95',
',45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232',
',,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74',
',60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106',
',,234,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45',
'46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232,',
',,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,',
'60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106',
',,234,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45',
'46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232,',
',,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,',
'60,,,,66,67,,,,70,,68,69,71,313,314,75,76,,,,,,309,310,316,104,103,105',
'106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95',
',45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232',
',,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74',
',60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106',
',,234,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45',
'46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232,',
',,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,',
'60,,,,66,67,,,,70,,68,69,71,313,314,75,76,,,,,,309,310,316,104,103,105',
'106,,,234,,,,,,,311,,,108,107,109,98,59,100,99,101,,102,110,111,,94',
'95,,,,317,,,,,,,,,,,,,,,,,,,,902,,,233,,,61,62,,,63,,,,,,,,,,,,,,,,',
',,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60',
',,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,',
',234,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45',
'46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232,',
',,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,',
'60,,,,66,67,,,,70,,68,69,71,313,314,75,76,,,,,,309,310,316,104,103,105',
'106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101,289,102,110,111,,94',
'95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,283,,47,,',
',,,,,232,,,,,91,286,85,86,87,89,,,,84,287,,,,,,,65,,290,81,88,90,,,96',
'97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,313,314,75,76,,,,,,309,310',
'316,104,103,105,106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101,289',
'102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,',
'63,,677,,283,,47,,,,,,,,232,,,,,91,286,85,86,87,89,,,,84,287,,,,,,,65',
',290,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,313,314',
'75,76,,,,,,309,310,316,104,103,105,106,,,234,,,,,,,48,,,108,107,109',
'98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227',
',,233,,,61,62,,,63,,,,,,47,,,,,,,,232,,,,,91,83,85,86,87,89,,,,84,92',
',,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,313',
'314,75,76,,,,,,309,310,316,104,103,105,106,,,234,,,,,,,311,,,108,107',
'109,98,59,100,99,101,,102,110,111,,94,95,,,,317,,,,,,,,,,,,,,,,,,,,975',
',,233,,,61,62,,,63,,,,,,,,,,,,,,,,,,,91,83,85,86,87,89,,,,84,92,,,,',
',,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,313,314',
'75,76,,,,,,309,310,316,104,103,105,106,,,234,,,,,,,48,,,108,107,109',
'98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227',
',,233,,,61,62,,,63,,,,,,47,,,,,,,,232,,,,,91,83,85,86,87,89,,,,84,92',
',,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,313',
'314,75,76,,,,,,309,310,316,104,103,105,106,,,234,,,,,,,48,,,108,107',
'109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,',
',,227,,,233,,,61,62,,,63,,773,,,,47,,,,,,,,232,,,,,91,83,85,86,87,89',
',,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68',
'69,71,313,314,75,76,,,,,,309,310,316,104,103,105,106,,,234,,,,,,,48',
',,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,',
',,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232,,,,,91,83,85,86',
'87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,',
'70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,22,,,,,,,48',
',,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,',
',,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,23,,,,,91,83,85,86',
'87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,',
'70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,22,,,,,,,48',
',,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,',
',,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,23,,,,,91,83,85,86',
'87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,',
'70,,68,69,71,313,314,75,76,,,,,,309,310,316,104,103,105,106,,,234,,',
',,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44',
',,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232,,,,,91',
'83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,',
'66,67,,,,70,,68,69,71,313,314,75,76,,,,,,309,310,316,104,103,105,106',
',,234,,,,,,,311,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,',
',,317,,,,,,,,,,,,,,,,,,,,307,,,303,,,61,62,,,63,,,,,,,,,,,,,,,,,,,91',
'83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,',
'66,67,,,,70,,68,69,71,313,314,75,76,,,,,,309,310,316,104,103,105,106',
',,234,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45',
'46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,677,,,,47,,,,,,,,232',
',,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74',
',60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106',
',,234,,,,,,,48,,,108,107,109,98,59,100,99,101,289,102,110,111,,94,95',
',45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,285,,283,,47,,',
',,,,,232,,,,,91,286,85,86,87,89,,,,84,287,,,,,,,65,,290,81,88,90,,,96',
'97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,313,314,75,76,,,,,,309,310',
'316,104,103,105,106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101,,102',
'110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,',
',,,,47,,,,,,,,232,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90',
',,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31',
'30,104,103,105,106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101,289',
'102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,',
'63,,285,,283,,47,,,,,,,,232,,,,,91,286,85,86,87,89,,,,84,287,,,,,,,65',
',290,81,88,90,,,96,97,72,73,74,12,60,,,,66,67,,,,70,,68,69,71,33,34',
'75,76,,,,,,32,31,30,104,103,105,106,,,22,,,,,,11,48,10,13,108,107,109',
'98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,43',
',,36,,,61,62,,,63,,38,,,,47,,,,,,,,23,,,,,91,83,85,86,87,89,,,,84,92',
',,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33',
'34,75,76,,,,,,32,31,30,104,103,105,106,,,22,,,,,,,48,,,108,107,109,98',
'59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,',
',233,,,61,62,,,63,,,,,,47,,,,,,,,23,,,,,91,83,85,86,87,89,,,,84,92,',
',,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33',
'34,75,76,,,,,,32,31,30,104,103,105,106,,,22,,,,,,,48,,,108,107,109,98',
'59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,',
',233,,,61,62,,,63,,,,,,47,,,,,,,,23,,,,,91,83,85,86,87,89,,,,84,92,116',
',,,,115,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71',
'313,314,75,76,,,,,,309,310,316,104,103,105,106,,,234,,,,,,,311,,,108',
'107,109,98,59,100,99,101,,102,110,111,,94,95,,,,317,,,,,,,,,,,,,,,,',
',,,351,,,36,,,61,62,,,63,,38,,,,,,,,,,,,,,,,,91,83,85,86,87,89,,,,84',
'92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71',
'313,314,75,76,,,,,,309,310,316,104,103,105,106,,,234,,,,,,,48,,,108',
'107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,',
',,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232,,,,,91,83,85,86,87,89',
',,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68',
'69,71,313,314,75,76,,,,,,309,310,316,104,103,105,106,,,234,,,,,,,48',
',,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,',
',,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232,,,,,91,83,85,86',
'87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,',
'70,,68,69,71,313,314,75,76,,,,,,309,310,316,104,103,105,106,,,234,,',
',,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44',
',,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232,,,,,91',
'83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,',
'66,67,,,,70,,68,69,71,313,314,75,76,,,,,,309,310,316,104,103,105,106',
',,234,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45',
'46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232,',
',,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,',
'60,,,,66,67,,,,70,,68,69,71,313,314,75,76,,,,,,309,310,316,104,103,105',
'106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95',
',45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232',
',,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74',
',60,,,,66,67,,,,70,,68,69,71,313,314,75,76,,,,,,309,310,316,104,103',
'105,106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,',
'94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,',
',,,,,232,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97',
'72,73,74,,60,,,,66,67,,,,70,,68,69,71,313,314,75,76,,,,,,309,310,316',
'104,103,105,106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110',
'111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,',
'47,,,,,,,,232,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96',
'97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104',
'103,105,106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111',
',94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,',
',,,,,,232,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97',
'72,73,74,,60,,,,66,67,,,,70,,68,69,71,313,314,75,76,,,,,,309,310,316',
'104,103,105,106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110',
'111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,',
'47,,,,,,,,232,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96',
'97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,313,314,75,76,,,,,,309,310',
'316,104,103,105,106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101,,102',
'110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,',
'416,,,,47,,,,,,,,232,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88',
'90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,313,314,75,76,,,,,',
'309,310,316,104,103,105,106,,,234,,,,,,,48,,,108,107,109,98,59,100,99',
'101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61',
'62,,,63,,,,,,47,,,,,,,,232,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,',
',81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,313,314,75,76',
',,,,,309,310,316,104,103,105,106,,,234,,,,,,,48,,,108,107,109,98,59',
'100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233',
',,61,62,,,63,,,,,,47,,,,,,,,232,,,,,91,83,85,86,87,89,,,,84,92,,,,,',
',65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,313,314',
'75,76,,,,,,309,310,316,104,103,105,106,,,234,,,,,,,311,,,108,107,109',
'98,59,100,99,101,,102,110,111,,94,95,,,,317,,,,,,,,,,,,,,,,,,,,307,',
',303,,,61,62,,,63,,,,,,,,,,,,,,,,,,,91,83,85,86,87,89,,,,84,92,,,,,',
',65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,313,314',
'75,76,,,,,,309,310,316,104,103,105,106,,,234,,,,,,,48,,,108,107,109',
'98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227',
',,233,,,61,62,,,63,,,,,,47,,,,,,,,232,,,,,91,83,85,86,87,89,,,,84,92',
',,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,313',
'314,75,76,,,,,,309,310,316,104,103,105,106,,,234,,,,,,,48,,,108,107',
'109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,',
',,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232,,,,,91,83,85,86,87,89,,',
',84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69',
'71,313,314,75,76,,,,,,309,310,316,104,103,105,106,,,234,,,,,,,48,,,108',
'107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,',
',,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232,,,,,91,83,85,86,87,89',
',,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68',
'69,71,313,314,75,76,,,,,,309,310,316,104,103,105,106,,,234,,,,,,,48',
',,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,',
',,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232,,,,,91,83,85,86',
'87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,',
'70,,68,69,71,313,314,75,76,,,,,,309,310,316,104,103,105,106,,,234,,',
',,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44',
',,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232,,,,,91',
'83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,',
'66,67,,,,70,,68,69,71,313,314,75,76,,,,,,309,310,316,104,103,105,106',
',,234,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45',
'46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232,',
',,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,',
'60,,,,66,67,,,,70,,68,69,71,313,314,75,76,,,,,,309,310,316,104,103,105',
'106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95',
',45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232',
',,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74',
',60,,,,66,67,,,,70,,68,69,71,313,314,75,76,,,,,,309,310,316,104,103',
'105,106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,',
'94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,',
',,,,,232,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97',
'72,73,74,,60,,,,66,67,,,,70,,68,69,71,313,314,75,76,,,,,,309,310,316',
'104,103,105,106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110',
'111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,',
'47,,,,,,,,232,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96',
'97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,313,314,75,76,,,,,,309,310',
'316,104,103,105,106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101,,102',
'110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,',
',,,,47,,,,,,,,232,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90',
',,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,313,314,75,76,,,,,,309',
'310,316,104,103,105,106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101',
',102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,',
',63,,,,,,47,,,,,,,,232,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81',
'88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,',
',32,31,30,104,103,105,106,,,234,,,,,,,48,,,108,107,109,98,59,100,99',
'101,289,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,',
'61,62,,,63,,285,,283,,47,,,,,,,,232,,,,,91,286,85,86,87,89,,,,84,287',
',,,,,,65,,290,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71',
'33,34,75,76,,,,,,32,31,30,104,103,105,106,,,234,,,,,,,48,,,108,107,109',
'98,59,100,99,101,289,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,',
',227,,,233,,,61,62,,,63,,285,,283,,47,,,,,,,,232,,,,,91,286,85,86,87',
'89,,,,84,287,,,,,,,65,,290,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,',
',70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,234,,,,,,',
'48,,,108,107,109,98,59,100,99,101,289,102,110,111,,94,95,,45,46,44,',
',,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,285,,283,,47,,,,,,,,232,,',
',,91,286,85,86,87,89,,,,84,287,222,,,,,,65,,290,81,88,90,,,96,97,72',
'73,74,,60,,,,66,67,,,,70,,68,69,71,313,314,75,76,,,,,,309,310,316,104',
'103,105,106,,,234,,,,,,,311,,,108,107,109,98,59,100,99,101,,102,110',
'111,,94,95,,,,317,,,,,,,,,,,,,,,,,,,,902,,,233,,,61,62,,,63,,,,,,,,',
',,,,,,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72',
'73,74,,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103',
'105,106,,,22,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94',
'95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,',
',,23,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73',
'74,,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105',
'106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101,289,102,110,111,,94',
'95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,285,,283,,47',
',,,,,,,232,,,,,91,286,85,86,87,89,,,,84,287,,,,,,,65,,290,81,88,90,',
',96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,313,314,75,76,,,,,,309',
'310,316,104,103,105,106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101',
',102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,',
',63,,,,,,47,,,,,,,,232,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81',
'88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,313,314,75,76,,',
',,,309,310,316,104,103,105,106,,,234,,,,,,,311,,,108,107,109,98,59,100',
'99,101,,102,110,111,,94,95,,,,317,,,,,,,,,,,,,,,,,,,,307,,,303,,,61',
'62,,,63,,,,,,,,,,,,,,,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88',
'90,,,96,97,72,73,74,12,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,',
'32,31,30,104,103,105,106,,,22,,,,,,11,48,,13,108,107,109,98,59,100,99',
'101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,43,,,36,,,61,62',
',,63,,38,,,,47,,,,,,,,23,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81',
'88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,',
',32,31,30,104,103,105,106,,,22,,,,,,,48,,,108,107,109,98,59,100,99,101',
',102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,',
',63,,,,,,47,,,,,,,,23,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88',
'90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32',
'31,30,104,103,105,106,,,22,,,,,,,48,,,108,107,109,98,59,100,99,101,',
'102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,',
'63,,,,,,47,,,,,,,,23,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88',
'90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32',
'31,30,104,103,105,106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101',
'289,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62',
',,63,,285,,283,,47,,,,,,,,232,,,,,91,286,85,86,87,89,,,,84,287,,,,,',
',65,,290,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34',
'75,76,,,,,,32,31,30,104,103,105,106,,,22,,,,,,,48,,,108,107,109,98,59',
'100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233',
',,61,62,,,63,,,,,,47,,,,,,,,23,,,,,91,83,85,86,87,89,,,,84,92,,,,,,',
'65,,,81,88,90,,,96,97,72,73,74,12,60,,,,66,67,,,,70,,68,69,71,33,34',
'75,76,,,,,,32,31,30,104,103,105,106,,,22,,,,,,11,48,,13,108,107,109',
'98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,43',
',,36,,,61,62,,,63,,38,,,,47,,,,,,,,23,,,,,91,83,85,86,87,89,,,,84,92',
',,,,,400,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71',
'313,314,75,76,,,,,,309,310,316,104,103,105,106,,,234,,,,,,,48,,,108',
'107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,',
',,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232,,,,,91,83,85,86,87,89',
',,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68',
'69,71,313,314,75,76,,,,,,309,310,316,104,103,105,106,,,234,,,,,,,48',
',,108,107,109,98,59,100,99,101,289,102,110,111,,94,95,,45,46,44,,,,',
',,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,283,,47,,,,,,,,232,,,,,91,286',
'85,86,87,89,,,,84,287,,,,,,,65,,290,81,88,90,,,96,97,72,73,74,,60,,',
',66,67,,,,70,,68,69,71,313,314,75,76,,,,,,309,310,316,104,103,105,106',
',,234,,,,,,,48,,,108,107,109,98,59,100,99,101,289,102,110,111,,94,95',
',45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,677,,283,,47,,',
',,,,,232,,,,,91,286,85,86,87,89,,,,84,287,,,,,,,65,,290,81,88,90,,,96',
'97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104',
'103,105,106,,,22,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111',
',94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,',
',,,,,,23,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97',
'72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104',
'103,105,106,,,22,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111',
',94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,',
',,,,,,23,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97',
'72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104',
'103,105,106,,,22,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111',
',94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,',
',,,,,,23,,,,,91,83,85,86,87,89,,,,84,92,222,,,,,,65,,,81,88,90,,,96',
'97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,313,314,75,76,,,,,,309,310',
'316,104,103,105,106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101,,102',
'110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,',
'285,,,,47,,,,,,,,232,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88',
'90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,313,314,75,76,,,,,',
'309,310,316,104,103,105,106,,,234,,,,,,,48,,,108,107,109,98,59,100,99',
'101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61',
'62,,,63,,,,,,47,,,,,,,,232,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,',
',81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,313,314,75,76',
',,,,,309,310,316,104,103,105,106,,,234,,,,,,,48,,,108,107,109,98,59',
'100,99,101,289,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,',
',233,,,61,62,,,63,,285,,,,47,,,,,,,,232,,,,,91,286,85,86,87,89,,,,84',
'287,,,,,,,65,,290,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69',
'71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,234,,,,,,,48,,,108,107',
'109,98,59,100,99,101,289,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,',
',,,,,227,,,233,,,61,62,,,63,,285,,283,,47,,,,,,,,232,,,,,91,286,85,86',
'87,89,,,,84,287,,,,,,,65,,290,81,88,90,,,96,97,72,73,74,,60,,,,66,67',
',,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,22,,,,,',
',48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,',
',,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,23,,,,,91,83,85',
'86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,12,60,,,,66,67',
',,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,22,,,,,',
'11,48,10,13,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46',
'44,,,,,,,,,,,,,,,,,,,,43,,,36,,,61,62,,,63,,38,,,,47,,,,,,,,23,,,,,91',
'83,85,86,87,89,,,,84,92,,,,,,400,65,,,81,88,90,,,96,97,72,73,74,,60',
',,,66,67,,,,70,,68,69,71,313,314,75,76,,,,,,309,310,316,104,103,105',
'106,,,234,,,,,,,311,,,108,107,109,596,59,100,99,597,,102,110,111,,94',
'95,,,,317,,,,,,,,,,,,,,,,,,,,598,,,233,,,61,62,,,63,,,,,,,,,,,,,,,,',
',,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60',
',,,66,67,,,,70,,68,69,71,313,314,75,76,,,,,,309,310,316,104,103,105',
'106,,,234,,,,,,,311,,,108,107,109,596,59,100,99,597,,102,110,111,,94',
'95,,,,317,,,,,,,,,,,,,,,,,,,,598,,,233,,,61,62,,,63,,,,,,,,,,,,,,,,',
',,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60',
',,,66,67,,,,70,,68,69,71,313,314,75,76,,,,,,309,310,316,104,103,105',
'106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95',
',45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232',
',,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74',
',60,,,,66,67,,,,70,,68,69,71,313,314,75,76,,,,,,309,310,316,104,103',
'105,106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,',
'94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,',
',,,,,232,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97',
'72,73,74,,60,,,,66,67,,,,70,,68,69,71,313,314,75,76,,,,,,309,310,316',
'104,103,105,106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110',
'111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,',
'47,,,,,,,,232,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96',
'97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104',
'103,105,106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101,289,102,110',
'111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,285',
',283,,47,,,,,,,,232,,,,,91,286,85,86,87,89,,,,84,287,,,,,,,65,,290,81',
'88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,313,314,75,76,,',
',,,309,310,316,104,103,105,106,,,234,,,,,,,48,,,108,107,109,98,59,100',
'99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,',
'61,62,,,63,,,,,,47,,,,,,,,232,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65',
',,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,313,314,75',
'76,,,,,,309,310,316,104,103,105,106,,,234,,,,,,,48,,,108,107,109,98',
'59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,',
',233,,,61,62,,,63,,,,,,47,,,,,,,,232,,,,,91,83,85,86,87,89,,,,84,92',
',,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,313',
'314,75,76,,,,,,309,310,316,104,103,105,106,,,234,,,,,,,48,,,108,107',
'109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,',
',,227,,,233,534,,61,62,,,63,,,,,,47,,,,,,,,232,,,,,91,83,85,86,87,89',
',,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68',
'69,71,313,314,75,76,,,,,,309,310,316,104,103,105,106,,,234,,,,,,,48',
',,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,',
',,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232,,,,,91,83,85,86',
'87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,',
'70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,22,,,,,,,48',
',,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,',
',,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,23,,,,,91,83,85,86',
'87,89,,,,84,92,222,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67',
',,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,22,,,,,',
',48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,',
',,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,23,,,,,91,83,85',
'86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67',
',,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,22,,,,,',
',48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,',
',,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,23,,,,,91,83,85',
'86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67',
',,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,22,,,,,',
',48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,',
',,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,23,,,,,91,83,85',
'86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67',
',,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,234,,,,',
',,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,',
',,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,416,,,,47,,,,,,,,232,,,,,91',
'83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,',
'66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,234',
',,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44',
',,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232,,,,,91',
'83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,',
'66,67,,,,70,,68,69,71,313,314,75,76,,,,,,309,310,316,104,103,105,106',
',,234,,,,,,,48,,,108,107,109,98,59,100,99,101,289,102,110,111,,94,95',
',45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232',
',,,,91,286,85,86,87,89,,,,84,287,,,,,,,65,,290,81,88,90,,,96,97,72,73',
'74,,60,,,,66,67,,,,70,,68,69,71,313,314,75,76,,,,,,309,310,316,104,103',
'105,106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101,289,102,110,111',
',94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,677,,,,47',
',,,,,,,232,,,,,91,286,85,86,87,89,,,,84,287,,,,,,,65,,290,81,88,90,',
',96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31',
'30,104,103,105,106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101,289',
'102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,',
'63,,285,,283,,47,,,,,,,,232,,,,,91,286,85,86,87,89,,,,84,287,,,,,,,65',
',290,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34,75',
'76,,,,,,32,31,30,104,103,105,106,,,234,,,,,,,48,,,108,107,109,98,59',
'100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233',
',,61,62,,,63,,,,,,47,,,,,,,,232,,,,,91,83,85,86,87,89,,,,84,92,,,,,',
',65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,313,314',
'75,76,,,,,,309,310,316,104,103,105,106,,,234,,,,,,,48,,,108,107,109',
'98,59,100,99,101,289,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,',
',227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232,,,,,91,286,85,86,87,89,,',
',84,287,,,,,,,65,,290,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,',
'68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,234,,,,,,,48,,',
'108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,',
',,,,,,,,,,227,,,233,,,61,62,,,63,,416,,,,47,,,,,,,,232,,,,,91,83,85',
'86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67',
',,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,22,,,,,',
',48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,',
',,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,23,,,,,91,83,85',
'86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67',
',,,70,,68,69,71,313,314,75,76,,,,,,309,310,316,104,103,105,106,,,234',
',,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44',
',,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232,,,,,91',
'83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,',
'66,67,,,,70,,68,69,71,313,314,75,76,,,,,,309,310,316,104,103,105,106',
',,234,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45',
'46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232,',
',,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,',
'60,,,,66,67,,,,70,,68,69,71,313,314,75,76,,,,,,309,310,316,104,103,105',
'106,,,234,,,,,,,311,,,108,107,109,98,59,100,99,101,,102,110,111,,94',
'95,,,,317,,,,,,,,,,,,,,,,,,,,307,,,303,,,61,62,,,63,,,,,,,,,,,,,,,,',
',,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60',
',,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,',
',234,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45',
'46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232,',
',,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,',
'60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106',
',,234,,,,,,,48,,,108,107,109,98,59,100,99,101,289,102,110,111,,94,95',
',45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,285,,283,,47,,',
',,,,,232,,,,,91,286,85,86,87,89,,,,84,287,,,,,,,65,,290,81,88,90,-281',
',96,97,,,,-281,-281,-281,,,-281,-281,-281,564,-281,561,560,559,569,562',
',,,,-281,-281,-281,,,572,,,,,-281,-281,,-281,-281,-281,-281,-281,,,',
',,,,,,567,,,,,,,,,577,576,580,579,,-281,-281,-281,-281,-281,-281,-281',
'-281,-281,-281,-281,-281,-281,-281,,,-281,-281,-281,,,-281,,,-281,,',
'-281,-281,,-281,573,-281,,-281,,-281,-281,-281,-281,-281,-281,-281,',
'-281,,-281,,,,,,,,,,,,,-281,-281,-281,-281,-607,-281,,-281,,,,-607,-607',
'-607,,,-607,-607,-607,564,-607,561,560,559,569,562,,,,-607,-607,-607',
'-607,,,572,,,,,-607,-607,,-607,-607,-607,-607,-607,,,,,,,,,,567,,,,',
',,,,,,580,579,,-607,-607,-607,-607,-607,-607,-607,-607,-607,-607,-607',
'-607,-607,-607,,,-607,-607,-607,,,-607,,,-607,,,-607,-607,,-607,573',
'-607,,-607,,-607,-607,-607,-607,-607,-607,-607,,-607,-607,-607,,,,,',
',,,,,,,-607,-607,-607,-607,-608,-607,,-607,,,,-608,-608,-608,,,-608',
'-608,-608,564,-608,561,560,559,569,562,,,,-608,-608,-608,-608,,,572',
',,,,-608,-608,,-608,-608,-608,-608,-608,,,,,,,,,,567,,,,,,,,,,,580,579',
',-608,-608,-608,-608,-608,-608,-608,-608,-608,-608,-608,-608,-608,-608',
',,-608,-608,-608,,,-608,,,-608,,,-608,-608,,-608,573,-608,,-608,,-608',
'-608,-608,-608,-608,-608,-608,,-608,-608,-608,,,,,,,,,,,,,-608,-608',
'-608,-608,,-608,,-608,176,187,177,200,173,193,183,182,203,204,198,181',
'180,175,201,205,206,185,174,188,192,194,186,179,,,,195,202,197,196,189',
'199,184,172,191,190,,,,,,171,178,169,170,166,167,168,127,129,126,,128',
',,,,,,,,161,162,,157,139,140,141,148,145,147,,,142,143,,,,163,164,149',
'150,,,,,,,,,,,,,,154,153,,138,160,156,155,151,152,146,144,136,159,137',
',,165,91,,,,,,,,,,92,,,,,,,,,158,176,187,177,200,173,193,183,182,203',
'204,198,181,180,175,201,205,206,185,174,188,192,194,186,179,,,,195,202',
'197,196,189,199,184,172,191,190,,,,,,171,178,169,170,166,167,168,127',
'129,,,128,,,,,,,,,161,162,,157,139,140,141,148,145,147,,,142,143,,,',
'163,164,149,150,,,,,,,,,,,,,,154,153,,138,160,156,155,151,152,146,144',
'136,159,137,,,165,,,,,,,,,,,,,,,,,,,,158,176,187,177,200,173,193,183',
'182,203,204,198,181,180,175,201,205,206,185,174,188,192,194,186,179',
',,,195,202,197,196,189,199,184,172,191,190,,,,,,171,178,169,170,166',
'167,168,127,129,,,128,,,,,,,,,161,162,,157,139,140,141,148,145,147,',
',142,143,,,,163,164,149,150,,,,,,,,,,,,,,154,153,,138,160,156,155,151',
'152,146,144,136,159,137,,,165,91,,,,,,,,,,92,,,,,,,,,158,176,187,177',
'200,173,193,183,182,203,204,198,181,180,175,201,205,206,185,174,188',
'192,194,186,179,,,,195,202,197,196,189,199,184,172,191,190,,,,,,171',
'178,169,170,166,167,168,127,129,,,128,,,,,,,,,161,162,,157,139,140,141',
'148,145,147,,,142,143,,,,163,164,149,150,,,,,,,,,,,,,,154,153,,138,160',
'156,155,151,152,146,144,136,159,137,,,165,91,,,,,,,,,,92,,,,,,,,,158',
'176,187,177,200,173,193,183,182,203,204,198,181,180,175,201,205,206',
'185,174,188,192,194,186,179,,,,195,202,197,366,365,367,364,172,191,190',
',,,,,171,178,169,170,361,362,363,359,129,100,99,360,,102,,,,,,,161,162',
',157,139,140,141,148,145,147,,,142,143,,,,163,164,149,150,,,,,,373,',
',,,,,,154,153,,138,160,156,155,151,152,146,144,136,159,137,,,165,,,',
',,,,,,,,,,,,,,,,158,176,187,177,200,173,193,183,182,203,204,198,181',
'180,175,201,205,206,185,174,188,192,194,186,179,,,,195,202,197,196,189',
'199,184,172,191,190,,,,,,171,178,169,170,166,167,168,127,129,397,396',
'128,,398,,,,,,,161,162,,157,139,140,141,148,145,147,,,142,143,,,,163',
'164,149,150,,,,,,,,,,,,,,154,153,,138,160,156,155,151,152,146,144,136',
'159,137,,,165,,,,,,,,,,,,,,,,,,,,158,176,187,177,200,173,193,183,182',
'203,204,198,181,180,175,201,205,206,185,174,188,192,194,186,179,,,,195',
'202,197,196,189,199,184,172,191,190,,,,,,171,178,169,170,166,167,168',
'127,129,,,128,,,,,,,,,161,162,,157,139,140,141,148,145,147,,,142,143',
',,,163,164,149,150,,,,,,,,,,,,,,154,153,,138,160,156,155,151,152,146',
'144,136,159,137,,,165,91,,,,-625,,,,,,92,-625,-625,-625,,,-625,-625',
'-625,158,-625,,,,,,,,,-625,-625,-625,,,,,,,,,-625,-625,,-625,-625,-625',
'-625,-625,,,,,,,,,,,,,,,,,,,,,,,,-625,-625,-625,-625,-625,-625,-625',
'-625,-625,-625,-625,-625,-625,-625,,,-625,-625,-625,,,-625,,273,-625',
',,-625,-625,,-625,,-625,,-625,,-625,-625,-625,-625,-625,-625,-625,,-625',
'-625,-625,,,,,,,,,,,,-425,-625,-625,,-625,,-625,-425,-425,-425,,,-425',
'-425,-425,564,-425,561,560,559,569,562,,,,-425,-425,-425,,,,572,,,,',
'-425,-425,,-425,-425,-425,-425,-425,,,,,,,,,,567,,,,,,,,,577,576,580',
'579,,-425,-425,-425,-425,-425,-425,-425,-425,-425,-425,-425,-425,-425',
'-425,,,-425,-425,-425,,,-425,,273,-425,,,-425,-425,,-425,573,-425,,-425',
',-425,-425,-425,-425,-425,-425,-425,,-425,-425,-425,,,,,,,,,,,,-296',
'-425,-425,,-425,,-425,-296,-296,-296,,,-296,-296,-296,564,-296,561,560',
'559,569,562,,,,,-296,-296,,,,572,,,,,-296,-296,,-296,-296,-296,-296',
'-296,,,,,,,,,,567,550,,,,,,,,577,576,580,579,,-296,-296,-296,-296,-296',
'-296,-296,-296,-296,-296,-296,-296,-296,-296,,,-296,-296,-296,,,-296',
',276,-296,,,-296,-296,,-296,573,-296,,-296,,-296,-296,-296,-296,-296',
'-296,-296,,-296,,-296,,,,,,,,,,,,-625,-296,-296,,-296,,-296,-625,-625',
'-625,,,-625,-625,-625,564,-625,561,560,559,569,562,,,,-625,-625,,,,',
'572,,,,,-625,-625,,-625,-625,-625,-625,-625,,,,,,,,,,567,,564,,561,560',
'559,569,562,577,576,580,579,,,,,,572,,,,,,,-625,,,,,,,-625,,,,,273,-625',
',567,,,,,573,,,,433,437,580,579,432,,,,,,-625,-625,,161,162,,157,139',
'140,141,148,145,147,,-625,142,143,,,-625,163,164,149,150,,,573,,,273',
',,,,,,,154,153,,138,160,156,155,151,152,146,144,136,159,137,,,165,,',
',,426,430,,,427,,,,,,,,,161,162,158,157,139,140,141,148,145,147,,,142',
'143,,,,163,164,149,150,,,,,,273,,,,,,,,154,153,,138,160,156,155,151',
'152,146,144,136,159,137,,,165,,,,,657,437,,,658,,,,,,,,,161,162,158',
'157,139,140,141,148,145,147,,,142,143,,,,163,164,149,150,,,,,,273,,',
',,,,,154,153,,138,160,156,155,151,152,146,144,136,159,137,,,165,,,,',
'655,430,,,656,,,,,,,,,161,162,158,157,139,140,141,148,145,147,,,142',
'143,,,,163,164,149,150,,,,,,273,,,,,,,,154,153,,138,160,156,155,151',
'152,146,144,136,159,137,,564,165,561,560,559,569,562,,,,,,,,,,572,,',
',,158,,,,,,,,,564,,561,560,559,569,562,,567,690,437,,,691,,,572,577',
'576,580,579,,161,162,,157,139,140,141,148,145,147,,,142,143,,,567,163',
'164,149,150,,,,,,273,580,579,,,573,,,154,153,,138,160,156,155,151,152',
'146,144,136,159,137,,,165,,,,,687,430,,,688,,573,,,,,,,161,162,158,157',
'139,140,141,148,145,147,,,142,143,,,,163,164,149,150,,,,,,273,,,,,,',
',154,153,,138,160,156,155,151,152,146,144,136,159,137,,564,165,561,560',
'559,569,562,564,,561,560,559,569,562,,,572,,,,,158,,572,,,,,,,,,,,,',
',,567,,,,,,,567,,1037,430,580,579,1038,,,,,580,579,,,161,162,,157,139',
'140,141,148,145,147,,,142,143,,,,163,164,149,150,,,573,,,273,,,,573',
',,,154,153,,138,160,156,155,151,152,146,144,136,159,137,,564,165,561',
'560,559,569,562,564,,561,560,559,569,562,,,572,,,,,158,,572,,,,,,,,',
',,,,,,567,,,,,,,567,,1039,437,580,579,1040,,,577,576,580,579,,,161,162',
',157,139,140,141,148,145,147,,,142,143,,,,163,164,149,150,,,573,,,273',
',,,573,,,,154,153,,138,160,156,155,151,152,146,144,136,159,137,,564',
'165,561,560,559,569,562,,,,,,,,,,572,,,,,158,,,,,,,,,564,,561,560,559',
'569,562,,567,1009,437,,,1008,,,572,577,576,580,579,,161,162,,157,139',
'140,141,148,145,147,,,142,143,,,567,163,164,149,150,,,222,,,273,580',
'579,,,573,,,154,153,,138,160,156,155,151,152,146,144,136,159,137,,564',
'165,561,560,559,569,562,,,,,,573,,,,572,,,,,158,,,,,,,,,,,,,,,,,567',
'759,487,430,,,488,,,577,576,580,579,,,161,162,,157,139,140,141,148,145',
'147,,,142,143,,,,163,164,149,150,,,,,,273,,,,573,,,,154,153,,138,160',
'156,155,151,152,146,144,136,159,137,,,165,,,,,861,437,,,862,,,,,,,,',
'161,162,158,157,139,140,141,148,145,147,,,142,143,,,,163,164,149,150',
',,,,,273,,,,,,,,154,153,,138,160,156,155,151,152,146,144,136,159,137',
',564,165,561,560,559,569,562,,,,,,,,,,572,,,,,158,,,,,,,,,,,,,,,,,567',
'759,741,430,,,742,,,577,576,580,579,,,161,162,,157,139,140,141,148,145',
'147,,,142,143,,,,163,164,149,150,,,,,,273,,,,573,,,,154,153,,138,160',
'156,155,151,152,146,144,136,159,137,,,165,,,,,743,437,,,744,,,,,,,,',
'161,162,158,157,139,140,141,148,145,147,,,142,143,,,,163,164,149,150',
',,,,,273,,,,,,,,154,153,,138,160,156,155,151,152,146,144,136,159,137',
',564,165,561,560,559,569,562,564,,561,560,559,569,562,,,572,,,,,158',
',572,,,,,,,,,,,,,,,567,,,,,,,567,,655,430,580,579,656,,,577,576,580',
'579,,,161,162,,157,139,140,141,148,145,147,,,142,143,,,,163,164,149',
'150,,,573,,,273,,,,573,,,,154,153,,138,160,156,155,151,152,146,144,136',
'159,137,,,165,,,,,657,437,,,658,,,,,,,,,161,162,158,157,139,140,141',
'148,145,147,,,142,143,,,,163,164,149,150,,,,,,273,,,,,,,,154,153,,138',
'160,156,155,151,152,146,144,136,159,137,,564,165,561,560,559,569,562',
'564,,561,560,559,569,562,,,572,,,,,158,,572,,,,,,,,,,,,,,,567,,,,,,',
'567,,487,430,580,579,488,,,577,576,580,579,,,161,162,,157,139,140,141',
'148,145,147,,,142,143,,,,163,164,149,150,,,573,,,,,,,573,,,,154,153',
',138,160,156,155,151,152,146,144,136,159,137,,,165,,,,,,,,,,,,,,,,,',
',,158' ]
        racc_action_table = arr = ::Array.new(26535, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'657,858,228,1039,1054,859,312,657,657,657,42,933,657,657,657,64,657',
'602,724,688,724,724,724,3,724,657,657,657,657,348,1052,349,743,990,13',
'990,657,657,341,657,657,657,657,657,342,911,1037,1038,744,352,860,549',
'42,388,730,730,391,929,228,929,929,929,586,929,668,594,42,657,657,657',
'657,657,657,657,657,657,657,657,657,657,657,1039,587,657,657,657,688',
'657,657,741,742,657,80,312,657,657,724,657,743,657,80,657,64,657,657',
'657,657,657,657,657,859,657,657,657,744,858,388,1039,858,391,858,688',
'1039,602,688,933,657,657,657,657,933,657,432,657,348,929,349,743,688',
'432,432,432,602,657,1052,432,432,602,432,1052,860,668,341,744,352,860',
'549,341,342,911,1037,1038,586,342,911,1037,1038,586,432,432,594,432',
'432,432,432,432,793,762,762,494,485,29,587,15,687,22,619,587,450,450',
'697,697,506,462,741,742,16,317,317,432,432,432,432,432,432,432,432,432',
'432,432,432,432,432,494,485,432,432,432,598,432,682,22,598,432,19,462',
'432,44,44,462,462,432,793,432,682,432,432,432,432,432,432,432,25,432',
'40,432,29,619,619,622,43,687,596,506,506,506,619,98,432,432,41,432,48',
'432,98,98,98,762,29,98,98,98,461,98,506,432,317,317,450,72,697,98,225',
'98,98,98,687,345,364,687,597,656,345,98,98,364,98,98,98,98,98,226,41',
'687,461,596,44,44,461,461,622,622,596,455,87,655,41,596,385,622,333',
'596,690,333,98,98,98,98,98,98,98,98,98,98,98,98,98,98,225,596,98,98',
'98,597,98,98,861,656,98,88,597,98,98,89,98,597,98,226,98,597,98,98,98',
'98,98,98,98,819,98,455,98,655,90,379,493,690,379,597,382,385,385,385',
'690,98,98,98,98,690,98,433,98,690,334,709,124,334,433,433,433,861,98',
'887,433,433,709,433,861,207,493,690,669,861,887,126,433,861,755,27,126',
'126,819,755,227,375,27,433,433,819,433,433,433,433,433,861,379,379,819',
'709,709,382,382,382,377,359,669,887,887,393,360,547,359,229,547,230',
'819,360,433,433,433,433,433,433,433,433,433,433,433,433,433,433,234',
'709,433,433,433,638,433,426,702,887,433,702,361,433,375,375,375,18,433',
'361,433,266,433,433,433,433,433,433,433,269,433,433,433,377,377,377',
'321,427,393,393,393,20,20,280,101,433,433,638,433,426,433,101,101,101',
'1023,1023,101,101,101,18,101,638,433,426,329,329,281,362,101,363,101',
'101,101,18,362,17,363,284,321,427,101,101,17,101,101,101,101,101,297',
'365,299,17,321,427,300,567,365,567,567,567,366,567,849,367,849,849,849',
'366,849,301,367,101,101,101,101,101,101,101,101,101,101,101,101,101',
'101,712,712,101,101,101,976,101,101,567,307,101,310,976,101,101,849',
'101,567,101,311,101,976,101,101,101,101,101,101,101,316,101,318,101',
'715,369,715,715,715,715,715,959,369,322,959,325,101,101,101,101,715',
'101,658,101,756,756,331,5,335,658,658,658,5,101,658,658,658,847,658',
'847,847,847,715,847,340,340,346,347,658,658,658,715,715,715,715,868',
'351,353,658,658,868,658,658,658,658,658,293,381,384,387,930,293,930',
'930,930,847,930,721,390,721,721,721,412,721,847,415,417,715,421,658',
'658,658,658,658,658,658,658,658,658,658,658,658,658,424,481,658,658',
'658,930,658,658,425,434,658,442,721,658,658,463,658,464,658,465,658',
'721,658,658,658,658,658,658,658,760,658,942,658,481,760,901,942,481',
'481,481,481,466,901,495,496,658,658,658,658,513,658,901,658,1040,814',
'814,814,814,814,814,1040,514,658,814,814,1040,517,519,814,1040,814,814',
'814,814,814,814,814,9,9,9,9,9,814,814,814,814,814,814,814,763,763,814',
'524,763,763,763,445,814,814,527,814,814,814,814,814,814,814,814,814',
'535,814,814,814,536,814,814,537,814,814,814,445,445,445,445,445,445',
'445,445,445,445,445,323,445,445,308,545,445,445,323,814,548,308,814',
'552,553,814,814,323,555,814,308,814,445,556,445,814,445,445,445,445',
'445,445,445,814,445,557,566,747,814,814,814,814,814,814,747,574,578',
'814,814,581,445,583,445,747,588,814,589,626,814,814,814,629,631,814',
'814,994,994,994,994,994,994,635,639,49,994,994,644,650,659,994,49,994',
'994,994,994,994,994,994,661,49,667,674,676,994,994,994,994,994,994,994',
'684,686,994,689,692,693,696,420,994,994,698,994,994,994,994,994,994',
'994,994,994,708,994,994,994,723,994,994,725,994,994,994,420,420,420',
'420,420,420,420,420,420,420,420,963,420,420,224,732,420,420,963,994',
'737,224,994,740,772,994,994,963,777,994,224,994,420,795,420,994,420',
'420,420,420,420,420,420,994,420,796,798,862,994,994,994,994,994,994',
'862,523,799,994,994,862,420,800,523,862,802,994,803,804,994,994,994',
'523,805,994,994,758,758,758,758,758,758,818,822,973,758,758,825,826',
'830,758,973,758,758,758,758,758,758,758,831,973,832,833,837,758,758',
'758,758,758,758,758,838,840,758,841,843,846,848,660,758,758,851,758',
'758,758,758,758,758,758,758,758,854,758,758,758,864,758,758,869,758',
'758,758,660,660,660,660,660,660,660,660,660,660,660,691,660,660,306',
'870,660,660,691,758,871,306,758,691,880,758,758,691,881,758,306,758',
'660,898,660,758,660,660,660,660,660,660,660,758,660,902,903,350,758',
'758,758,758,758,758,350,305,905,758,758,906,660,931,305,350,935,758',
'936,941,758,758,758,305,949,758,758,991,991,991,991,991,991,952,953',
'600,991,991,954,955,957,991,600,991,991,991,991,991,991,991,967,600',
'975,978,979,991,991,991,991,991,991,991,980,1007,991,1007,1007,1007',
'981,1007,991,991,982,991,991,991,991,991,991,991,991,991,984,991,991',
'991,1008,991,991,1009,991,991,991,278,278,278,278,278,278,278,278,278',
'278,278,304,278,278,1015,1011,278,278,304,991,1022,1015,991,1027,1028',
'991,991,304,1029,991,1015,991,278,1030,278,991,278,278,278,278,278,278',
'278,991,278,1031,1032,972,991,991,991,991,991,991,972,974,1033,991,991',
'1036,278,1041,974,972,1042,991,1,,991,991,991,974,,991,991,855,855,855',
'855,855,855,,,,855,855,,,,855,,855,855,855,855,855,855,855,681,681,681',
'681,681,855,855,855,855,855,855,855,,899,855,899,899,899,,899,855,855',
',855,855,855,855,855,855,855,855,855,,855,855,855,,855,855,,855,855',
'855,484,484,484,484,484,484,484,484,484,484,484,,484,484,,,484,484,',
'855,,,855,,,855,855,,,855,,855,484,,484,855,484,484,484,484,484,484',
'484,855,484,,,,855,855,855,855,855,855,,,,855,855,484,484,,,,,855,,',
'855,855,855,,,855,855,856,856,856,856,856,856,,,,856,856,,,,856,,856',
'856,856,856,856,856,856,295,295,295,295,295,856,856,856,856,856,856',
'856,,,856,512,512,512,512,512,856,856,,856,856,856,856,856,856,856,856',
'856,,856,856,856,,856,856,,856,856,856,788,788,788,788,788,788,788,788',
'788,788,788,,788,788,,,788,788,,856,,,856,,,856,856,,,856,,856,788,',
'788,856,788,788,788,788,788,788,788,856,788,,,,856,856,856,856,856,856',
',,,856,856,,788,,,,,856,,,856,856,856,,,856,856,209,209,209,209,209',
'209,,,,209,209,,,,209,,209,209,209,209,209,209,209,,,,,,209,209,209',
'209,209,209,209,,,209,,,,,,209,209,,209,209,209,209,209,209,209,209',
'209,,209,209,209,,209,209,,209,209,209,786,786,786,786,786,786,786,786',
'786,786,786,,786,786,,,786,786,,209,,,209,,,209,209,,,209,,209,786,',
'786,209,786,786,786,786,786,786,786,209,786,,,,209,209,209,209,209,209',
',,,209,209,,786,,,,,209,,,209,209,209,,,209,209,2,2,2,2,2,2,,,,2,2,',
',,2,,2,2,2,2,2,2,2,,,,,,2,2,2,2,2,2,2,,,2,,,,,,2,2,2,2,2,2,2,2,2,2,2',
'2,,2,2,2,,2,2,,2,2,2,883,883,883,883,883,883,883,883,883,883,883,,883',
'883,,,883,883,,2,,,2,,,2,2,,,2,,2,883,,883,2,883,883,883,883,883,883',
'883,2,883,,,,2,2,2,2,2,2,,,,2,2,,883,,,,,2,,,2,2,2,,,2,2,904,904,904',
'904,904,904,,,,904,904,,,,904,,904,904,904,904,904,904,904,,,,,,904',
'904,904,904,904,904,904,,,904,,,,,,904,904,,904,904,904,904,904,904',
'904,904,904,,904,904,904,,904,904,,904,904,904,886,886,886,886,886,886',
'886,886,886,886,886,,886,886,,,886,886,,904,,,904,,,904,904,,,904,,904',
'886,,886,904,886,886,886,886,886,886,886,904,886,,,,904,904,904,904',
'904,904,,,,904,904,,886,,,,,904,,,904,904,904,,,904,904,824,824,824',
'824,824,824,,,,824,824,,,,824,,824,824,824,824,824,824,824,,,,,,824',
'824,824,824,824,824,824,,,824,,,,,,824,824,,824,824,824,824,824,824',
'824,824,824,,824,824,824,,824,824,,824,824,824,533,533,533,533,533,533',
'533,533,533,533,533,,533,533,,,533,533,,824,,,824,,,824,824,,,824,,824',
'533,,533,824,533,533,533,533,533,533,533,824,533,,,,824,824,824,824',
'824,824,,,,824,824,,533,,,,,824,,,824,824,824,,,824,824,406,406,406',
'406,406,406,,,,406,406,,,,406,,406,406,406,406,406,406,406,,,,,,406',
'406,406,406,406,406,406,,,406,,,,,,406,406,406,406,406,406,406,406,406',
'406,406,406,,406,406,406,,406,406,,406,406,406,695,695,695,695,695,695',
'695,695,695,695,695,,695,695,,,695,695,,406,,,406,,,406,406,,,406,,406',
'695,,695,406,695,695,695,695,695,695,695,406,695,,,,406,406,406,406',
'406,406,,,,406,406,,695,,,,,406,,,406,406,406,,,406,406,908,908,908',
'908,908,908,,,,908,908,,,,908,,908,908,908,908,908,908,908,,,,,,908',
'908,908,908,908,908,908,,,908,,,,,,908,908,,908,908,908,908,908,908',
'908,908,908,,908,908,908,,908,908,,908,908,908,784,784,784,784,784,784',
'784,784,784,784,784,,784,784,,,784,784,,908,,,908,,,908,908,,,908,,908',
'784,,784,908,784,784,784,784,784,784,784,908,784,,,,908,908,908,908',
'908,908,,,,908,908,,784,,,,,908,,,908,908,908,,,908,908,986,986,986',
'986,986,986,,,,986,986,,,,986,,986,986,986,986,986,986,986,,,,,,986',
'986,986,986,986,986,986,,,986,,,,,,986,986,,986,986,986,986,986,986',
'986,986,986,,986,986,986,,986,986,,986,986,986,781,781,781,781,781,781',
'781,781,781,781,781,,781,781,,,781,781,,986,,,986,,,986,986,,,986,,986',
'781,,781,986,781,781,781,781,781,781,781,986,781,,,,986,986,986,986',
'986,986,,,,986,986,,781,,,,,986,,,986,986,986,,,986,986,706,706,706',
'706,706,706,,,,706,706,,,,706,,706,706,706,706,706,706,706,,,,,,706',
'706,706,706,706,706,706,,,706,,,,,,706,706,,706,706,706,706,706,706',
'706,706,706,,706,706,706,,706,706,,706,706,706,779,779,779,779,779,779',
'779,779,779,779,779,,779,779,,,779,779,,706,,,706,,,706,706,,,706,,706',
'779,,779,706,779,779,779,779,779,779,779,706,779,,,,706,706,706,706',
'706,706,,,,706,706,,779,,,,,706,,,706,706,706,,,706,706,938,938,938',
'938,938,938,,,,938,938,,,,938,,938,938,938,938,938,938,938,,,,,,938',
'938,938,938,938,938,938,,,938,,,,,,938,938,,938,938,938,938,938,938',
'938,938,938,,938,938,938,,938,938,,938,938,938,774,774,774,774,774,774',
'774,774,774,774,774,,774,774,,,774,774,,938,,,938,,,938,938,,,938,,938',
'774,,774,938,774,774,774,774,774,774,774,938,774,,,,938,938,938,938',
'938,938,,,,938,938,,774,,,,,938,,,938,938,938,,,938,938,328,328,328',
'328,328,328,,,,328,328,,,,328,,328,328,328,328,328,328,328,,,,,,328',
'328,328,328,328,328,328,,,328,,,,,,328,328,,328,328,328,328,328,328',
'328,328,328,,328,328,328,,328,328,,328,328,328,440,440,440,440,440,440',
'440,440,440,440,440,,440,440,,,440,440,,328,,,328,,,328,328,,,328,,328',
'440,,440,328,440,440,440,440,440,440,440,328,440,,,,328,328,328,328',
'328,328,,,,328,328,,440,,,,,328,,,328,328,328,,,328,328,971,971,971',
'971,971,971,,,,971,971,,,,971,,971,971,971,971,971,971,971,,,,,,971',
'971,971,971,971,971,971,,,971,,,,,,971,971,,971,971,971,971,971,971',
'971,971,971,,971,971,971,,971,971,,971,971,971,24,24,24,24,24,24,24',
'24,24,24,24,,24,24,,,24,24,,971,,,971,,,971,971,,,971,,971,24,,24,971',
'24,24,24,24,24,24,24,971,24,,,,971,971,971,971,971,971,,,,971,971,,24',
',,,,971,,,971,971,971,,,971,971,233,233,233,233,233,233,,,,233,233,',
',,233,,233,233,233,233,233,233,233,,,,,,233,233,233,233,233,233,233',
',983,233,983,983,983,480,983,233,233,,233,233,233,233,233,233,233,233',
'233,,233,233,233,,233,233,,233,233,233,482,482,482,482,482,482,482,480',
'983,482,482,480,480,480,480,,482,482,,233,,,233,,,233,233,,,233,,233',
'482,,482,233,482,482,482,482,482,482,482,233,482,,,,233,233,233,233',
'233,233,,,,233,233,,985,,985,985,985,233,985,,233,233,233,,,233,233',
'865,865,865,865,865,865,,,,865,865,,,,865,,865,865,865,865,865,865,865',
'985,,,,,865,865,865,865,865,865,865,,,865,,,,,,865,865,,865,865,865',
'865,865,865,865,865,865,,865,865,865,,865,865,,865,865,865,459,459,459',
'459,459,459,459,459,459,459,459,,459,459,,,459,459,,865,,,865,,,865',
'865,,,865,,865,459,,459,865,459,459,459,459,459,459,459,865,459,,,,865',
'865,865,865,865,865,,,,865,865,,1021,,1021,1021,1021,865,1021,,865,865',
'865,,,865,865,764,764,764,764,764,764,,,,764,764,,,,764,,764,764,764',
'764,764,764,764,1021,,,,,764,764,764,764,764,764,764,,,764,,,,,,764',
'764,,764,764,764,764,764,764,764,764,764,,764,764,764,,764,764,,764',
'764,764,460,460,460,460,460,460,460,460,460,460,460,,460,460,,,460,460',
',764,,,764,,,764,764,,,764,,764,460,,460,764,460,460,460,460,460,460',
'460,764,460,,,,764,764,764,764,764,764,,,,764,764,,,,,,,764,,,764,764',
'764,,,764,764,585,585,585,585,585,585,,,,585,585,,,,585,,585,585,585',
'585,585,585,585,,,,,,585,585,585,585,585,585,585,,,585,,,,,,585,585',
',585,585,585,585,585,585,585,585,585,,585,585,585,,585,585,,585,585',
'585,470,470,470,470,470,470,470,,,470,470,,,,,,470,470,,585,,,585,,',
'585,585,,,585,,585,470,,470,585,470,470,470,470,470,470,470,585,470',
',,,585,585,585,585,585,585,,,,585,585,,,,,,,585,,,585,585,585,,,585',
'585,582,582,582,582,582,582,,,,582,582,,,,582,,582,582,582,582,582,582',
'582,,,,,,582,582,582,582,582,582,582,,,582,,,,,,582,582,,582,582,582',
'582,582,582,582,582,582,,582,582,582,,582,582,,582,582,582,471,,,,,',
',,,,,,,,,,471,471,,582,,,582,,469,582,582,,,582,,582,471,,471,582,471',
'471,471,471,469,469,471,582,471,,,,582,582,582,582,582,582,,,469,582',
'582,,469,469,469,469,,582,,,582,582,582,,,582,582,303,303,303,303,303',
'303,,,,303,303,,,,303,,303,303,303,303,303,303,303,,,,,,303,303,303',
'303,303,303,303,,,303,,,,,,303,303,,303,303,303,303,303,303,303,303',
'303,,303,303,303,,303,303,,303,303,303,472,,,,,,,,,,,,,,,,472,472,,303',
',,303,,,303,303,,,303,,303,472,,472,303,472,472,472,472,,,472,303,472',
',,,303,303,303,303,303,303,,,,303,303,,,,,,,303,,,303,303,303,,,303',
'303,757,757,757,757,757,757,,,,757,757,,,,757,,757,757,757,757,757,757',
'757,,,,,,757,757,757,757,757,757,757,,,757,,,,,,757,757,,757,757,757',
'757,757,757,757,757,757,,757,757,757,,757,757,,757,757,757,473,,,,,',
',,,,,,,,,,473,473,,757,,,757,,,757,757,,,757,,757,473,,473,757,473,473',
'473,473,,,473,757,473,,,,757,757,757,757,757,757,,,,757,757,,,,,,,757',
',,757,757,757,,,757,757,707,707,707,707,707,707,,,,707,707,,,,707,,707',
'707,707,707,707,707,707,,,,,,707,707,707,707,707,707,707,,,707,,,,,',
'707,707,,707,707,707,707,707,707,707,707,707,,707,707,707,,707,707,',
'707,707,707,474,,,,,,,,,,,,,,,,474,474,,707,,,707,,,707,707,,,707,,707',
'474,,474,707,474,474,474,474,,,474,707,474,,,,707,707,707,707,707,707',
',,,707,707,,,,,,,707,,,707,707,707,,,707,707,809,809,809,809,809,809',
',,,809,809,,,,809,,809,809,809,809,809,809,809,,,,,,809,809,809,809',
'809,809,809,,,809,,,,,,809,809,,809,809,809,809,809,809,809,809,809',
',809,809,809,,809,809,,809,809,809,475,475,475,475,475,475,475,,,475',
'475,,,,,,475,475,,809,,,809,,,809,809,,,809,,809,475,,475,809,475,475',
'475,475,475,475,475,809,475,,,,809,809,809,809,809,809,,,,809,809,,',
',,,,809,,,809,809,809,,,809,809,36,36,36,36,36,36,,,,36,36,,,,36,,36',
'36,36,36,36,36,36,,,,,,36,36,36,36,36,36,36,,,36,,,,,,36,36,,36,36,36',
'36,36,36,36,36,36,,36,36,36,,36,36,,36,36,36,476,476,476,476,476,476',
'476,,,476,476,,,,,,476,476,,36,,,36,,,36,36,,,36,,36,476,,476,36,476',
'476,476,476,476,476,476,36,476,,,,36,36,36,36,36,36,,,,36,36,,,,,,,36',
',,36,36,36,,,36,36,298,298,298,298,298,298,,,,298,298,,,,298,,298,298',
'298,298,298,298,298,,,,,,298,298,298,298,298,298,298,,,298,,,,,,298',
'298,,298,298,298,298,298,298,298,298,298,,298,298,298,,298,298,,298',
'298,298,477,477,477,477,477,477,477,,,477,477,,,,,,477,477,,298,,,298',
',,298,298,,,298,,298,477,,477,298,477,477,477,477,477,477,477,298,477',
',,,298,298,298,298,298,298,,,,298,298,,,,,,,298,,,298,298,298,,,298',
'298,813,813,813,813,813,813,,,,813,813,,,,813,,813,813,813,813,813,813',
'813,,,,,,813,813,813,813,813,813,813,,,813,,,,,,813,813,,813,813,813',
'813,813,813,813,813,813,,813,813,813,,813,813,,813,813,813,478,478,478',
'478,478,478,478,,,478,478,,,,,,478,478,,813,,,813,,,813,813,,,813,,813',
'478,,478,813,478,478,478,478,478,478,478,813,478,,,,813,813,813,813',
'813,813,,,,813,813,,,,,,,813,,,813,813,813,,,813,813,995,995,995,995',
'995,995,,,,995,995,,,,995,,995,995,995,995,995,995,995,,,,,,995,995',
'995,995,995,995,995,,,995,,,,,,995,995,,995,995,995,995,995,995,995',
'995,995,,995,995,995,,995,995,,995,995,995,479,479,479,479,479,479,479',
',,479,479,,,,,,479,479,,995,,,995,,,995,995,,,995,,995,479,,479,995',
'479,479,479,479,479,479,479,995,479,,,,995,995,995,995,995,995,,,,995',
'995,,,,,,,995,,,995,995,995,,,995,995,34,34,34,,34,,,,34,34,,,,34,,34',
'34,34,34,34,34,34,,,,,,34,34,34,34,34,34,34,,,34,,,,,,,34,,,34,34,34',
'34,34,34,34,34,34,34,34,34,,34,34,,34,34,34,483,483,483,483,483,483',
'483,483,,483,483,,,,,,483,483,,34,,,34,,,34,34,,,34,,34,483,34,483,34',
'483,483,483,483,483,483,483,34,483,,,,34,34,34,34,34,34,,,,34,34,,,',
',,,34,,34,34,34,34,,,34,34,285,285,285,,285,,,,285,285,,,,285,,285,285',
'285,285,285,285,285,,,,,,285,285,285,285,285,285,285,,,285,,,,,,,285',
',,285,285,285,285,285,285,285,285,,285,285,285,,285,285,,285,285,285',
'467,,,,,,,,,,,,,,,,467,467,,285,,,285,,,285,285,,,285,,,467,,467,285',
'467,467,467,467,,,,285,,,,,285,285,285,285,285,285,,,,285,285,,,,,,',
'285,,,285,285,285,,,285,285,287,287,287,,287,,,,287,287,,,,287,,287',
'287,287,287,287,287,287,,,,,,287,287,287,287,287,287,287,,,287,,,,,',
',287,,,287,287,287,287,287,287,287,287,,287,287,287,,287,287,,287,287',
'287,468,,,,,,,,,,,,,,,,468,468,,287,,,287,,,287,287,,,287,,,468,,468',
'287,468,468,468,468,,,,287,,,,,287,287,287,287,287,287,,,,287,287,,',
',,,,287,,,287,287,287,,,287,287,289,289,289,,289,,,,289,289,,,,289,',
'289,289,289,289,289,289,289,,,,,,289,289,289,289,289,289,289,,,289,',
',,,,,289,,,289,289,289,289,289,289,289,289,,289,289,289,,289,289,,289',
'289,289,,,,,,,,,,,,,,,,,,,,289,,,289,,,289,289,,,289,,,,,,289,,,,,,',
',289,,,,,289,289,289,289,289,289,,,,289,289,,,,,,,289,,,289,289,289',
',,289,289,290,290,290,,290,,,,290,290,,,,290,,290,290,290,290,290,290',
'290,,,,,,290,290,290,290,290,290,290,,,290,,,,,,,290,,,290,290,290,290',
'290,290,290,290,,290,290,290,,290,290,,290,290,290,,,,,,,,,,,,,,,,,',
',,290,,,290,,,290,290,,,290,,,,,,290,,,,,,,,290,,,,,290,290,290,290',
'290,290,,,,290,290,,,,,,,290,,,290,290,290,,,290,290,244,244,244,,244',
',,,244,244,,,,244,,244,244,244,244,244,244,244,,,,,,244,244,244,244',
'244,244,244,,,244,,,,,,,244,,,244,244,244,244,244,244,244,244,,244,244',
'244,,244,244,,244,244,244,,,,,,,,,,,,,,,,,,,,244,,,244,,,244,244,,,244',
',,,,,244,,,,,,,,244,,,,,244,244,244,244,244,244,,,,244,244,,,,,,,244',
',,244,244,244,,,244,244,243,243,243,,243,,,,243,243,,,,243,,243,243',
'243,243,243,243,243,,,,,,243,243,243,243,243,243,243,,,243,,,,,,,243',
',,243,243,243,243,243,243,243,243,,243,243,243,,243,243,,243,243,243',
',,,,,,,,,,,,,,,,,,,243,,,243,,,243,243,,,243,,,,,,243,,,,,,,,243,,,',
',243,243,243,243,243,243,,,,243,243,,,,,,,243,,,243,243,243,,,243,243',
'296,296,296,296,296,,,,296,296,,,,296,,296,296,296,296,296,296,296,',
',,,,296,296,296,296,296,296,296,,,296,,,,,,296,296,,296,296,296,296',
'296,296,296,296,296,,296,296,296,,296,296,,296,296,296,,,,,,,,,,,,,',
',,,,,,296,,,296,,,296,296,,,296,,296,,,,296,,,,,,,,296,,,,,296,296,296',
'296,296,296,,,,296,296,,,,,,,296,,,296,296,296,,,296,296,683,683,683',
',683,,,,683,683,,,,683,,683,683,683,683,683,683,683,,,,,,683,683,683',
'683,683,683,683,,,683,,,,,,,683,,,683,683,683,683,683,683,683,683,,683',
'683,683,,683,683,,,,683,,,,,,,,,,,,,,,,,,,,683,,,683,,,683,683,,,683',
',,,,,,,,,,,,,,,,,,683,683,683,683,683,683,,,,683,683,,,,,,,683,,,683',
'683,683,,,683,683,37,37,37,,37,,,,37,37,,,,37,,37,37,37,37,37,37,37',
',,,,,37,37,37,37,37,37,37,,,37,,,,,,,37,,,37,37,37,37,37,37,37,37,,37',
'37,37,,37,37,,,,37,,,,,,,,,,,,,,,,,,,,37,,,37,,,37,37,,,37,,37,,,,,',
',,,,,,,,,,,37,37,37,37,37,37,,,,37,37,,,,,,,37,,,37,37,37,,,37,37,680',
'680,680,,680,,,,680,680,,,,680,,680,680,680,680,680,680,680,,,,,,680',
'680,680,680,680,680,680,,,680,,,,,,,680,,,680,680,680,680,680,680,680',
'680,,680,680,680,,680,680,,680,680,680,,,,,,,,,,,,,,,,,,,,680,,,680',
',,680,680,,,680,,,,,,680,,,,,,,,680,,,,,680,680,680,680,680,680,,,,680',
'680,,,,,,,680,,,680,680,680,,,680,680,38,38,38,,38,,,,38,38,,,,38,,38',
'38,38,38,38,38,38,,,,,,38,38,38,38,38,38,38,,,38,,,,,,,38,,,38,38,38',
'38,38,38,38,38,,38,38,38,,38,38,,,,38,,,,,,,,,,,,,,,,,,,,38,,,38,,,38',
'38,,,38,,,,,,,,,,,,,,,,,,,38,38,38,38,38,38,,,,38,38,,,,38,,,38,,,38',
'38,38,,,38,38,853,853,853,,853,,,,853,853,,,,853,,853,853,853,853,853',
'853,853,,,,,,853,853,853,853,853,853,853,,,853,,,,,,,853,,,853,853,853',
'853,853,853,853,853,,853,853,853,,853,853,,853,853,853,,,,,,,,,,,,,',
',,,,,,853,,,853,,,853,853,,,853,,,,,,853,,,,,,,,853,,,,,853,853,853',
'853,853,853,,,,853,853,,,,,,,853,,,853,853,853,,,853,853,745,745,745',
',745,,,,745,745,,,,745,,745,745,745,745,745,745,745,,,,,,745,745,745',
'745,745,745,745,,,745,,,,,,,745,,,745,745,745,745,745,745,745,745,,745',
'745,745,,745,745,,745,745,745,,,,,,,,,,,,,,,,,,,,745,,,745,,,745,745',
',,745,,,,,,745,,,,,,,,745,,,,,745,745,745,745,745,745,,,,745,745,,,',
',,,745,,,745,745,745,,,745,745,255,255,255,,255,,,,255,255,,,,255,,255',
'255,255,255,255,255,255,,,,,,255,255,255,255,255,255,255,,,255,,,,,',
',255,,,255,255,255,255,255,255,255,255,,255,255,255,,255,255,,255,255',
'255,,,,,,,,,,,,,,,,,,,,255,,,255,,,255,255,,,255,,,,,,255,,,,,,,,255',
',,,,255,255,255,255,255,255,,,,255,255,,,,,,,255,,,255,255,255,,,255',
'255,677,677,677,,677,,,,677,677,,,,677,,677,677,677,677,677,677,677',
',,,,,677,677,677,677,677,677,677,,,677,,,,,,,677,,,677,677,677,677,677',
'677,677,677,,677,677,677,,677,677,,677,677,677,,,,,,,,,,,,,,,,,,,,677',
',,677,,,677,677,,,677,,,,,,677,,,,,,,,677,,,,,677,677,677,677,677,677',
',,,677,677,,,,,,,677,,,677,677,677,,,677,677,242,242,242,,242,,,,242',
'242,,,,242,,242,242,242,242,242,242,242,,,,,,242,242,242,242,242,242',
'242,,,242,,,,,,,242,,,242,242,242,242,242,242,242,242,,242,242,242,',
'242,242,,242,242,242,,,,,,,,,,,,,,,,,,,,242,,,242,,,242,242,,,242,,',
',,,242,,,,,,,,242,,,,,242,242,242,242,242,242,,,,242,242,,,,,,,242,',
',242,242,242,,,242,242,302,302,302,,302,,,,302,302,,,,302,,302,302,302',
'302,302,302,302,,,,,,302,302,302,302,302,302,302,,,302,,,,,,,302,,,302',
'302,302,302,302,302,302,302,,302,302,302,,302,302,,,,302,,,,,,,,,,,',
',,,,,,,,302,,,302,,,302,302,,,302,,,,,,,,,,,,,,,,,,,302,302,302,302',
'302,302,,,,302,302,,,,302,,,302,,,302,302,302,,,302,302,866,866,866',
',866,,,,866,866,,,,866,,866,866,866,866,866,866,866,,,,,,866,866,866',
'866,866,866,866,,,866,,,,,,,866,,,866,866,866,866,866,866,866,866,,866',
'866,866,,866,866,,866,866,866,,,,,,,,,,,,,,,,,,,,866,,,866,,,866,866',
',,866,,,,,,866,,,,,,,,866,,,,,866,866,866,866,866,866,,,,866,866,,,',
',,,866,,,866,866,866,,,866,866,241,241,241,,241,,,,241,241,,,,241,,241',
'241,241,241,241,241,241,,,,,,241,241,241,241,241,241,241,,,241,,,,,',
',241,,,241,241,241,241,241,241,241,241,,241,241,241,,241,241,,241,241',
'241,,,,,,,,,,,,,,,,,,,,241,,,241,,,241,241,,,241,,,,,,241,,,,,,,,241',
',,,,241,241,241,241,241,241,,,,241,241,,,,,,,241,,,241,241,241,,,241',
'241,240,240,240,,240,,,,240,240,,,,240,,240,240,240,240,240,240,240',
',,,,,240,240,240,240,240,240,240,,,240,,,,,,,240,,,240,240,240,240,240',
'240,240,240,,240,240,240,,240,240,,240,240,240,,,,,,,,,,,,,,,,,,,,240',
',,240,,,240,240,,,240,,,,,,240,,,,,,,,240,,,,,240,240,240,240,240,240',
',,,240,240,,,,,,,240,,,240,240,240,,,240,240,239,239,239,,239,,,,239',
'239,,,,239,,239,239,239,239,239,239,239,,,,,,239,239,239,239,239,239',
'239,,,239,,,,,,,239,,,239,239,239,239,239,239,239,239,,239,239,239,',
'239,239,,239,239,239,,,,,,,,,,,,,,,,,,,,239,,,239,,,239,239,,,239,,',
',,,239,,,,,,,,239,,,,,239,239,239,239,239,239,,,,239,239,,,,,,,239,',
',239,239,239,,,239,239,238,238,238,,238,,,,238,238,,,,238,,238,238,238',
'238,238,238,238,,,,,,238,238,238,238,238,238,238,,,238,,,,,,,238,,,238',
'238,238,238,238,238,238,238,,238,238,238,,238,238,,238,238,238,,,,,',
',,,,,,,,,,,,,,238,,,238,,,238,238,,,238,,,,,,238,,,,,,,,238,,,,,238',
'238,238,238,238,238,,,,238,238,,,,,,,238,,,238,238,238,,,238,238,884',
'884,884,,884,,,,884,884,,,,884,,884,884,884,884,884,884,884,,,,,,884',
'884,884,884,884,884,884,,,884,,,,,,,884,,,884,884,884,884,884,884,884',
'884,884,884,884,884,,884,884,,884,884,884,,,,,,,,,,,,,,,,,,,,884,,,884',
',,884,884,,,884,,,,884,,884,,,,,,,,884,,,,,884,884,884,884,884,884,',
',,884,884,,,,,,,884,,884,884,884,884,,,884,884,885,885,885,,885,,,,885',
'885,,,,885,,885,885,885,885,885,885,885,,,,,,885,885,885,885,885,885',
'885,,,885,,,,,,,885,,,885,885,885,885,885,885,885,885,,885,885,885,',
'885,885,,885,885,885,,,,,,,,,,,,,,,,,,,,885,,,885,,,885,885,,,885,,',
',,,885,,,,,,,,885,,,,,885,885,885,885,885,885,,,,885,885,,,,,,,885,',
',885,885,885,,,885,885,653,653,653,,653,,,,653,653,,,,653,,653,653,653',
'653,653,653,653,,,,,,653,653,653,653,653,653,653,,,653,,,,,,,653,,,653',
'653,653,653,653,653,653,653,,653,653,653,,653,653,,653,653,653,,,,,',
',,,,,,,,,,,,,,653,,,653,,,653,653,,,653,,,,,,653,,,,,,,,653,,,,,653',
'653,653,653,653,653,,,,653,653,,,,,,,653,,,653,653,653,,,653,653,652',
'652,652,,652,,,,652,652,,,,652,,652,652,652,652,652,652,652,,,,,,652',
'652,652,652,652,652,652,,,652,,,,,,,652,,,652,652,652,652,652,652,652',
'652,,652,652,652,,652,652,,652,652,652,,,,,,,,,,,,,,,,,,,,652,,,652',
',,652,652,,,652,,,,,,652,,,,,,,,652,,,,,652,652,652,652,652,652,,,,652',
'652,,,,,,,652,,,652,652,652,,,652,652,237,237,237,,237,,,,237,237,,',
',237,,237,237,237,237,237,237,237,,,,,,237,237,237,237,237,237,237,',
',237,,,,,,,237,,,237,237,237,237,237,237,237,237,,237,237,237,,237,237',
',237,237,237,,,,,,,,,,,,,,,,,,,,237,,,237,,,237,237,,,237,,,,,,237,',
',,,,,,237,,,,,237,237,237,237,237,237,,,,237,237,,,,,,,237,,,237,237',
'237,,,237,237,649,649,649,,649,,,,649,649,,,,649,,649,649,649,649,649',
'649,649,,,,,,649,649,649,649,649,649,649,,,649,,,,,,,649,,,649,649,649',
'649,649,649,649,649,,649,649,649,,649,649,,649,649,649,,,,,,,,,,,,,',
',,,,,,649,,,649,,,649,649,,,649,,,,,,649,,,,,,,,649,,,,,649,649,649',
'649,649,649,,,,649,649,,,,,,,649,,,649,649,649,,,649,649,648,648,648',
',648,,,,648,648,,,,648,,648,648,648,648,648,648,648,,,,,,648,648,648',
'648,648,648,648,,,648,,,,,,,648,,,648,648,648,648,648,648,648,648,,648',
'648,648,,648,648,,648,648,648,,,,,,,,,,,,,,,,,,,,648,,,648,,,648,648',
',,648,,,,,,648,,,,,,,,648,,,,,648,648,648,648,648,648,,,,648,648,,,',
',,,648,,,648,648,648,,,648,648,236,236,236,,236,,,,236,236,,,,236,,236',
'236,236,236,236,236,236,,,,,,236,236,236,236,236,236,236,,,236,,,,,',
',236,,,236,236,236,236,236,236,236,236,,236,236,236,,236,236,,236,236',
'236,,,,,,,,,,,,,,,,,,,,236,,,236,,,236,236,,,236,,,,,,236,,,,,,,,236',
',,,,236,236,236,236,236,236,,,,236,236,,,,,,,236,,,236,236,236,,,236',
'236,643,643,643,,643,,,,643,643,,,,643,,643,643,643,643,643,643,643',
',,,,,643,643,643,643,643,643,643,,,643,,,,,,,643,,,643,643,643,643,643',
'643,643,643,,643,643,643,,643,643,,643,643,643,,,,,,,,,,,,,,,,,,,,643',
',,643,,,643,643,,,643,,,,,,643,,,,,,,,643,,,,,643,643,643,643,643,643',
',,,643,643,,,,,,,643,,,643,643,643,,,643,643,900,900,900,,900,,,,900',
'900,,,,900,,900,900,900,900,900,900,900,,,,,,900,900,900,900,900,900',
'900,,,900,,,,,,,900,,,900,900,900,900,900,900,900,900,,900,900,900,',
'900,900,,,,900,,,,,,,,,,,,,,,,,,,,900,,,900,,,900,900,,,900,,,,,,,,',
',,,,,,,,,,900,900,900,900,900,900,,,,900,900,,,,,,,900,,,900,900,900',
',,900,900,642,642,642,,642,,,,642,642,,,,642,,642,642,642,642,642,642',
'642,,,,,,642,642,642,642,642,642,642,,,642,,,,,,,642,,,642,642,642,642',
'642,642,642,642,,642,642,642,,642,642,,642,642,642,,,,,,,,,,,,,,,,,',
',,642,,,642,,,642,642,,,642,,,,,,642,,,,,,,,642,,,,,642,642,642,642',
'642,642,,,,642,642,,,,,,,642,,,642,642,642,,,642,642,641,641,641,,641',
',,,641,641,,,,641,,641,641,641,641,641,641,641,,,,,,641,641,641,641',
'641,641,641,,,641,,,,,,,641,,,641,641,641,641,641,641,641,641,641,641',
'641,641,,641,641,,641,641,641,,,,,,,,,,,,,,,,,,,,641,,,641,,,641,641',
',,641,,,,641,,641,,,,,,,,641,,,,,641,641,641,641,641,641,,,,641,641',
',,,,,,641,,641,641,641,641,,,641,641,640,640,640,,640,,,,640,640,,,',
'640,,640,640,640,640,640,640,640,,,,,,640,640,640,640,640,640,640,,',
'640,,,,,,,640,,,640,640,640,640,640,640,640,640,640,640,640,640,,640',
'640,,640,640,640,,,,,,,,,,,,,,,,,,,,640,,,640,,,640,640,,,640,,640,',
'640,,640,,,,,,,,640,,,,,640,640,640,640,640,640,,,,640,640,,,,,,,640',
',640,640,640,640,,,640,640,235,235,235,,235,,,,235,235,,,,235,,235,235',
'235,235,235,235,235,,,,,,235,235,235,235,235,235,235,,,235,,,,,,,235',
',,235,235,235,235,235,235,235,235,,235,235,235,,235,235,,235,235,235',
',,,,,,,,,,,,,,,,,,,235,,,235,,,235,235,,,235,,,,,,235,,,,,,,,235,,,',
',235,235,235,235,235,235,,,,235,235,,,,,,,235,,,235,235,235,,,235,235',
'912,912,912,,912,,,,912,912,,,,912,,912,912,912,912,912,912,912,,,,',
',912,912,912,912,912,912,912,,,912,,,,,,,912,,,912,912,912,912,912,912',
'912,912,,912,912,912,,912,912,,,,912,,,,,,,,,,,,,,,,,,,,912,,,912,,',
'912,912,,,912,,,,,,,,,,,,,,,,,,,912,912,912,912,912,912,,,,912,912,',
',,,,,912,,,912,912,912,,,912,912,637,637,637,,637,,,,637,637,,,,637',
',637,637,637,637,637,637,637,,,,,,637,637,637,637,637,637,637,,,637',
',,,,,,637,,,637,637,637,637,637,637,637,637,,637,637,637,,637,637,,637',
'637,637,,,,,,,,,,,,,,,,,,,,637,,,637,,,637,637,,,637,,,,,,637,,,,,,',
',637,,,,,637,637,637,637,637,637,,,,637,637,,,,,,,637,,,637,637,637',
',,637,637,636,636,636,,636,,,,636,636,,,,636,,636,636,636,636,636,636',
'636,,,,,,636,636,636,636,636,636,636,,,636,,,,,,,636,,,636,636,636,636',
'636,636,636,636,,636,636,636,,636,636,,636,636,636,,,,,,,,,,,,,,,,,',
',,636,,,636,,,636,636,,,636,,636,,,,636,,,,,,,,636,,,,,636,636,636,636',
'636,636,,,,636,636,,,,,,,636,,,636,636,636,,,636,636,232,232,232,,232',
',,,232,232,,,,232,,232,232,232,232,232,232,232,,,,,,232,232,232,232',
'232,232,232,,,232,,,,,,,232,,,232,232,232,232,232,232,232,232,,232,232',
'232,,232,232,,232,232,232,,,,,,,,,,,,,,,,,,,,232,,,232,,,232,232,,,232',
',,,,,232,,,,,,,,232,,,,,232,232,232,232,232,232,,,,232,232,,,,,,,232',
',,232,232,232,,,232,232,607,607,607,,607,,,,607,607,,,,607,,607,607',
'607,607,607,607,607,,,,,,607,607,607,607,607,607,607,,,607,,,,,,,607',
',,607,607,607,607,607,607,607,607,,607,607,607,,607,607,,607,607,607',
',,,,,,,,,,,,,,,,,,,607,,,607,,,607,607,,,607,,,,,,607,,,,,,,,607,,,',
',607,607,607,607,607,607,,,,607,607,,,,,,,607,,,607,607,607,,,607,607',
'603,603,603,,603,,,,603,603,,,,603,,603,603,603,603,603,603,603,,,,',
',603,603,603,603,603,603,603,,,603,,,,,,,603,,,603,603,603,603,603,603',
'603,603,,603,603,603,,603,603,,603,603,603,,,,,,,,,,,,,,,,,,,,603,,',
'603,,,603,603,,,603,,,,,,603,,,,,,,,603,,,,,603,603,603,603,603,603',
',,,603,603,,,,,,,603,,,603,603,603,,,603,603,45,45,45,,45,,,,45,45,',
',,45,,45,45,45,45,45,45,45,,,,,,45,45,45,45,45,45,45,,,45,,,,,,,45,',
',45,45,45,45,45,45,45,45,,45,45,45,,45,45,,45,45,45,,,,,,,,,,,,,,,,',
',,,45,,,45,,,45,45,,,45,,,,,,45,,,,,,,,45,,,,,45,45,45,45,45,45,,,,45',
'45,,,,,,,45,,,45,45,45,,,45,45,319,319,319,,319,,,,319,319,,,,319,,319',
'319,319,319,319,319,319,,,,,,319,319,319,319,319,319,319,,,319,,,,,',
',319,,,319,319,319,319,319,319,319,319,,319,319,319,,319,319,,,,319',
',,,,,,,,,,,,,,,,,,,319,,,319,,,319,319,,,319,,,,,,,,,,,,,,,,,,,319,319',
'319,319,319,319,,,,319,319,,,,,,,319,,,319,319,319,,,319,319,937,937',
'937,,937,,,,937,937,,,,937,,937,937,937,937,937,937,937,,,,,,937,937',
'937,937,937,937,937,,,937,,,,,,,937,,,937,937,937,937,937,937,937,937',
',937,937,937,,937,937,,937,937,937,,,,,,,,,,,,,,,,,,,,937,,,937,,,937',
'937,,,937,,937,,,,937,,,,,,,,937,,,,,937,937,937,937,937,937,,,,937',
'937,,,,,,,937,,,937,937,937,,,937,937,591,591,591,,591,,,,591,591,,',
',591,,591,591,591,591,591,591,591,,,,,,591,591,591,591,591,591,591,',
',591,,,,,,,591,,,591,591,591,591,591,591,591,591,591,591,591,591,,591',
'591,,591,591,591,,,,,,,,,,,,,,,,,,,,591,,,591,,,591,591,,,591,,591,',
'591,,591,,,,,,,,591,,,,,591,591,591,591,591,591,,,,591,591,,,,,,,591',
',591,591,591,591,,,591,591,46,46,46,,46,,,,46,46,,,,46,,46,46,46,46',
'46,46,46,,,,,,46,46,46,46,46,46,46,,,46,,,,,,,46,,,46,46,46,46,46,46',
'46,46,,46,46,46,,46,46,,46,46,46,,,,,,,,,,,,,,,,,,,,46,,,46,,,46,46',
',,46,,,,,,46,,,,,,,,46,,,,,46,46,46,46,46,46,,,,46,46,,,,,,,46,,,46',
'46,46,,,46,46,32,32,32,,32,,,,32,32,,,,32,,32,32,32,32,32,32,32,,,,',
',32,32,32,32,32,32,32,,,32,,,,,,,32,,,32,32,32,32,32,32,32,32,32,32',
'32,32,,32,32,,32,32,32,,,,,,,,,,,,,,,,,,,,32,,,32,,,32,32,,,32,,32,',
'32,,32,,,,,,,,32,,,,,32,32,32,32,32,32,,,,32,32,,,,,,,32,,32,32,32,32',
',,32,32,8,8,8,8,8,,,,8,8,,,,8,,8,8,8,8,8,8,8,,,,,,8,8,8,8,8,8,8,,,8',
',,,,,8,8,8,8,8,8,8,8,8,8,8,8,,8,8,8,,8,8,,8,8,8,,,,,,,,,,,,,,,,,,,,8',
',,8,,,8,8,,,8,,8,,,,8,,,,,,,,8,,,,,8,8,8,8,8,8,,,,8,8,,,,,,,8,,,8,8',
'8,,,8,8,67,67,67,,67,,,,67,67,,,,67,,67,67,67,67,67,67,67,,,,,,67,67',
'67,67,67,67,67,,,67,,,,,,,67,,,67,67,67,67,67,67,67,67,,67,67,67,,67',
'67,,67,67,67,,,,,,,,,,,,,,,,,,,,67,,,67,,,67,67,,,67,,,,,,67,,,,,,,',
'67,,,,,67,67,67,67,67,67,,,,67,67,,,,,,,67,,,67,67,67,,,67,67,70,70',
'70,,70,,,,70,70,,,,70,,70,70,70,70,70,70,70,,,,,,70,70,70,70,70,70,70',
',,70,,,,,,,70,,,70,70,70,70,70,70,70,70,,70,70,70,,70,70,,70,70,70,',
',,,,,,,,,,,,,,,,,,70,,,70,,,70,70,,,70,,,,,,70,,,,,,,,70,,,,,70,70,70',
'70,70,70,,,,70,70,70,,,,,70,70,,,70,70,70,,,70,70,71,71,71,,71,,,,71',
'71,,,,71,,71,71,71,71,71,71,71,,,,,,71,71,71,71,71,71,71,,,71,,,,,,',
'71,,,71,71,71,71,71,71,71,71,,71,71,71,,71,71,,,,71,,,,,,,,,,,,,,,,',
',,,71,,,71,,,71,71,,,71,,71,,,,,,,,,,,,,,,,,71,71,71,71,71,71,,,,71',
'71,,,,,,,71,,,71,71,71,,,71,71,253,253,253,,253,,,,253,253,,,,253,,253',
'253,253,253,253,253,253,,,,,,253,253,253,253,253,253,253,,,253,,,,,',
',253,,,253,253,253,253,253,253,253,253,,253,253,253,,253,253,,253,253',
'253,,,,,,,,,,,,,,,,,,,,253,,,253,,,253,253,,,253,,,,,,253,,,,,,,,253',
',,,,253,253,253,253,253,253,,,,253,253,,,,,,,253,,,253,253,253,,,253',
'253,252,252,252,,252,,,,252,252,,,,252,,252,252,252,252,252,252,252',
',,,,,252,252,252,252,252,252,252,,,252,,,,,,,252,,,252,252,252,252,252',
'252,252,252,,252,252,252,,252,252,,252,252,252,,,,,,,,,,,,,,,,,,,,252',
',,252,,,252,252,,,252,,,,,,252,,,,,,,,252,,,,,252,252,252,252,252,252',
',,,252,252,,,,,,,252,,,252,252,252,,,252,252,251,251,251,,251,,,,251',
'251,,,,251,,251,251,251,251,251,251,251,,,,,,251,251,251,251,251,251',
'251,,,251,,,,,,,251,,,251,251,251,251,251,251,251,251,,251,251,251,',
'251,251,,251,251,251,,,,,,,,,,,,,,,,,,,,251,,,251,,,251,251,,,251,,',
',,,251,,,,,,,,251,,,,,251,251,251,251,251,251,,,,251,251,,,,,,,251,',
',251,251,251,,,251,251,719,719,719,,719,,,,719,719,,,,719,,719,719,719',
'719,719,719,719,,,,,,719,719,719,719,719,719,719,,,719,,,,,,,719,,,719',
'719,719,719,719,719,719,719,,719,719,719,,719,719,,719,719,719,,,,,',
',,,,,,,,,,,,,,719,,,719,,,719,719,,,719,,,,,,719,,,,,,,,719,,,,,719',
'719,719,719,719,719,,,,719,719,,,,,,,719,,,719,719,719,,,719,719,250',
'250,250,,250,,,,250,250,,,,250,,250,250,250,250,250,250,250,,,,,,250',
'250,250,250,250,250,250,,,250,,,,,,,250,,,250,250,250,250,250,250,250',
'250,,250,250,250,,250,250,,250,250,250,,,,,,,,,,,,,,,,,,,,250,,,250',
',,250,250,,,250,,,,,,250,,,,,,,,250,,,,,250,250,250,250,250,250,,,,250',
'250,,,,,,,250,,,250,250,250,,,250,250,256,256,256,,256,,,,256,256,,',
',256,,256,256,256,256,256,256,256,,,,,,256,256,256,256,256,256,256,',
',256,,,,,,,256,,,256,256,256,256,256,256,256,256,,256,256,256,,256,256',
',256,256,256,,,,,,,,,,,,,,,,,,,,256,,,256,,,256,256,,,256,,,,,,256,',
',,,,,,256,,,,,256,256,256,256,256,256,,,,256,256,,,,,,,256,,,256,256',
'256,,,256,256,773,773,773,,773,,,,773,773,,,,773,,773,773,773,773,773',
'773,773,,,,,,773,773,773,773,773,773,773,,,773,,,,,,,773,,,773,773,773',
'773,773,773,773,773,,773,773,773,,773,773,,773,773,773,,,,,,,,,,,,,',
',,,,,,773,,,773,,,773,773,,,773,,,,,,773,,,,,,,,773,,,,,773,773,773',
'773,773,773,,,,773,773,,,,,,,773,,,773,773,773,,,773,773,775,775,775',
',775,,,,775,775,,,,775,,775,775,775,775,775,775,775,,,,,,775,775,775',
'775,775,775,775,,,775,,,,,,,775,,,775,775,775,775,775,775,775,775,,775',
'775,775,,775,775,,775,775,775,,,,,,,,,,,,,,,,,,,,775,,,775,,,775,775',
',,775,,,,,,775,,,,,,,,775,,,,,775,775,775,775,775,775,,,,775,775,,,',
',,,775,,,775,775,775,,,775,775,257,257,257,,257,,,,257,257,,,,257,,257',
'257,257,257,257,257,257,,,,,,257,257,257,257,257,257,257,,,257,,,,,',
',257,,,257,257,257,257,257,257,257,257,,257,257,257,,257,257,,257,257',
'257,,,,,,,,,,,,,,,,,,,,257,,,257,,,257,257,,,257,,,,,,257,,,,,,,,257',
',,,,257,257,257,257,257,257,,,,257,257,,,,,,,257,,,257,257,257,,,257',
'257,699,699,699,,699,,,,699,699,,,,699,,699,699,699,699,699,699,699',
',,,,,699,699,699,699,699,699,699,,,699,,,,,,,699,,,699,699,699,699,699',
'699,699,699,,699,699,699,,699,699,,699,699,699,,,,,,,,,,,,,,,,,,,,699',
',,699,,,699,699,,,699,,699,,,,699,,,,,,,,699,,,,,699,699,699,699,699',
'699,,,,699,699,,,,,,,699,,,699,699,699,,,699,699,249,249,249,,249,,',
',249,249,,,,249,,249,249,249,249,249,249,249,,,,,,249,249,249,249,249',
'249,249,,,249,,,,,,,249,,,249,249,249,249,249,249,249,249,,249,249,249',
',249,249,,249,249,249,,,,,,,,,,,,,,,,,,,,249,,,249,,,249,249,,,249,',
',,,,249,,,,,,,,249,,,,,249,249,249,249,249,249,,,,249,249,,,,,,,249',
',,249,249,249,,,249,249,248,248,248,,248,,,,248,248,,,,248,,248,248',
'248,248,248,248,248,,,,,,248,248,248,248,248,248,248,,,248,,,,,,,248',
',,248,248,248,248,248,248,248,248,,248,248,248,,248,248,,248,248,248',
',,,,,,,,,,,,,,,,,,,248,,,248,,,248,248,,,248,,,,,,248,,,,,,,,248,,,',
',248,248,248,248,248,248,,,,248,248,,,,,,,248,,,248,248,248,,,248,248',
'694,694,694,,694,,,,694,694,,,,694,,694,694,694,694,694,694,694,,,,',
',694,694,694,694,694,694,694,,,694,,,,,,,694,,,694,694,694,694,694,694',
'694,694,,694,694,694,,694,694,,,,694,,,,,,,,,,,,,,,,,,,,694,,,694,,',
'694,694,,,694,,,,,,,,,,,,,,,,,,,694,694,694,694,694,694,,,,694,694,',
',,,,,694,,,694,694,694,,,694,694,247,247,247,,247,,,,247,247,,,,247',
',247,247,247,247,247,247,247,,,,,,247,247,247,247,247,247,247,,,247',
',,,,,,247,,,247,247,247,247,247,247,247,247,,247,247,247,,247,247,,247',
'247,247,,,,,,,,,,,,,,,,,,,,247,,,247,,,247,247,,,247,,,,,,247,,,,,,',
',247,,,,,247,247,247,247,247,247,,,,247,247,,,,,,,247,,,247,247,247',
',,247,247,789,789,789,,789,,,,789,789,,,,789,,789,789,789,789,789,789',
'789,,,,,,789,789,789,789,789,789,789,,,789,,,,,,,789,,,789,789,789,789',
'789,789,789,789,,789,789,789,,789,789,,789,789,789,,,,,,,,,,,,,,,,,',
',,789,,,789,,,789,789,,,789,,,,,,789,,,,,,,,789,,,,,789,789,789,789',
'789,789,,,,789,789,,,,,,,789,,,789,789,789,,,789,789,790,790,790,,790',
',,,790,790,,,,790,,790,790,790,790,790,790,790,,,,,,790,790,790,790',
'790,790,790,,,790,,,,,,,790,,,790,790,790,790,790,790,790,790,,790,790',
'790,,790,790,,790,790,790,,,,,,,,,,,,,,,,,,,,790,,,790,,,790,790,,,790',
',,,,,790,,,,,,,,790,,,,,790,790,790,790,790,790,,,,790,790,,,,,,,790',
',,790,790,790,,,790,790,791,791,791,,791,,,,791,791,,,,791,,791,791',
'791,791,791,791,791,,,,,,791,791,791,791,791,791,791,,,791,,,,,,,791',
',,791,791,791,791,791,791,791,791,,791,791,791,,791,791,,791,791,791',
',,,,,,,,,,,,,,,,,,,791,,,791,,,791,791,,,791,,,,,,791,,,,,,,,791,,,',
',791,791,791,791,791,791,,,,791,791,,,,,,,791,,,791,791,791,,,791,791',
'792,792,792,,792,,,,792,792,,,,792,,792,792,792,792,792,792,792,,,,',
',792,792,792,792,792,792,792,,,792,,,,,,,792,,,792,792,792,792,792,792',
'792,792,,792,792,792,,792,792,,792,792,792,,,,,,,,,,,,,,,,,,,,792,,',
'792,,,792,792,,,792,,,,,,792,,,,,,,,792,,,,,792,792,792,792,792,792',
',,,792,792,,,,,,,792,,,792,792,792,,,792,792,246,246,246,,246,,,,246',
'246,,,,246,,246,246,246,246,246,246,246,,,,,,246,246,246,246,246,246',
'246,,,246,,,,,,,246,,,246,246,246,246,246,246,246,246,,246,246,246,',
'246,246,,246,246,246,,,,,,,,,,,,,,,,,,,,246,,,246,,,246,246,,,246,,',
',,,246,,,,,,,,246,,,,,246,246,246,246,246,246,,,,246,246,,,,,,,246,',
',246,246,246,,,246,246,794,794,794,,794,,,,794,794,,,,794,,794,794,794',
'794,794,794,794,,,,,,794,794,794,794,794,794,794,,,794,,,,,,,794,,,794',
'794,794,794,794,794,794,794,,794,794,794,,794,794,,794,794,794,,,,,',
',,,,,,,,,,,,,,794,,,794,,,794,794,,,794,,,,,,794,,,,,,,,794,,,,,794',
'794,794,794,794,794,,,,794,794,,,,,,,794,,,794,794,794,,,794,794,258',
'258,258,,258,,,,258,258,,,,258,,258,258,258,258,258,258,258,,,,,,258',
'258,258,258,258,258,258,,,258,,,,,,,258,,,258,258,258,258,258,258,258',
'258,,258,258,258,,258,258,,258,258,258,,,,,,,,,,,,,,,,,,,,258,,,258',
',,258,258,,,258,,,,,,258,,,,,,,,258,,,,,258,258,258,258,258,258,,,,258',
'258,,,,,,,258,,,258,258,258,,,258,258,259,259,259,,259,,,,259,259,,',
',259,,259,259,259,259,259,259,259,,,,,,259,259,259,259,259,259,259,',
',259,,,,,,,259,,,259,259,259,259,259,259,259,259,,259,259,259,,259,259',
',259,259,259,,,,,,,,,,,,,,,,,,,,259,,,259,,,259,259,,,259,,,,,,259,',
',,,,,,259,,,,,259,259,259,259,259,259,,,,259,259,,,,,,,259,,,259,259',
'259,,,259,259,260,260,260,,260,,,,260,260,,,,260,,260,260,260,260,260',
'260,260,,,,,,260,260,260,260,260,260,260,,,260,,,,,,,260,,,260,260,260',
'260,260,260,260,260,,260,260,260,,260,260,,260,260,260,,,,,,,,,,,,,',
',,,,,,260,,,260,,,260,260,,,260,,,,,,260,,,,,,,,260,,,,,260,260,260',
'260,260,260,,,,260,260,,,,,,,260,,,260,260,260,,,260,260,245,245,245',
',245,,,,245,245,,,,245,,245,245,245,245,245,245,245,,,,,,245,245,245',
'245,245,245,245,,,245,,,,,,,245,,,245,245,245,245,245,245,245,245,,245',
'245,245,,245,245,,245,245,245,,,,,,,,,,,,,,,,,,,,245,,,245,,,245,245',
',,245,,,,,,245,,,,,,,,245,,,,,245,245,245,245,245,245,,,,245,245,,,',
',,,245,,,245,245,245,,,245,245,267,267,267,,267,,,,267,267,,,,267,,267',
'267,267,267,267,267,267,,,,,,267,267,267,267,267,267,267,,,267,,,,,',
',267,,,267,267,267,267,267,267,267,267,267,267,267,267,,267,267,,267',
'267,267,,,,,,,,,,,,,,,,,,,,267,,,267,,,267,267,,,267,,267,,267,,267',
',,,,,,,267,,,,,267,267,267,267,267,267,,,,267,267,,,,,,,267,,267,267',
'267,267,,,267,267,273,273,273,,273,,,,273,273,,,,273,,273,273,273,273',
'273,273,273,,,,,,273,273,273,273,273,273,273,,,273,,,,,,,273,,,273,273',
'273,273,273,273,273,273,273,273,273,273,,273,273,,273,273,273,,,,,,',
',,,,,,,,,,,,,273,,,273,,,273,273,,,273,,273,,273,,273,,,,,,,,273,,,',
',273,273,273,273,273,273,,,,273,273,,,,,,,273,,273,273,273,273,,,273',
'273,276,276,276,,276,,,,276,276,,,,276,,276,276,276,276,276,276,276',
',,,,,276,276,276,276,276,276,276,,,276,,,,,,,276,,,276,276,276,276,276',
'276,276,276,276,276,276,276,,276,276,,276,276,276,,,,,,,,,,,,,,,,,,',
',276,,,276,,,276,276,,,276,,276,,276,,276,,,,,,,,276,,,,,276,276,276',
'276,276,276,,,,276,276,276,,,,,,276,,276,276,276,276,,,276,276,806,806',
'806,,806,,,,806,806,,,,806,,806,806,806,806,806,806,806,,,,,,806,806',
'806,806,806,806,806,,,806,,,,,,,806,,,806,806,806,806,806,806,806,806',
',806,806,806,,806,806,,,,806,,,,,,,,,,,,,,,,,,,,806,,,806,,,806,806',
',,806,,,,,,,,,,,,,,,,,,,806,806,806,806,806,806,,,,806,806,,,,,,,806',
',,806,806,806,,,806,806,66,66,66,,66,,,,66,66,,,,66,,66,66,66,66,66',
'66,66,,,,,,66,66,66,66,66,66,66,,,66,,,,,,,66,,,66,66,66,66,66,66,66',
'66,,66,66,66,,66,66,,66,66,66,,,,,,,,,,,,,,,,,,,,66,,,66,,,66,66,,,66',
',,,,,66,,,,,,,,66,,,,,66,66,66,66,66,66,,,,66,66,,,,,,,66,,,66,66,66',
',,66,66,33,33,33,,33,,,,33,33,,,,33,,33,33,33,33,33,33,33,,,,,,33,33',
'33,33,33,33,33,,,33,,,,,,,33,,,33,33,33,33,33,33,33,33,33,33,33,33,',
'33,33,,33,33,33,,,,,,,,,,,,,,,,,,,,33,,,33,,,33,33,,,33,,33,,33,,33',
',,,,,,,33,,,,,33,33,33,33,33,33,,,,33,33,,,,,,,33,,33,33,33,33,,,33',
'33,283,283,283,,283,,,,283,283,,,,283,,283,283,283,283,283,283,283,',
',,,,283,283,283,283,283,283,283,,,283,,,,,,,283,,,283,283,283,283,283',
'283,283,283,,283,283,283,,283,283,,283,283,283,,,,,,,,,,,,,,,,,,,,283',
',,283,,,283,283,,,283,,,,,,283,,,,,,,,283,,,,,283,283,283,283,283,283',
',,,283,283,,,,,,,283,,,283,283,283,,,283,283,518,518,518,,518,,,,518',
'518,,,,518,,518,518,518,518,518,518,518,,,,,,518,518,518,518,518,518',
'518,,,518,,,,,,,518,,,518,518,518,518,518,518,518,518,,518,518,518,',
'518,518,,,,518,,,,,,,,,,,,,,,,,,,,518,,,518,,,518,518,,,518,,,,,,,,',
',,,,,,,,,,518,518,518,518,518,518,,,,518,518,,,,,,,518,,,518,518,518',
',,518,518,123,123,123,123,123,,,,123,123,,,,123,,123,123,123,123,123',
'123,123,,,,,,123,123,123,123,123,123,123,,,123,,,,,,123,123,,123,123',
'123,123,123,123,123,123,123,,123,123,123,,123,123,,123,123,123,,,,,',
',,,,,,,,,,,,,,123,,,123,,,123,123,,,123,,123,,,,123,,,,,,,,123,,,,,123',
'123,123,123,123,123,,,,123,123,,,,,,,123,,,123,123,123,,,123,123,343',
'343,343,,343,,,,343,343,,,,343,,343,343,343,343,343,343,343,,,,,,343',
'343,343,343,343,343,343,,,343,,,,,,,343,,,343,343,343,343,343,343,343',
'343,,343,343,343,,343,343,,343,343,343,,,,,,,,,,,,,,,,,,,,343,,,343',
',,343,343,,,343,,,,,,343,,,,,,,,343,,,,,343,343,343,343,343,343,,,,343',
'343,,,,,,,343,,,343,343,343,,,343,343,344,344,344,,344,,,,344,344,,',
',344,,344,344,344,344,344,344,344,,,,,,344,344,344,344,344,344,344,',
',344,,,,,,,344,,,344,344,344,344,344,344,344,344,,344,344,344,,344,344',
',344,344,344,,,,,,,,,,,,,,,,,,,,344,,,344,,,344,344,,,344,,,,,,344,',
',,,,,,344,,,,,344,344,344,344,344,344,,,,344,344,,,,,,,344,,,344,344',
'344,,,344,344,1012,1012,1012,,1012,,,,1012,1012,,,,1012,,1012,1012,1012',
'1012,1012,1012,1012,,,,,,1012,1012,1012,1012,1012,1012,1012,,,1012,',
',,,,,1012,,,1012,1012,1012,1012,1012,1012,1012,1012,1012,1012,1012,1012',
',1012,1012,,1012,1012,1012,,,,,,,,,,,,,,,,,,,,1012,,,1012,,,1012,1012',
',,1012,,1012,,1012,,1012,,,,,,,,1012,,,,,1012,1012,1012,1012,1012,1012',
',,,1012,1012,,,,,,,1012,,1012,1012,1012,1012,,,1012,1012,122,122,122',
',122,,,,122,122,,,,122,,122,122,122,122,122,122,122,,,,,,122,122,122',
'122,122,122,122,,,122,,,,,,,122,,,122,122,122,122,122,122,122,122,,122',
'122,122,,122,122,,122,122,122,,,,,,,,,,,,,,,,,,,,122,,,122,,,122,122',
',,122,,,,,,122,,,,,,,,122,,,,,122,122,122,122,122,122,,,,122,122,,,',
',,,122,,,122,122,122,,,122,122,511,511,511,511,511,,,,511,511,,,,511',
',511,511,511,511,511,511,511,,,,,,511,511,511,511,511,511,511,,,511',
',,,,,511,511,,511,511,511,511,511,511,511,511,511,,511,511,511,,511',
'511,,511,511,511,,,,,,,,,,,,,,,,,,,,511,,,511,,,511,511,,,511,,511,',
',,511,,,,,,,,511,,,,,511,511,511,511,511,511,,,,511,511,,,,,,511,511',
',,511,511,511,,,511,511,504,504,504,,504,,,,504,504,,,,504,,504,504',
'504,504,504,504,504,,,,,,504,504,504,504,504,504,504,,,504,,,,,,,504',
',,504,504,504,504,504,504,504,504,,504,504,504,,504,504,,504,504,504',
',,,,,,,,,,,,,,,,,,,504,,,504,,,504,504,,,504,,,,,,504,,,,,,,,504,,,',
',504,504,504,504,504,504,,,,504,504,,,,,,,504,,,504,504,504,,,504,504',
'502,502,502,,502,,,,502,502,,,,502,,502,502,502,502,502,502,502,,,,',
',502,502,502,502,502,502,502,,,502,,,,,,,502,,,502,502,502,502,502,502',
'502,502,502,502,502,502,,502,502,,502,502,502,,,,,,,,,,,,,,,,,,,,502',
',,502,,,502,502,,,502,,,,502,,502,,,,,,,,502,,,,,502,502,502,502,502',
'502,,,,502,502,,,,,,,502,,502,502,502,502,,,502,502,499,499,499,,499',
',,,499,499,,,,499,,499,499,499,499,499,499,499,,,,,,499,499,499,499',
'499,499,499,,,499,,,,,,,499,,,499,499,499,499,499,499,499,499,499,499',
'499,499,,499,499,,499,499,499,,,,,,,,,,,,,,,,,,,,499,,,499,,,499,499',
',,499,,499,,499,,499,,,,,,,,499,,,,,499,499,499,499,499,499,,,,499,499',
',,,,,,499,,499,499,499,499,,,499,499,121,121,121,,121,,,,121,121,,,',
'121,,121,121,121,121,121,121,121,,,,,,121,121,121,121,121,121,121,,',
'121,,,,,,,121,,,121,121,121,121,121,121,121,121,,121,121,121,,121,121',
',121,121,121,,,,,,,,,,,,,,,,,,,,121,,,121,,,121,121,,,121,,,,,,121,',
',,,,,,121,,,,,121,121,121,121,121,121,,,,121,121,,,,,,,121,,,121,121',
'121,,,121,121,120,120,120,,120,,,,120,120,,,,120,,120,120,120,120,120',
'120,120,,,,,,120,120,120,120,120,120,120,,,120,,,,,,,120,,,120,120,120',
'120,120,120,120,120,,120,120,120,,120,120,,120,120,120,,,,,,,,,,,,,',
',,,,,,120,,,120,,,120,120,,,120,,,,,,120,,,,,,,,120,,,,,120,120,120',
'120,120,120,,,,120,120,,,,,,,120,,,120,120,120,,,120,120,61,61,61,,61',
',,,61,61,,,,61,,61,61,61,61,61,61,61,,,,,,61,61,61,61,61,61,61,,,61',
',,,,,,61,,,61,61,61,61,61,61,61,61,,61,61,61,,61,61,,61,61,61,,,,,,',
',,,,,,,,,,,,,61,,,61,,,61,61,,,61,,,,,,61,,,,,,,,61,,,,,61,61,61,61',
'61,61,,,,61,61,61,,,,,,61,,,61,61,61,,,61,61,739,739,739,,739,,,,739',
'739,,,,739,,739,739,739,739,739,739,739,,,,,,739,739,739,739,739,739',
'739,,,739,,,,,,,739,,,739,739,739,739,739,739,739,739,,739,739,739,',
'739,739,,739,739,739,,,,,,,,,,,,,,,,,,,,739,,,739,,,739,739,,,739,,739',
',,,739,,,,,,,,739,,,,,739,739,739,739,739,739,,,,739,739,,,,,,,739,',
',739,739,739,,,739,739,254,254,254,,254,,,,254,254,,,,254,,254,254,254',
'254,254,254,254,,,,,,254,254,254,254,254,254,254,,,254,,,,,,,254,,,254',
'254,254,254,254,254,254,254,,254,254,254,,254,254,,254,254,254,,,,,',
',,,,,,,,,,,,,,254,,,254,,,254,254,,,254,,,,,,254,,,,,,,,254,,,,,254',
'254,254,254,254,254,,,,254,254,,,,,,,254,,,254,254,254,,,254,254,62',
'62,62,,62,,,,62,62,,,,62,,62,62,62,62,62,62,62,,,,,,62,62,62,62,62,62',
'62,,,62,,,,,,,62,,,62,62,62,62,62,62,62,62,62,62,62,62,,62,62,,62,62',
'62,,,,,,,,,,,,,,,,,,,,62,,,62,,,62,62,,,62,,62,,,,62,,,,,,,,62,,,,,62',
'62,62,62,62,62,,,,62,62,,,,,,,62,,62,62,62,62,,,62,62,751,751,751,,751',
',,,751,751,,,,751,,751,751,751,751,751,751,751,,,,,,751,751,751,751',
'751,751,751,,,751,,,,,,,751,,,751,751,751,751,751,751,751,751,751,751',
'751,751,,751,751,,751,751,751,,,,,,,,,,,,,,,,,,,,751,,,751,,,751,751',
',,751,,751,,751,,751,,,,,,,,751,,,,,751,751,751,751,751,751,,,,751,751',
',,,,,,751,,751,751,751,751,,,751,751,119,119,119,,119,,,,119,119,,,',
'119,,119,119,119,119,119,119,119,,,,,,119,119,119,119,119,119,119,,',
'119,,,,,,,119,,,119,119,119,119,119,119,119,119,,119,119,119,,119,119',
',119,119,119,,,,,,,,,,,,,,,,,,,,119,,,119,,,119,119,,,119,,,,,,119,',
',,,,,,119,,,,,119,119,119,119,119,119,,,,119,119,,,,,,,119,,,119,119',
'119,,,119,119,114,114,114,114,114,,,,114,114,,,,114,,114,114,114,114',
'114,114,114,,,,,,114,114,114,114,114,114,114,,,114,,,,,,114,114,114',
'114,114,114,114,114,114,114,114,114,,114,114,114,,114,114,,114,114,114',
',,,,,,,,,,,,,,,,,,,114,,,114,,,114,114,,,114,,114,,,,114,,,,,,,,114',
',,,,114,114,114,114,114,114,,,,114,114,,,,,,114,114,,,114,114,114,,',
'114,114,356,356,356,,356,,,,356,356,,,,356,,356,356,356,356,356,356',
'356,,,,,,356,356,356,356,356,356,356,,,356,,,,,,,356,,,356,356,356,356',
'356,356,356,356,,356,356,356,,356,356,,,,356,,,,,,,,,,,,,,,,,,,,356',
',,356,,,356,356,,,356,,,,,,,,,,,,,,,,,,,356,356,356,356,356,356,,,,356',
'356,,,,,,,356,,,356,356,356,,,356,356,358,358,358,,358,,,,358,358,,',
',358,,358,358,358,358,358,358,358,,,,,,358,358,358,358,358,358,358,',
',358,,,,,,,358,,,358,358,358,358,358,358,358,358,,358,358,358,,358,358',
',,,358,,,,,,,,,,,,,,,,,,,,358,,,358,,,358,358,,,358,,,,,,,,,,,,,,,,',
',,358,358,358,358,358,358,,,,358,358,,,,,,,358,,,358,358,358,,,358,358',
'458,458,458,,458,,,,458,458,,,,458,,458,458,458,458,458,458,458,,,,',
',458,458,458,458,458,458,458,,,458,,,,,,,458,,,458,458,458,458,458,458',
'458,458,,458,458,458,,458,458,,458,458,458,,,,,,,,,,,,,,,,,,,,458,,',
'458,,,458,458,,,458,,,,,,458,,,,,,,,458,,,,,458,458,458,458,458,458',
',,,458,458,,,,,,,458,,,458,458,458,,,458,458,457,457,457,,457,,,,457',
'457,,,,457,,457,457,457,457,457,457,457,,,,,,457,457,457,457,457,457',
'457,,,457,,,,,,,457,,,457,457,457,457,457,457,457,457,,457,457,457,',
'457,457,,457,457,457,,,,,,,,,,,,,,,,,,,,457,,,457,,,457,457,,,457,,',
',,,457,,,,,,,,457,,,,,457,457,457,457,457,457,,,,457,457,,,,,,,457,',
',457,457,457,,,457,457,456,456,456,,456,,,,456,456,,,,456,,456,456,456',
'456,456,456,456,,,,,,456,456,456,456,456,456,456,,,456,,,,,,,456,,,456',
'456,456,456,456,456,456,456,,456,456,456,,456,456,,456,456,456,,,,,',
',,,,,,,,,,,,,,456,,,456,,,456,456,,,456,,,,,,456,,,,,,,,456,,,,,456',
'456,456,456,456,456,,,,456,456,,,,,,,456,,,456,456,456,,,456,456,454',
'454,454,,454,,,,454,454,,,,454,,454,454,454,454,454,454,454,,,,,,454',
'454,454,454,454,454,454,,,454,,,,,,,454,,,454,454,454,454,454,454,454',
'454,454,454,454,454,,454,454,,454,454,454,,,,,,,,,,,,,,,,,,,,454,,,454',
',,454,454,,,454,,454,,454,,454,,,,,,,,454,,,,,454,454,454,454,454,454',
',,,454,454,,,,,,,454,,454,454,454,454,,,454,454,416,416,416,,416,,,',
'416,416,,,,416,,416,416,416,416,416,416,416,,,,,,416,416,416,416,416',
'416,416,,,416,,,,,,,416,,,416,416,416,416,416,416,416,416,,416,416,416',
',416,416,,416,416,416,,,,,,,,,,,,,,,,,,,,416,,,416,,,416,416,,,416,',
',,,,416,,,,,,,,416,,,,,416,416,416,416,416,416,,,,416,416,,,,,,,416',
',,416,416,416,,,416,416,47,47,47,,47,,,,47,47,,,,47,,47,47,47,47,47',
'47,47,,,,,,47,47,47,47,47,47,47,,,47,,,,,,,47,,,47,47,47,47,47,47,47',
'47,,47,47,47,,47,47,,47,47,47,,,,,,,,,,,,,,,,,,,,47,,,47,,,47,47,,,47',
',,,,,47,,,,,,,,47,,,,,47,47,47,47,47,47,,,,47,47,,,,,,,47,,,47,47,47',
',,47,47,327,327,327,,327,,,,327,327,,,,327,,327,327,327,327,327,327',
'327,,,,,,327,327,327,327,327,327,327,,,327,,,,,,,327,,,327,327,327,327',
'327,327,327,327,,327,327,327,,327,327,,327,327,327,,,,,,,,,,,,,,,,,',
',,327,,,327,327,,327,327,,,327,,,,,,327,,,,,,,,327,,,,,327,327,327,327',
'327,327,,,,327,327,,,,,,,327,,,327,327,327,,,327,327,570,570,570,,570',
',,,570,570,,,,570,,570,570,570,570,570,570,570,,,,,,570,570,570,570',
'570,570,570,,,570,,,,,,,570,,,570,570,570,570,570,570,570,570,,570,570',
'570,,570,570,,570,570,570,,,,,,,,,,,,,,,,,,,,570,,,570,,,570,570,,,570',
',,,,,570,,,,,,,,570,,,,,570,570,570,570,570,570,,,,570,570,,,,,,,570',
',,570,570,570,,,570,570,221,221,221,,221,,,,221,221,,,,221,,221,221',
'221,221,221,221,221,,,,,,221,221,221,221,221,221,221,,,221,,,,,,,221',
',,221,221,221,221,221,221,221,221,,221,221,221,,221,221,,221,221,221',
',,,,,,,,,,,,,,,,,,,221,,,221,,,221,221,,,221,,,,,,221,,,,,,,,221,,,',
',221,221,221,221,221,221,,,,221,221,221,,,,,,221,,,221,221,221,,,221',
'221,220,220,220,,220,,,,220,220,,,,220,,220,220,220,220,220,220,220',
',,,,,220,220,220,220,220,220,220,,,220,,,,,,,220,,,220,220,220,220,220',
'220,220,220,,220,220,220,,220,220,,220,220,220,,,,,,,,,,,,,,,,,,,,220',
',,220,,,220,220,,,220,,,,,,220,,,,,,,,220,,,,,220,220,220,220,220,220',
',,,220,220,,,,,,,220,,,220,220,220,,,220,220,219,219,219,,219,,,,219',
'219,,,,219,,219,219,219,219,219,219,219,,,,,,219,219,219,219,219,219',
'219,,,219,,,,,,,219,,,219,219,219,219,219,219,219,219,,219,219,219,',
'219,219,,219,219,219,,,,,,,,,,,,,,,,,,,,219,,,219,,,219,219,,,219,,',
',,,219,,,,,,,,219,,,,,219,219,219,219,219,219,,,,219,219,,,,,,,219,',
',219,219,219,,,219,219,218,218,218,,218,,,,218,218,,,,218,,218,218,218',
'218,218,218,218,,,,,,218,218,218,218,218,218,218,,,218,,,,,,,218,,,218',
'218,218,218,218,218,218,218,,218,218,218,,218,218,,218,218,218,,,,,',
',,,,,,,,,,,,,,218,,,218,,,218,218,,,218,,,,,,218,,,,,,,,218,,,,,218',
'218,218,218,218,218,,,,218,218,,,,,,,218,,,218,218,218,,,218,218,217',
'217,217,,217,,,,217,217,,,,217,,217,217,217,217,217,217,217,,,,,,217',
'217,217,217,217,217,217,,,217,,,,,,,217,,,217,217,217,217,217,217,217',
'217,,217,217,217,,217,217,,217,217,217,,,,,,,,,,,,,,,,,,,,217,,,217',
',,217,217,,,217,,217,,,,217,,,,,,,,217,,,,,217,217,217,217,217,217,',
',,217,217,,,,,,,217,,,217,217,217,,,217,217,216,216,216,,216,,,,216',
'216,,,,216,,216,216,216,216,216,216,216,,,,,,216,216,216,216,216,216',
'216,,,216,,,,,,,216,,,216,216,216,216,216,216,216,216,,216,216,216,',
'216,216,,216,216,216,,,,,,,,,,,,,,,,,,,,216,,,216,,,216,216,,,216,,',
',,,216,,,,,,,,216,,,,,216,216,216,216,216,216,,,,216,216,,,,,,,216,',
',216,216,216,,,216,216,543,543,543,,543,,,,543,543,,,,543,,543,543,543',
'543,543,543,543,,,,,,543,543,543,543,543,543,543,,,543,,,,,,,543,,,543',
'543,543,543,543,543,543,543,543,543,543,543,,543,543,,543,543,543,,',
',,,,,,,,,,,,,,,,,543,,,543,,,543,543,,,543,,,,,,543,,,,,,,,543,,,,,543',
'543,543,543,543,543,,,,543,543,,,,,,,543,,543,543,543,543,,,543,543',
'540,540,540,,540,,,,540,540,,,,540,,540,540,540,540,540,540,540,,,,',
',540,540,540,540,540,540,540,,,540,,,,,,,540,,,540,540,540,540,540,540',
'540,540,540,540,540,540,,540,540,,540,540,540,,,,,,,,,,,,,,,,,,,,540',
',,540,,,540,540,,,540,,540,,,,540,,,,,,,,540,,,,,540,540,540,540,540',
'540,,,,540,540,,,,,,,540,,540,540,540,540,,,540,540,212,212,212,,212',
',,,212,212,,,,212,,212,212,212,212,212,212,212,,,,,,212,212,212,212',
'212,212,212,,,212,,,,,,,212,,,212,212,212,212,212,212,212,212,212,212',
'212,212,,212,212,,212,212,212,,,,,,,,,,,,,,,,,,,,212,,,212,,,212,212',
',,212,,212,,212,,212,,,,,,,,212,,,,,212,212,212,212,212,212,,,,212,212',
',,,,,,212,,212,212,212,212,,,212,212,211,211,211,,211,,,,211,211,,,',
'211,,211,211,211,211,211,211,211,,,,,,211,211,211,211,211,211,211,,',
'211,,,,,,,211,,,211,211,211,211,211,211,211,211,,211,211,211,,211,211',
',211,211,211,,,,,,,,,,,,,,,,,,,,211,,,211,,,211,211,,,211,,,,,,211,',
',,,,,,211,,,,,211,211,211,211,211,211,,,,211,211,,,,,,,211,,,211,211',
'211,,,211,211,336,336,336,,336,,,,336,336,,,,336,,336,336,336,336,336',
'336,336,,,,,,336,336,336,336,336,336,336,,,336,,,,,,,336,,,336,336,336',
'336,336,336,336,336,336,336,336,336,,336,336,,336,336,336,,,,,,,,,,',
',,,,,,,,,336,,,336,,,336,336,,,336,,,,,,336,,,,,,,,336,,,,,336,336,336',
'336,336,336,,,,336,336,,,,,,,336,,336,336,336,336,,,336,336,210,210',
'210,,210,,,,210,210,,,,210,,210,210,210,210,210,210,210,,,,,,210,210',
'210,210,210,210,210,,,210,,,,,,,210,,,210,210,210,210,210,210,210,210',
',210,210,210,,210,210,,210,210,210,,,,,,,,,,,,,,,,,,,,210,,,210,,,210',
'210,,,210,,210,,,,210,,,,,,,,210,,,,,210,210,210,210,210,210,,,,210',
'210,,,,,,,210,,,210,210,210,,,210,210,534,534,534,,534,,,,534,534,,',
',534,,534,534,534,534,534,534,534,,,,,,534,534,534,534,534,534,534,',
',534,,,,,,,534,,,534,534,534,534,534,534,534,534,,534,534,534,,534,534',
',534,534,534,,,,,,,,,,,,,,,,,,,,534,,,534,,,534,534,,,534,,,,,,534,',
',,,,,,534,,,,,534,534,534,534,534,534,,,,534,534,,,,,,,534,,,534,534',
'534,,,534,534,530,530,530,,530,,,,530,530,,,,530,,530,530,530,530,530',
'530,530,,,,,,530,530,530,530,530,530,530,,,530,,,,,,,530,,,530,530,530',
'530,530,530,530,530,,530,530,530,,530,530,,530,530,530,,,,,,,,,,,,,',
',,,,,,530,,,530,,,530,530,,,530,,,,,,530,,,,,,,,530,,,,,530,530,530',
'530,530,530,,,,530,530,,,,,,,530,,,530,530,530,,,530,530,529,529,529',
',529,,,,529,529,,,,529,,529,529,529,529,529,529,529,,,,,,529,529,529',
'529,529,529,529,,,529,,,,,,,529,,,529,529,529,529,529,529,529,529,,529',
'529,529,,529,529,,529,529,529,,,,,,,,,,,,,,,,,,,,529,,,529,,,529,529',
',,529,,,,,,529,,,,,,,,529,,,,,529,529,529,529,529,529,,,,529,529,,,',
',,,529,,,529,529,529,,,529,529,526,526,526,,526,,,,526,526,,,,526,,526',
'526,526,526,526,526,526,,,,,,526,526,526,526,526,526,526,,,526,,,,,',
',526,,,526,526,526,526,526,526,526,526,,526,526,526,,526,526,,,,526',
',,,,,,,,,,,,,,,,,,,526,,,526,,,526,526,,,526,,,,,,,,,,,,,,,,,,,526,526',
'526,526,526,526,,,,526,526,,,,,,,526,,,526,526,526,,,526,526,23,23,23',
',23,,,,23,23,,,,23,,23,23,23,23,23,23,23,,,,,,23,23,23,23,23,23,23,',
',23,,,,,,,23,,,23,23,23,23,23,23,23,23,,23,23,23,,23,23,,23,23,23,,',
',,,,,,,,,,,,,,,,,23,,,23,,,23,23,,,23,,,,,,23,,,,,,,,23,,,,,23,23,23',
'23,23,23,,,,23,23,,,,,,,23,,,23,23,23,,,23,23,520,520,520,,520,,,,520',
'520,,,,520,,520,520,520,520,520,520,520,,,,,,520,520,520,520,520,520',
'520,,,520,,,,,,,520,,,520,520,520,520,520,520,520,520,520,520,520,520',
',520,520,,520,520,520,,,,,,,,,,,,,,,,,,,,520,,,520,,,520,520,,,520,',
'520,,520,,520,,,,,,,,520,,,,,520,520,520,520,520,520,,,,520,520,,,,',
',,520,,520,520,520,520,59,,520,520,,,,59,59,59,,,59,59,59,713,59,713',
'713,713,713,713,,,,,59,59,59,,,713,,,,,59,59,,59,59,59,59,59,,,,,,,',
',,713,,,,,,,,,713,713,713,713,,59,59,59,59,59,59,59,59,59,59,59,59,59',
'59,,,59,59,59,,,59,,,59,,,59,59,,59,713,59,,59,,59,59,59,59,59,59,59',
',59,,59,,,,,,,,,,,,,59,59,59,59,437,59,,59,,,,437,437,437,,,437,437',
'437,1047,437,1047,1047,1047,1047,1047,,,,437,437,437,437,,,1047,,,,',
'437,437,,437,437,437,437,437,,,,,,,,,,1047,,,,,,,,,,,1047,1047,,437',
'437,437,437,437,437,437,437,437,437,437,437,437,437,,,437,437,437,,',
'437,,,437,,,437,437,,437,1047,437,,437,,437,437,437,437,437,437,437',
',437,437,437,,,,,,,,,,,,,437,437,437,437,438,437,,437,,,,438,438,438',
',,438,438,438,895,438,895,895,895,895,895,,,,438,438,438,438,,,895,',
',,,438,438,,438,438,438,438,438,,,,,,,,,,895,,,,,,,,,,,895,895,,438',
'438,438,438,438,438,438,438,438,438,438,438,438,438,,,438,438,438,,',
'438,,,438,,,438,438,,438,895,438,,438,,438,438,438,438,438,438,438,',
'438,438,438,,,,,,,,,,,,,438,438,438,438,,438,,438,11,11,11,11,11,11',
'11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,,,,11,11,11,11',
'11,11,11,11,11,11,,,,,,11,11,11,11,11,11,11,11,11,11,,11,,,,,,,,,11',
'11,,11,11,11,11,11,11,11,,,11,11,,,,11,11,11,11,,,,,,,,,,,,,,11,11,',
'11,11,11,11,11,11,11,11,11,11,11,,,11,11,,,,,,,,,,11,,,,,,,,,11,761',
'761,761,761,761,761,761,761,761,761,761,761,761,761,761,761,761,761',
'761,761,761,761,761,761,,,,761,761,761,761,761,761,761,761,761,761,',
',,,,761,761,761,761,761,761,761,761,761,,,761,,,,,,,,,761,761,,761,761',
'761,761,761,761,761,,,761,761,,,,761,761,761,761,,,,,,,,,,,,,,761,761',
',761,761,761,761,761,761,761,761,761,761,761,,,761,,,,,,,,,,,,,,,,,',
',,761,633,633,633,633,633,633,633,633,633,633,633,633,633,633,633,633',
'633,633,633,633,633,633,633,633,,,,633,633,633,633,633,633,633,633,633',
'633,,,,,,633,633,633,633,633,633,633,633,633,,,633,,,,,,,,,633,633,',
'633,633,633,633,633,633,633,,,633,633,,,,633,633,633,633,,,,,,,,,,,',
',,633,633,,633,633,633,633,633,633,633,633,633,633,633,,,633,633,,,',
',,,,,,633,,,,,,,,,633,407,407,407,407,407,407,407,407,407,407,407,407',
'407,407,407,407,407,407,407,407,407,407,407,407,,,,407,407,407,407,407',
'407,407,407,407,407,,,,,,407,407,407,407,407,407,407,407,407,,,407,',
',,,,,,,407,407,,407,407,407,407,407,407,407,,,407,407,,,,407,407,407',
'407,,,,,,,,,,,,,,407,407,,407,407,407,407,407,407,407,407,407,407,407',
',,407,407,,,,,,,,,,407,,,,,,,,,407,74,74,74,74,74,74,74,74,74,74,74',
'74,74,74,74,74,74,74,74,74,74,74,74,74,,,,74,74,74,74,74,74,74,74,74',
'74,,,,,,74,74,74,74,74,74,74,74,74,74,74,74,,74,,,,,,,74,74,,74,74,74',
'74,74,74,74,,,74,74,,,,74,74,74,74,,,,,,74,,,,,,,,74,74,,74,74,74,74',
'74,74,74,74,74,74,74,,,74,,,,,,,,,,,,,,,,,,,,74,91,91,91,91,91,91,91',
'91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,,,,91,91,91,91,91',
'91,91,91,91,91,,,,,,91,91,91,91,91,91,91,91,91,91,91,91,,91,,,,,,,91',
'91,,91,91,91,91,91,91,91,,,91,91,,,,91,91,91,91,,,,,,,,,,,,,,91,91,',
'91,91,91,91,91,91,91,91,91,91,91,,,91,,,,,,,,,,,,,,,,,,,,91,12,12,12',
'12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,,,,12',
'12,12,12,12,12,12,12,12,12,,,,,,12,12,12,12,12,12,12,12,12,,,12,,,,',
',,,,12,12,,12,12,12,12,12,12,12,,,12,12,,,,12,12,12,12,,,,,,,,,,,,,',
'12,12,,12,12,12,12,12,12,12,12,12,12,12,,,12,12,,,,428,,,,,,12,428,428',
'428,,,428,428,428,12,428,,,,,,,,,428,428,428,,,,,,,,,428,428,,428,428',
'428,428,428,,,,,,,,,,,,,,,,,,,,,,,,428,428,428,428,428,428,428,428,428',
'428,428,428,428,428,,,428,428,428,,,428,,428,428,,,428,428,,428,,428',
',428,,428,428,428,428,428,428,428,,428,428,428,,,,,,,,,,,,30,428,428',
',428,,428,30,30,30,,,30,30,30,893,30,893,893,893,893,893,,,,30,30,30',
',,,893,,,,,30,30,,30,30,30,30,30,,,,,,,,,,893,,,,,,,,,893,893,893,893',
',30,30,30,30,30,30,30,30,30,30,30,30,30,30,,,30,30,30,,,30,,30,30,,',
'30,30,,30,893,30,,30,,30,30,30,30,30,30,30,,30,30,30,,,,,,,,,,,,31,30',
'30,,30,,30,31,31,31,,,31,31,31,339,31,339,339,339,339,339,,,,,31,31',
',,,339,,,,,31,31,,31,31,31,31,31,,,,,,,,,,339,339,,,,,,,,339,339,339',
'339,,31,31,31,31,31,31,31,31,31,31,31,31,31,31,,,31,31,31,,,31,,31,31',
',,31,31,,31,339,31,,31,,31,31,31,31,31,31,31,,31,,31,,,,,,,,,,,,486',
'31,31,,31,,31,486,486,486,,,486,486,486,890,486,890,890,890,890,890',
',,,486,486,,,,,890,,,,,486,486,,486,486,486,486,486,,,,,,,,,,890,,999',
',999,999,999,999,999,890,890,890,890,,,,,,999,,,,,,,486,,,,,,,486,,',
',,486,486,,999,,,,,890,,,,214,214,999,999,214,,,,,,486,486,,214,214',
',214,214,214,214,214,214,214,,486,214,214,,,486,214,214,214,214,,,999',
',,214,,,,,,,,214,214,,214,214,214,214,214,214,214,214,214,214,214,,',
'214,,,,,213,213,,,213,,,,,,,,,213,213,214,213,213,213,213,213,213,213',
',,213,213,,,,213,213,213,213,,,,,,213,,,,,,,,213,213,,213,213,213,213',
'213,213,213,213,213,213,213,,,213,,,,,532,532,,,532,,,,,,,,,532,532',
'213,532,532,532,532,532,532,532,,,532,532,,,,532,532,532,532,,,,,,532',
',,,,,,,532,532,,532,532,532,532,532,532,532,532,532,532,532,,,532,,',
',,531,531,,,531,,,,,,,,,531,531,532,531,531,531,531,531,531,531,,,531',
'531,,,,531,531,531,531,,,,,,531,,,,,,,,531,531,,531,531,531,531,531',
'531,531,531,531,531,531,,997,531,997,997,997,997,997,,,,,,,,,,997,,',
',,531,,,,,,,,,1001,,1001,1001,1001,1001,1001,,997,522,522,,,522,,,1001',
'997,997,997,997,,522,522,,522,522,522,522,522,522,522,,,522,522,,,1001',
'522,522,522,522,,,,,,522,1001,1001,,,997,,,522,522,,522,522,522,522',
'522,522,522,522,522,522,522,,,522,,,,,521,521,,,521,,1001,,,,,,,521',
'521,522,521,521,521,521,521,521,521,,,521,521,,,,521,521,521,521,,,',
',,521,,,,,,,,521,521,,521,521,521,521,521,521,521,521,521,521,521,,1003',
'521,1003,1003,1003,1003,1003,924,,924,924,924,924,924,,,1003,,,,,521',
',924,,,,,,,,,,,,,,,1003,,,,,,,924,,1013,1013,1003,1003,1013,,,,,924',
'924,,,1013,1013,,1013,1013,1013,1013,1013,1013,1013,,,1013,1013,,,,1013',
'1013,1013,1013,,,1003,,,1013,,,,924,,,,1013,1013,,1013,1013,1013,1013',
'1013,1013,1013,1013,1013,1013,1013,,1016,1013,1016,1016,1016,1016,1016',
'759,,759,759,759,759,759,,,1016,,,,,1013,,759,,,,,,,,,,,,,,,1016,,,',
',,,759,,1014,1014,1016,1016,1014,,,759,759,759,759,,,1014,1014,,1014',
'1014,1014,1014,1014,1014,1014,,,1014,1014,,,,1014,1014,1014,1014,,,1016',
',,1014,,,,759,,,,1014,1014,,1014,1014,1014,1014,1014,1014,1014,1014',
'1014,1014,1014,,664,1014,664,664,664,664,664,,,,,,,,,,664,,,,,1014,',
',,,,,,,922,,922,922,922,922,922,,664,964,964,,,964,,,922,664,664,664',
'664,,964,964,,964,964,964,964,964,964,964,,,964,964,,,922,964,964,964',
'964,,,664,,,964,922,922,,,664,,,964,964,,964,964,964,964,964,964,964',
'964,964,964,964,,605,964,605,605,605,605,605,,,,,,922,,,,605,,,,,964',
',,,,,,,,,,,,,,,,605,605,750,750,,,750,,,605,605,605,605,,,750,750,,750',
'750,750,750,750,750,750,,,750,750,,,,750,750,750,750,,,,,,750,,,,605',
',,,750,750,,750,750,750,750,750,750,750,750,750,750,750,,,750,,,,,749',
'749,,,749,,,,,,,,,749,749,750,749,749,749,749,749,749,749,,,749,749',
',,,749,749,749,749,,,,,,749,,,,,,,,749,749,,749,749,749,749,749,749',
'749,749,749,749,749,,947,749,947,947,947,947,947,,,,,,,,,,947,,,,,749',
',,,,,,,,,,,,,,,,947,947,592,592,,,592,,,947,947,947,947,,,592,592,,592',
'592,592,592,592,592,592,,,592,592,,,,592,592,592,592,,,,,,592,,,,947',
',,,592,592,,592,592,592,592,592,592,592,592,592,592,592,,,592,,,,,593',
'593,,,593,,,,,,,,,593,593,592,593,593,593,593,593,593,593,,,593,593',
',,,593,593,593,593,,,,,,593,,,,,,,,593,593,,593,593,593,593,593,593',
'593,593,593,593,593,,920,593,920,920,920,920,920,918,,918,918,918,918',
'918,,,920,,,,,593,,918,,,,,,,,,,,,,,,920,,,,,,,918,,452,452,920,920',
'452,,,918,918,918,918,,,452,452,,452,452,452,452,452,452,452,,,452,452',
',,,452,452,452,452,,,920,,,452,,,,918,,,,452,452,,452,452,452,452,452',
'452,452,452,452,452,452,,,452,,,,,453,453,,,453,,,,,,,,,453,453,452',
'453,453,453,453,453,453,453,,,453,453,,,,453,453,453,453,,,,,,453,,',
',,,,,453,453,,453,453,453,453,453,453,453,453,453,453,453,,717,453,717',
'717,717,717,717,550,,550,550,550,550,550,,,717,,,,,453,,550,,,,,,,,',
',,,,,,717,,,,,,,550,,263,263,717,717,263,,,550,550,550,550,,,263,263',
',263,263,263,263,263,263,263,,,263,263,,,,263,263,263,263,,,717,,,,',
',,550,,,,263,263,,263,263,263,263,263,263,263,263,263,263,263,,,263',
',,,,,,,,,,,,,,,,,,,263' ]
        racc_action_check = arr = ::Array.new(26535, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_action_pointer = [
   nil,  1336,  1767,    23,   nil,   525,   nil,   nil, 11869,   765,
   nil, 23739, 24537,   -78,   nil,    40,   109,   467,   400,    81,
   475,   nil,    95, 23069,  3036,   215,   nil,   339,   nil,   156,
 24781, 24906, 11729, 16489,  5009,   nil,  4446,  6269,  6549,   nil,
   115,   173,   -77,   195,   166, 11029, 11589, 20409,   136,   852,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil, 23347,
   nil, 18449, 18869,   nil,   -10,   nil, 16349, 12009,   nil,   nil,
 12149, 12289,   196,   nil, 24271,   nil,   nil,   nil,   nil,   nil,
   -24,   nil,   nil,   nil,   nil,   nil,   nil,   184,   219,   223,
   242, 24404,   nil,   nil,   nil,   nil,   nil,   nil,   257,   nil,
   nil,   514,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil, 19289,   nil,   nil,   nil,   nil, 19149,
 18309, 18169, 17469, 16909,   282,   nil,   360,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   278,   nil,  1626,
 22369, 22089, 21949, 25150, 25082,   nil, 21529, 21389, 21249, 21109,
 20969, 20829,   nil,   nil,   924,   195,   214,   367,   -85,   308,
   366,   nil, 10609,  3177,   380, 10049,  9209,  8789,  8089,  7949,
  7809,  7669,  7249,  5849,  5709, 15649, 14949, 14249, 13969, 13829,
 12989, 12709, 12569, 12429, 18729,  6969, 13129, 13549, 15229, 15369,
 15509,   nil,   nil, 26400,   nil,   nil,   394, 15789,   nil,   409,
   nil,   nil,   nil, 15929,   nil,   nil, 16069,   nil,  1203,   nil,
   384,   407,   nil, 16629,   459,  5149,   nil,  5289,   nil,  5429,
  5569,   nil,   nil,   564,   nil,  1470,  5989,   415,  4587,   434,
   473,   450,  7389,  3882,  1203,  1106,  1065,   549,   783,   nil,
   516,   488,   -19,   nil,   nil,   nil,   534,   136,   497, 11169,
   nil,   419,   570,   780,   nil,   572,   nil, 20549,  2895,   498,
   nil,   559,   nil,   194,   266,   557, 22229,   nil,   nil, 24870,
   632,    26,    32, 17049, 17189,   161,   654,   540,     5,     7,
  1098,   625,    25,   657,   nil,   nil, 19429,   nil, 19569,   365,
   370,   404,   459,   461,   210,   481,   492,   495,   nil,   551,
   nil,   nil,   nil,   nil,   nil,   363,   nil,   382,   nil,   313,
   nil,   568,   318,   nil,   569,   258,   nil,   570,    -7,   nil,
   579,    -4,   nil,   387,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,  2190, 24138,   nil,   nil,
   nil,   nil,   593,   nil,   nil,   580, 20269,   581,   nil,   nil,
   921,   586,   nil,   nil,   598,   606,   390,   420, 24656,   nil,
   nil,   nil,   132,   389,   646,   nil,   nil, 23477, 23607,   nil,
  2895,   nil,   595,   nil,   nil,   780,   nil,   nil,   nil,   nil,
   152,   nil, 26223, 26291, 20129,   226, 19989, 19849, 19709,  3318,
  3459,   205,   126,   675,   677,   679,   701,  5149,  5289,  3765,
  3600,  3741,  3882,  4023,  4164,  4305,  4446,  4587,  4728,  4869,
  3152,   661,  3177,  5009,  1344,   105, 25031,   nil,   nil,   nil,
   nil,   nil,   nil,   299,   104,   644,   645,   nil,   nil, 18029,
   nil,   nil, 17889,   nil, 17749,   nil,   132,   nil,   nil,   nil,
   nil, 17609,  1485,   650,   659,   nil,   nil,   664, 16769,   668,
 23209, 25455, 25387,   965,   729,   nil, 22929,   697,   nil, 22789,
 22649, 25286, 25218,  2049, 22509,   829,   831,   717,   nil,   nil,
 21809,   nil,   nil, 21669,   nil,   749,   nil,   323,   779,    23,
 26360,   nil,   741,   742,   nil,   746,   751,   763,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   750,   514,   nil,   nil,
 20689,   nil,   nil,   nil,   851,   nil,   nil,   nil,   852,   nil,
   nil,   855,  3741,   896,   nil,  3600,    36,    56,   895,   904,
   nil, 11449, 26046, 26114,    41,   nil,   227,   265,   167,   nil,
  1134,   nil,    16, 10889,   nil, 25836,   nil, 10749,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   126,
   nil,   nil,   189,   nil,   nil,   nil,   784,   nil,   nil,   788,
   nil,   806,   nil, 24005,   nil,   799, 10469, 10329,   388,   834,
  9909,  9769,  9629,  9349,   836,   nil,   nil,   nil,  9069,  8929,
   837,   nil,  8649,  8509,   nil,   228,   204,     0,   646,   809,
  1062,   817,   nil,   nil, 25735,   nil,   nil,   920,    39,   335,
   nil,   nil,   nil,   nil,   819,   nil,   861,  7109,   nil,   nil,
  6409,  1329,    91,  6129,   828,   nil,   832,   160,    -5,   870,
   297,  1062,   871,   833, 14109,  2190,   896,   154,   953, 13689,
   nil,   nil,   352,   nil,   nil,   nil,  2613,  4164,   851,   337,
   nil,   nil,   495, 23311,   nil,   577,   nil, 26353,   nil, 12849,
   nil,   650,   nil,   852,   -33,   858,   nil,   nil,   nil,   nil,
    41,   nil,   989,   nil,   nil,   nil,   nil,   999,   nil, 18589,
   885,    65,    66,     8,    24,  6829,   nil,   816,   nil, 25944,
 25876, 19009,   nil,   nil,   nil,   290,   612,  4023,  1062, 25633,
   630, 23872,   141,   763,  3459,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   883, 13269,  2754, 13409,   nil,   887,   nil,  2613,
   nil,  2472,   nil,   nil,  2331,   nil,  1626,   nil,  1485, 14389,
 14529, 14669, 14809,    89, 15089,   892,   904,   nil,   905,   915,
   920,   nil,   943,   928,   924,   917, 16209,   nil,   nil,  4305,
   nil,   nil,   nil,  4728,   780,   nil,   nil,   nil,   940,   342,
   nil,   nil,  1062,   nil,  2049,   945,   987,   nil,   nil,   nil,
   963,  1077,   962,   960,   nil,   nil,   nil,   961,   969,   nil,
   970,   972,   nil,   973,   nil,   nil,   977,   610,   975,   521,
   nil,  1099,   nil,  6689,  1109,  1344,  1485,   nil,   -11,   -19,
    24,   321,   957,   nil,   996,  3318,  7529,   nil,   553,  1116,
  1135,  1023,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
  1040,  1028,   nil,  1767,  8229,  8369,  1908,   345,   nil,   nil,
 24995,   nil,   nil, 24745,   nil, 23571,   nil,   nil,  1053,  1330,
  9489,   684,  1119,  1166,  1908,  1072,  1179,   nil,  2331,   nil,
   nil,    33, 10189,   nil,   nil,   nil,   nil,   nil, 26183,   nil,
 26176,   nil, 25765,   nil, 25524,   nil,   nil,   nil,   nil,     6,
   643,  1061,   nil,    -1,   nil,  1184,  1186, 11309,  2754,   nil,
   nil,  1187,   632,   nil,   nil,   nil,   nil, 26006,   nil,  1072,
   nil,   nil,  1081,  1082,  1086,  1087,   nil,  1088,   nil,   509,
   nil,   nil,   nil,   921, 25774,   nil,   nil,  1114,   nil,   nil,
   nil,  3036,  1239,   993,  1247,  1174,   522,   nil,  1101,  1102,
  1110,  1116,  1120,  3163,  1130,  3253,  2472,   nil,   nil,   nil,
    19,  1203,   nil,   nil,   921,  4869,   nil, 25348,   nil, 25035,
   nil, 25378,   nil, 25517,   nil,   nil,   nil,  1189,  1173,  1176,
   nil,  1278, 17329, 25564, 25673,  1206, 25626,   nil,   nil,   nil,
   nil,  3394,  1161,   511,   nil,   nil,   nil,  1284,  1285,  1289,
  1174,  1186,  1187,  1197,   nil,   nil,  1203,    34,    35,    -9,
   702,  1202,  1205,   nil,   nil,   nil,   nil, 23441,   nil,   nil,
   nil,   nil,    18,   nil,  -125,   nil ]

racc_action_default = [
    -1,  -626,  -625,  -626,    -2,  -612,    -4,    -5,  -626,    -8,
    -9,  -626,  -626,  -626,   -29,  -626,  -626,  -626,  -280,  -626,
   -40,   -43,  -614,  -626,   -48,   -50,   -51,   -52,   -57,  -257,
  -257,  -257,  -293,  -332,  -333,   -69,  -625,   -73,   -81,   -83,
  -626,  -515,  -516,  -626,  -626,  -626,  -626,  -626,  -614,  -238,
  -271,  -272,  -273,  -274,  -275,  -276,  -277,  -278,  -279,  -601,
  -282,  -614,  -625,  -291,  -301,  -404,  -626,  -626,  -306,  -309,
  -612,  -626,  -317,  -324,  -626,  -334,  -335,  -446,  -447,  -448,
  -449,  -450,  -451,  -625,  -454,  -625,  -625,  -625,  -625,  -625,
  -625,  -625,  -491,  -497,  -499,  -500,  -501,  -502,  -599,  -504,
  -505,  -600,  -507,  -508,  -509,  -510,  -511,  -512,  -513,  -514,
  -519,  -520,  1056,    -3,  -613,  -621,  -622,  -623,    -7,  -626,
  -626,  -626,  -626,  -626,  -626,   -17,  -626,  -112,  -113,  -114,
  -115,  -116,  -117,  -118,  -119,  -120,  -124,  -125,  -126,  -127,
  -128,  -129,  -130,  -131,  -132,  -133,  -134,  -135,  -136,  -137,
  -138,  -139,  -140,  -141,  -142,  -143,  -144,  -145,  -146,  -147,
  -148,  -149,  -150,  -151,  -152,  -153,  -154,  -155,  -156,  -157,
  -158,  -159,  -160,  -161,  -162,  -163,  -164,  -165,  -166,  -167,
  -168,  -169,  -170,  -171,  -172,  -173,  -174,  -175,  -176,  -177,
  -178,  -179,  -180,  -181,  -182,  -183,  -184,  -185,  -186,  -187,
  -188,  -189,  -190,  -191,  -192,  -193,  -194,   -22,  -121,  -625,
  -626,  -626,  -625,  -626,  -626,  -611,  -626,  -626,  -626,  -626,
  -626,  -614,  -615,   -47,  -626,  -515,  -516,  -626,  -280,  -626,
  -626,  -230,  -626,  -625,  -626,  -626,  -626,  -626,  -626,  -626,
  -626,  -626,  -626,  -626,  -626,  -626,  -626,  -626,  -626,  -626,
  -626,  -626,  -626,  -626,  -626,  -626,  -626,  -626,  -626,  -626,
  -626,  -410,  -413,  -626,  -609,  -610,   -58,  -626,  -300,  -626,
  -427,  -430,   -64,  -625,  -424,   -65,  -614,   -66,  -239,  -252,
  -625,  -625,  -256,  -626,  -262,  -626,  -625,  -491,  -592,  -626,
  -626,   -67,   -68,  -612,   -13,   -14,  -626,   -71,  -625,  -614,
  -626,   -74,   -77,  -625,   -89,   -90,  -626,  -626,   -97,  -293,
  -296,  -614,  -417,  -332,  -333,  -336,  -425,  -626,   -79,  -626,
   -85,  -289,  -498,  -626,  -215,  -216,  -231,  -626,  -625,  -285,
  -284,  -626,  -240,  -618,  -618,  -626,  -625,  -302,  -303,  -547,
   -49,  -626,  -626,  -626,  -626,  -612,  -626,  -613,  -515,  -516,
  -626,  -626,  -280,  -626,  -357,  -358,  -626,  -320,  -626,  -112,
  -113,  -154,  -155,  -156,  -172,  -177,  -184,  -187,  -327,  -626,
  -515,  -516,  -587,  -588,  -452,  -626,  -475,  -626,  -477,  -626,
  -479,  -626,  -626,  -459,  -626,  -626,  -465,  -626,  -626,  -471,
  -626,  -626,  -473,  -626,  -490,  -492,  -493,  -494,  -495,    -6,
  -624,   -23,   -24,   -25,   -26,   -27,  -625,  -626,   -19,   -20,
   -21,  -122,  -626,   -30,   -39,  -267,  -626,  -626,  -266,   -31,
  -197,  -614,  -247,  -248,  -625,  -625,  -602,  -603,  -257,  -422,
  -604,  -605,  -603,  -602,  -257,  -421,  -423,  -604,  -605,   -37,
  -205,   -38,  -626,   -41,   -42,  -195,  -262,   -44,   -45,   -46,
  -614,  -299,  -626,  -626,  -625,  -289,  -626,  -626,  -626,  -206,
  -207,  -208,  -209,  -210,  -211,  -212,  -213,  -217,  -218,  -219,
  -220,  -221,  -222,  -223,  -224,  -225,  -226,  -227,  -228,  -229,
  -232,  -233,  -234,  -235,  -614,  -625,  -257,  -602,  -603,   -54,
   -59,  -258,  -418,  -625,  -625,  -614,  -614,  -295,  -253,  -626,
  -261,  -254,  -626,  -259,  -626,  -263,  -626,  -597,  -595,  -598,
   -12,  -613,   -16,  -614,   -70,  -287,   -86,   -75,  -626,  -614,
  -625,  -626,  -626,   -96,  -626,  -498,  -626,   -82,   -87,  -626,
  -626,  -626,  -626,  -236,  -626,  -438,  -626,  -614,  -616,  -241,
  -620,  -619,  -243,  -620,  -290,  -626,  -590,  -618,  -626,  -626,
  -547,  -407,  -586,  -586,  -530,  -532,  -532,  -532,  -546,  -548,
  -549,  -550,  -551,  -552,  -553,  -554,  -555,  -626,  -557,  -559,
  -561,  -566,  -568,  -569,  -571,  -576,  -578,  -579,  -581,  -582,
  -583,  -626,  -625,  -348,  -349,  -625,  -626,  -626,  -626,  -626,
  -433,  -625,  -626,  -626,  -289,  -314,  -107,  -108,  -626,  -110,
  -626,  -280,  -626,  -626,  -325,  -547,  -329,  -626,  -453,  -476,
  -481,  -482,  -484,  -455,  -478,  -456,  -480,  -457,  -458,  -626,
  -461,  -463,  -626,  -464,  -467,  -468,  -626,  -469,  -470,  -626,
  -496,  -626,   -18,  -626,   -28,  -270,  -626,  -626,  -426,  -626,
  -249,  -251,  -626,  -626,   -60,  -245,  -246,  -419,  -626,  -626,
   -62,  -420,  -626,  -626,  -298,  -602,  -603,  -602,  -603,  -614,
  -195,  -626,  -393,  -394,  -614,  -396,  -411,   -53,  -414,  -625,
  -428,  -431,  -244,  -294,  -625,  -260,  -264,  -626,  -593,  -594,
  -626,   -15,   -72,  -626,   -78,   -84,  -614,  -602,  -603,  -625,
   -93,   -95,  -626,   -80,  -626,  -204,  -214,  -614,  -625,  -625,
  -283,  -286,  -618,  -292,  -591,  -405,  -625,  -625,  -614,  -626,
  -528,  -529,  -626,  -626,  -539,  -626,  -542,  -626,  -544,  -626,
  -359,  -626,  -361,  -363,  -370,  -614,  -560,  -570,  -580,  -584,
  -625,  -350,  -625,  -307,  -351,  -352,  -310,  -626,  -313,  -626,
  -614,  -602,  -603,  -606,  -288,  -626,  -107,  -108,  -109,  -626,
  -626,  -625,  -318,  -521,  -522,  -626,  -321,  -625,  -625,  -547,
  -626,  -626,  -614,  -626,  -625,  -460,  -462,  -466,  -472,  -474,
   -10,  -123,  -268,  -626,  -198,  -626,  -617,  -625,   -33,  -200,
   -34,  -201,   -61,   -35,  -203,   -36,  -202,   -63,  -196,  -626,
  -626,  -626,  -626,  -426,  -626,  -586,  -586,  -375,  -625,  -625,
  -625,  -392,  -626,  -614,  -398,  -555,  -563,  -564,  -574,  -625,
  -416,  -415,   -55,  -625,  -625,  -255,  -265,  -596,   -76,   -91,
   -88,  -297,  -625,  -355,  -625,  -439,  -625,  -440,  -441,  -242,
  -626,  -626,  -614,  -586,  -567,  -585,  -531,  -532,  -532,  -558,
  -532,  -532,  -577,  -532,  -555,  -572,  -614,  -626,  -368,  -626,
  -556,  -626,  -353,  -626,  -626,  -625,  -625,  -312,  -626,  -426,
  -626,  -107,  -108,  -111,  -614,  -625,  -626,  -524,  -626,  -626,
  -626,  -614,  -526,  -330,  -589,  -483,  -486,  -487,  -488,  -489,
  -626,  -269,   -32,  -199,  -250,  -626,  -237,  -626,  -373,  -374,
  -383,  -377,  -385,  -626,  -388,  -626,  -390,  -395,  -626,  -626,
  -626,  -562,  -626,  -626,  -625,  -626,  -626,   -11,  -625,  -445,
  -356,  -626,  -626,  -443,  -408,  -409,  -406,  -527,  -626,  -535,
  -626,  -537,  -626,  -540,  -626,  -543,  -545,  -360,  -362,  -366,
  -626,  -371,  -304,  -626,  -305,  -626,  -626,  -626,  -625,  -315,
  -426,  -626,  -626,  -322,  -326,  -328,  -525,  -547,  -485,  -586,
  -565,  -376,  -625,  -625,  -625,  -625,  -575,  -625,  -397,  -614,
  -400,  -402,  -403,  -573,  -626,  -289,  -412,  -626,  -429,  -432,
  -444,  -625,   -98,   -99,  -626,  -626,  -106,  -442,  -532,  -532,
  -532,  -532,  -364,  -626,  -369,  -626,  -625,  -308,  -311,  -264,
  -625,  -625,  -319,  -523,  -625,  -625,  -372,  -626,  -380,  -626,
  -382,  -626,  -386,  -626,  -389,  -391,  -399,  -626,  -288,  -606,
   -56,  -438,  -625,  -626,  -626,  -105,  -626,  -533,  -536,  -538,
  -541,  -626,  -367,  -625,  -434,  -435,  -436,  -626,  -626,  -626,
  -625,  -625,  -625,  -625,  -401,  -437,  -614,  -602,  -603,  -606,
  -104,  -532,  -365,  -354,  -316,  -323,  -331,  -626,  -378,  -381,
  -384,  -387,  -426,  -534,  -625,  -379 ]

clist = [
'6,223,220,368,421,213,279,279,279,274,536,262,130,130,589,337,301,501',
'135,135,395,133,133,125,208,698,418,444,327,9,4,582,585,441,638,9,117',
'490,330,675,851,551,675,539,542,263,758,114,799,113,428,434,341,342',
'322,558,345,733,736,725,332,315,315,710,711,495,280,280,280,266,272',
'275,375,931,299,130,748,822,318,842,802,376,928,378,380,383,386,389',
'392,378,297,962,130,960,678,315,333,118,956,619,486,117,622,377,839',
'401,402,403,404,393,329,854,356,865,346,340,340,603,527,340,277,291',
'292,720,832,800,868,994,281,281,281,602,614,604,616,678,666,620,358',
'757,620,9,605,761,670,671,947,633,614,801,405,904,803,669,984,959,549',
'705,334,339,407,501,414,485,809,493,813,494,340,340,340,340,814,1024',
'838,739,840,826,911,374,675,675,379,382,566,1,279,385,413,419,388,391',
'429,875,439,443,763,764,451,962,394,1034,956,399,866,355,207,1022,837',
'907,422,124,452,846,834,438,950,607,338,898,928,2,545,372,353,752,668',
'863,17,335,369,328,537,678,17,336,343,855,344,856,745,279,991,,417,1042',
'659,279,492,224,279,417,708,497,,,737,704,224,224,224,,17,306,306,,558',
'447,448,449,450,422,793,,952,506,514,720,500,500,848,839,842,,376,,',
'224,,428,434,524,224,224,521,274,224,350,528,819,,280,,,,,888,889,,',
'280,531,686,,,839,,684,,,812,558,,512,117,693,315,525,,586,587,939,',
'1043,546,511,513,510,592,,17,519,517,315,917,224,224,224,224,17,,953',
'297,859,954,491,,297,689,,,,,281,496,,,,689,1025,,,281,,766,,117,766',
',978,315,,315,740,806,,,606,995,588,,,340,340,839,566,,,,,,639,,720',
'6,720,,646,130,,815,,829,651,135,782,,133,,632,,787,500,500,675,,645',
'654,279,689,,429,547,9,631,17,224,224,224,869,870,,224,224,224,224,224',
'224,,,566,,422,,438,,,,1030,17,996,871,444,,661,646,,,644,,,,672,673',
'650,558,678,940,300,,,,818,662,645,982,720,,,,682,662,662,224,279,,685',
'528,,224,429,1035,224,,,528,,,,805,429,,,815,701,827,,,422,,,,17,438',
'17,16,667,,306,17,,16,,438,,,,,681,720,,720,315,864,,306,,941,938,,315',
'797,,,17,714,716,718,566,16,566,,,,,279,,,,224,224,429,,,,,,720,,,,',
'600,697,600,,,689,,422,,,,,438,674,835,,,835,,971,,,566,,,806,,,806',
',,806,,806,,734,734,811,778,780,,986,,,783,785,,,443,,17,753,130,,702',
'16,,639,135,,,133,804,771,16,,,1052,,412,756,810,,,762,,1026,,,,528',
'558,,,639,662,646,,,651,500,820,821,300,1028,1029,,,224,,,,,,,645,804',
',873,,,,,,823,828,,,,,850,,,,,315,,,,,796,,,,,806,315,806,639,806,,806',
',279,,,823,429,823,860,16,417,,805,777,17,805,874,300,,,,306,300,224',
',,422,438,,306,882,,,16,833,,,224,,130,566,,,,806,,,,,,858,835,500,',
'797,,,797,,797,804,,,867,,,,,872,566,,340,,891,891,891,,,,,,1036,,,',
'17,916,,17,,,,,,224,,16,909,16,,927,913,,16,,,224,315,,,224,,,,919,921',
'933,923,925,805,926,639,,,,946,29,689,16,942,,,29,,,,798,,,,,,,,,224',
'224,29,,,,224,224,,,224,29,29,29,,29,797,,797,,797,,797,734,,,,,,,,943',
',,340,,,,,,29,306,841,,843,29,29,340,,29,,,306,,,,315,,,,,16,,,17,17',
'797,949,315,,796,1006,,796,,796,892,894,896,,,,891,891,891,891,,891',
',,,,,29,1013,,,438,29,29,29,29,29,224,,993,,,,224,1017,1018,1019,1020',
',17,17,,279,,823,,17,,429,,,,,,,,,224,,,,,,,,,422,,,,,438,639,,,,,823',
',,730,,,732,891,891,891,891,901,,16,17,,,,17,17,1053,,,,796,,796,,796',
'17,796,891,,,,29,29,29,29,,,,29,29,29,29,29,29,,,,,,,,,,,224,29,17,17',
',,,,,955,,957,17,224,,,796,,,998,1000,1002,1004,,1005,,16,,,16,,,,,979',
'29,980,,981,,,29,,,29,,,963,,,,17,,,,17,,,,974,,,,,29,,29,,,830,831',
'29,,,,,,,,,,,,,,17,,,,,,,,,,,29,1048,1049,1050,1051,,,,,,,,,,,29,29',
'1031,,1032,,1033,17,,,1055,,,,,,880,,,,41,1041,17,,,,41,17,,,17,17,',
',,,,,,16,16,,,,,,,,224,,,,1054,,41,304,304,,,,,903,,29,,905,906,,,,',
',,,,,910,,,,,42,,,,,,42,,348,16,16,370,,,,,16,,,,,,,,,,935,936,,,29',
',,,42,305,305,,,,,,,415,,,,,,,446,41,,,,,,,,,41,16,,,,16,16,,,349,,',
'371,,,967,16,,,970,,,,,,,,29,,,,,,,,,29,,,,,,,,,,,16,16,990,29,,42,',
',,503,16,505,,507,42,508,509,,,,,,,,,,,,,,,,,,,1011,,,,41,,,,,,,,,,16',
'1023,29,,16,29,1027,,,19,,29,,548,41,19,,,,,,,,29,,,,29,,,,,,,16,,,',
',,,,,19,,,,,,,,42,,,,,,,,,,,29,29,,,,16,29,29,,,29,,,42,,41,354,41,',
',16,304,41,,,16,,,16,16,,635,,,,,,,304,,,,,,,,,41,,,,,,,,,,,,19,,,,',
'29,29,,,19,,,,,,,370,42,370,42,,,,305,42,,,,,,,,,,,,,,,,305,,,,29,,',
',,42,29,,,,,676,29,29,548,,679,,,29,,,41,,,,,,,,29,,,371,,371,,,,,,',
',,,,,,,,,19,676,,,548,,,,442,,,,,29,,,,29,29,,,,,,19,,,,29,,,726,42',
',,,,,,,,,,,,,,,,,,,,,,,,29,,29,29,,,,,,,,,29,29,,,,,,41,,,,,,,304,,',
',19,,19,,304,,,19,,,772,,,18,676,548,,,,18,,29,,,,29,,,,,,,19,,,,,,',
',,,,,,,,18,308,308,42,816,,,817,29,,305,,,41,,,41,,305,,,,,,,,825,,',
',,,,,,352,,,,,,29,,,,,845,,,,,,,,,,29,,,,,29,,19,29,29,446,,,,,,,,42',
',,42,18,,,,29,,,,,18,,,,,,,,,,,,,881,,,,,,,,,,,,,,304,,,,,,,,,,,304',
',,,,,,,,,,,41,41,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,19,,,,,18,,305,,,,,,,',
',,,305,,41,41,,,,,,41,,18,42,42,,,,,,,,,,,,548,,,,,,,,,,,,,,,,,,,,,',
',,,,370,,19,41,,19,,41,41,,,,42,42,,,,,41,42,,,,18,,18,,989,,308,18',
',,,,,,,,,,,,,,,308,,,41,41,,,,,18,,,,41,,371,,,42,,,,42,42,,,442,,,',
',,,42,,,,601,,601,,,,,,,,,370,,,,41,,,,41,,,,972,,,,42,42,,,,,,,,,42',
',,,,,19,19,,,,,41,18,,,,,,,,,,,,,,,,,,,,,,371,,,,42,,,,42,,41,,973,',
',,,,,,,,19,19,,41,,,,19,41,,,41,41,,,,42,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,42,,,19,,,,19,19,,,,18,,,42,,,19,308,42,,,42,42,,,308,,,,,,,,,',
',,,,,,,,,,,,19,19,,,,,,,,,19,,,,,,,,,231,,,,,,,,,278,278,278,,,,18,',
',18,,,,324,325,326,,,,,,19,,,,19,,,,977,278,,,,,,,,,,,,,,,,,,,,,,,,',
'19,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,19,,,,,,,,,,,,,,,19,,,,308,19,,,19',
'19,,,,,,308,,,,,,,,,,,,18,18,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,278,420,278,18,18,,440,445,,879,18,,,,,,,,,,,,231,,,459,460,461',
'462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477,478',
'479,480,481,482,483,484,,601,,,18,,278,,18,18,,,278,,,278,,,,18,,,278',
',278,,278,,278,278,,,,,,,,,,,,,,,,,,,,,18,18,,,,,,,,,18,,,,,,533,,,',
',,,,,278,,,,,,,,,,,,,,,,,,,,601,,,,18,,,,18,,,,976,,,,,,,,,,,,,,,,,',
',,,,,,,,18,,,,,,,,,,,,,,,,,,,,,,278,,,,,,,,,,,18,,,,,,,,,,,,,,,18,,',
',,18,,,18,18,,,278,,440,660,420,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,278,,,278,,278,,,,,,,,,,,,,,,,278,,,,,,,,,695,696,,,,,,,,,,278,',
',278,,,,,,,,,,,,,,,,,,,,,,,,,,,278,,,,,,,,,,,,,,,,,,,,,278,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,278,774,,,278,278,779,781,,,,,784',
'786,,,660,788,,,,,,,,,,,,,,,,,,,,,,,,278,,,278,,,,,,,,,,,,,,,,,,,278',
',,,,,,,,,,,,,,,,,,,278,,,,,,,,,,,,,,,,,,,,278,,,,,,,,,,,,278,,,,,,,',
',,,,,,,,,,,,,,278,,883,,,,,,,,,,,,,,779,781,786,784,,886,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,278,883,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',278,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,278' ]
        racc_goto_table = arr = ::Array.new(3298, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'6,22,34,60,25,27,36,36,36,74,10,154,61,61,95,89,53,76,65,65,60,64,64',
'17,17,13,30,20,34,9,2,92,92,30,26,9,98,42,51,77,93,153,77,72,72,39,99',
'8,143,5,40,40,19,19,67,184,19,94,94,133,6,68,68,138,138,25,71,71,71',
'41,41,41,170,134,50,61,58,14,54,194,146,6,131,6,6,6,6,6,6,6,49,149,61',
'148,199,68,71,7,195,174,40,98,174,171,189,19,19,19,19,171,32,14,110',
'111,5,32,32,112,55,32,48,48,48,132,146,144,113,114,73,73,73,59,175,59',
'175,199,43,175,115,116,175,9,117,118,43,43,119,66,175,135,9,46,141,45',
'134,147,150,151,73,152,33,76,31,155,156,159,160,161,32,32,32,32,162',
'163,144,164,144,165,166,169,77,77,172,173,188,1,36,176,22,22,177,178',
'74,179,22,22,180,181,51,149,182,148,195,7,183,21,18,134,187,15,6,11',
'27,133,191,61,192,198,91,146,131,3,88,87,96,97,75,58,24,70,100,101,102',
'199,24,103,104,105,106,107,108,36,109,,71,134,25,36,74,24,36,71,153',
'51,,,95,72,24,24,24,,24,24,24,,184,32,32,32,32,6,26,,143,170,51,132',
'6,6,132,189,194,,6,,,24,,40,40,34,24,24,27,74,24,24,53,26,,71,,,,,138',
'138,,,71,27,25,,,189,,55,,,43,184,,9,98,55,68,67,,19,19,94,,93,6,8,50',
'5,27,,24,50,54,68,138,24,24,24,24,24,,144,49,26,144,48,,49,40,,,,,73',
'48,,,,40,14,,,73,,175,,98,175,,144,68,,68,25,190,,,39,99,5,,,32,32,189',
'188,,,,,,34,,132,6,132,,74,61,,76,,72,74,65,42,,64,,17,,42,6,6,77,,6',
'51,36,40,,74,73,9,2,24,24,24,24,10,10,,24,24,24,24,24,24,,,188,,6,,61',
',,,144,24,138,153,20,,34,74,,,41,,,,51,51,41,184,199,26,12,,,,55,6,6',
'132,132,,,,51,6,6,24,36,,51,53,,24,74,13,24,,,53,,,,188,74,,,76,51,30',
',,6,,,,24,61,24,23,41,,24,24,,23,,61,,,,,9,132,,132,68,25,,24,,10,92',
',68,139,,,24,186,186,186,188,23,188,,,,,36,,,,24,24,74,,,,,,132,,,,',
'24,32,24,,,40,,6,,,,,61,73,139,,,139,,92,,,188,,,190,,,190,,,190,,190',
',98,98,89,22,22,,92,,,22,22,,,22,,24,98,61,,73,23,,34,65,,,64,34,17',
'23,,,26,,12,32,154,,,32,,95,,,,53,184,,,34,6,74,,,74,6,53,51,12,10,10',
',,24,,,,,,,6,34,,60,,,,,,6,6,,,,,51,,,,,68,,,,,137,,,,,190,68,190,34',
'190,,190,,36,,,6,74,6,19,23,71,,188,73,24,188,51,12,,,,24,12,24,,,6',
'61,,24,22,,,23,137,,,24,,61,188,,,,190,,,,,,71,139,6,,139,,,139,,139',
'34,,,98,,,,,98,188,,32,,6,6,6,,,,,,25,,,,24,51,,24,,,,,,24,,23,6,23',
',51,6,,23,,,24,68,,,24,,,,186,186,19,186,186,188,186,34,,,,51,44,40',
'23,19,,,44,,,,142,,,,,,,,,24,24,44,,,,24,24,,,24,44,44,44,,44,139,,139',
',139,,139,98,,,,,,,,98,,,32,,,,,,44,24,142,,142,44,44,32,,44,,,24,,',
',68,,,,,23,,,24,24,139,137,68,,137,34,,137,,137,140,140,140,,,,6,6,6',
'6,,6,,,,,,44,27,,,61,44,44,44,44,44,24,,98,,,,24,186,186,186,186,,24',
'24,,36,,6,,24,,74,,,,,,,,,24,,,,,,,,,6,,,,,61,34,,,,,6,,,12,,,12,6,6',
'6,6,24,,23,24,,,,24,24,186,,,,137,,137,,137,24,137,6,,,,44,44,44,44',
',,,44,44,44,44,44,44,,,,,,,,,,,24,44,24,24,,,,,,142,,142,24,24,,,137',
',,140,140,140,140,,140,,23,,,23,,,,,142,44,142,,142,,,44,,,44,,,24,',
',,24,,,,24,,,,24,,,,,44,,44,,,12,12,44,,,,,,,,,,,,,,24,,,,,,,,,,,44',
'140,140,140,140,,,,,,,,,,,44,44,142,,142,,142,24,,,140,,,,,,12,,,,56',
'142,24,,,,56,24,,,24,24,,,,,,,,23,23,,,,,,,,24,,,,142,,56,56,56,,,,',
'12,,44,,12,12,,,,,,,,,,12,,,,,57,,,,,,57,,56,23,23,56,,,,,23,,,,,,,',
',,12,12,,,44,,,,57,57,57,,,,,,,69,,,,,,,69,56,,,,,,,,,56,23,,,,23,23',
',,57,,,57,,,12,23,,,12,,,,,,,,44,,,,,,,,,44,,,,,,,,,,,23,23,12,44,,57',
',,,69,23,69,,69,57,69,69,,,,,,,,,,,,,,,,,,,12,,,,56,,,,,,,,,,23,12,44',
',23,44,12,,,29,,44,,69,56,29,,,,,,,,44,,,,44,,,,,,,23,,,,,,,,,29,,,',
',,,,57,,,,,,,,,,,44,44,,,,23,44,44,,,44,,,57,,56,29,56,,,23,56,56,,',
'23,,,23,23,,69,,,,,,,56,,,,,,,,,56,,,,,,,,,,,,29,,,,,44,44,,,29,,,,',
',,56,57,56,57,,,,57,57,,,,,,,,,,,,,,,,57,,,,44,,,,,57,44,,,,,69,44,44',
'69,,69,,,44,,,56,,,,,,,,44,,,57,,57,,,,,,,,,,,,,,,,29,69,,,69,,,,29',
',,,,44,,,,44,44,,,,,,29,,,,44,,,69,57,,,,,,,,,,,,,,,,,,,,,,,,,44,,44',
'44,,,,,,,,,44,44,,,,,,56,,,,,,,56,,,,29,,29,,56,,,29,,,69,,,28,69,69',
',,,28,,44,,,,44,,,,,,,29,,,,,,,,,,,,,,,28,28,28,57,69,,,69,44,,57,,',
'56,,,56,,57,,,,,,,,69,,,,,,,,,28,,,,,,44,,,,,69,,,,,,,,,,44,,,,,44,',
'29,44,44,69,,,,,,,,57,,,57,28,,,,44,,,,,28,,,,,,,,,,,,,69,,,,,,,,,,',
',,,56,,,,,,,,,,,56,,,,,,,,,,,,56,56,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,29',
',,,,28,,57,,,,,,,,,,,57,,56,56,,,,,,56,,28,57,57,,,,,,,,,,,,69,,,,,',
',,,,,,,,,,,,,,,,,,,,56,,29,56,,29,,56,56,,,,57,57,,,,,56,57,,,,28,,28',
',69,,28,28,,,,,,,,,,,,,,,,28,,,56,56,,,,,28,,,,56,,57,,,57,,,,57,57',
',,29,,,,,,,57,,,,28,,28,,,,,,,,,56,,,,56,,,,56,,,,56,,,,57,57,,,,,,',
',,57,,,,,,29,29,,,,,56,28,,,,,,,,,,,,,,,,,,,,,,57,,,,57,,,,57,,56,,57',
',,,,,,,,,29,29,,56,,,,29,56,,,56,56,,,,57,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,57,,,29,,,,29,29,,,,28,,,57,,,29,28,57,,,57,57,,,28,,,,,,,,,,',
',,,,,,,,,,,29,29,,,,,,,,,29,,,,,,,,,35,,,,,,,,,35,35,35,,,,28,,,28,',
',,35,35,35,,,,,,29,,,,29,,,,29,35,,,,,,,,,,,,,,,,,,,,,,,,,29,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,29,,,,,,,,,,,,,,,29,,,,28,29,,,29,29,,,,,,28',
',,,,,,,,,,,28,28,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,35,35',
'35,28,28,,35,35,,28,28,,,,,,,,,,,,35,,,35,35,35,35,35,35,35,35,35,35',
'35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,,28,,,28,,35,,28,28',
',,35,,,35,,,,28,,,35,,35,,35,,35,35,,,,,,,,,,,,,,,,,,,,,28,28,,,,,,',
',,28,,,,,,35,,,,,,,,,35,,,,,,,,,,,,,,,,,,,,28,,,,28,,,,28,,,,28,,,,',
',,,,,,,,,,,,,,,,,,,,,28,,,,,,,,,,,,,,,,,,,,,,35,,,,,,,,,,,28,,,,,,,',
',,,,,,,28,,,,,28,,,28,28,,,35,,35,35,35,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,35,,,35,,35,,,,,,,,,,,,,,,,35,,,,,,,,,35,35,,,,,,,,,,35',
',,35,,,,,,,,,,,,,,,,,,,,,,,,,,,35,,,,,,,,,,,,,,,,,,,,,35,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,35,35,,,35,35,35,35,,,,,35,35,,,35',
'35,,,,,,,,,,,,,,,,,,,,,,,,35,,,35,,,,,,,,,,,,,,,,,,,35,,,,,,,,,,,,,',
',,,,,,35,,,,,,,,,,,,,,,,,,,,35,,,,,,,,,,,,35,,,,,,,,,,,,,,,,,,,,,,35',
',35,,,,,,,,,,,,,,35,35,35,35,,35,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,35,35,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,35,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,35' ]
        racc_goto_check = arr = ::Array.new(3298, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_goto_pointer = [
   nil,   185,    28,   221,   nil,    44,    -2,    89,    42,    27,
  -318,   201,   442,  -510,  -621,  -613,   nil,    12,   194,   -14,
  -190,   134,   -22,   523,   226,  -208,  -387,   -12,  1741,  1434,
  -184,   -48,    49,    35,   -20,  2285,   -26,   nil,   nil,    18,
  -163,    40,  -229,  -349,   847,  -336,  -661,   nil,    88,    54,
    38,   -23,   nil,   -21,    40,  -201,  1208,  1269,  -522,  -225,
   -71,     1,   nil,   nil,    10,     7,  -264,    10,    24,  1104,
   167,    34,  -290,    96,   -21,  -260,  -264,  -460,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   149,  -114,   -49,
   nil,   153,  -310,  -690,  -529,  -332,   153,  -377,    31,  -559,
   156,   171,   -97,   172,   168,  -496,   169,  -497,  -355,  -697,
    40,  -639,  -240,  -630,  -816,    65,  -465,  -226,  -463,  -727,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,  -765,  -444,  -508,  -776,  -515,   nil,    48,  -489,  -113,
   146,  -512,   195,  -616,  -539,   nil,  -584,  -744,  -806,  -808,
  -183,  -392,    94,  -298,   -14,   -98,  -502,   nil,   nil,  -105,
  -504,  -104,  -499,  -817,  -415,  -522,  -648,   nil,   nil,    99,
   -11,    18,    96,    96,  -283,  -245,    99,   101,   101,  -570,
  -415,  -415,   109,  -550,  -284,   nil,     0,  -505,  -155,  -609,
  -280,  -495,  -671,   nil,  -636,  -795,   nil,   nil,  -156,  -408 ]

racc_goto_default = [
   nil,   nil,   nil,   nil,     5,   nil,   294,     7,   347,   295,
   nil,   nil,   535,   nil,   852,   nil,   293,   nil,   nil,   nil,
    14,    15,    21,   230,   323,   nil,   nil,   750,   228,   229,
   nil,   nil,    20,   nil,   331,    24,    25,    26,    27,   nil,
   692,   nil,   nil,   nil,   312,   nil,   nil,    28,   423,    35,
   nil,   nil,    37,    40,    39,   nil,   225,   226,   599,   nil,
   132,   431,   131,   134,    78,    79,   nil,    93,    49,   284,
   nil,   424,   nil,   425,   436,   647,   498,   282,   267,    50,
    51,    52,    53,    54,    55,    56,    57,    58,   nil,   268,
    64,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   583,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   722,   565,   nil,   723,   951,   795,   553,   nil,   554,
   nil,   nil,   555,   nil,   557,   663,   nil,   nil,   nil,   563,
   nil,   nil,   nil,   760,   nil,   nil,   nil,   435,   269,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    77,    80,    82,
   nil,   nil,   nil,   nil,   nil,   609,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   836,   552,   nil,   556,   844,   568,
   570,   571,   807,   574,   575,   808,   578,   581,   nil,   288 ]

racc_reduce_table = [
  0, 0, :racc_error,
  0, 148, :_reduce_1,
  2, 146, :_reduce_2,
  2, 147, :_reduce_3,
  1, 149, :_reduce_none,
  1, 149, :_reduce_none,
  3, 149, :_reduce_6,
  2, 149, :_reduce_none,
  1, 152, :_reduce_8,
  0, 156, :_reduce_9,
  5, 152, :_reduce_10,
  4, 155, :_reduce_11,
  2, 157, :_reduce_12,
  1, 161, :_reduce_none,
  1, 161, :_reduce_none,
  3, 161, :_reduce_15,
  2, 161, :_reduce_16,
  0, 178, :_reduce_17,
  4, 154, :_reduce_18,
  3, 154, :_reduce_19,
  3, 154, :_reduce_20,
  3, 154, :_reduce_21,
  2, 154, :_reduce_22,
  3, 154, :_reduce_23,
  3, 154, :_reduce_24,
  3, 154, :_reduce_25,
  3, 154, :_reduce_26,
  3, 154, :_reduce_27,
  4, 154, :_reduce_28,
  1, 154, :_reduce_none,
  3, 154, :_reduce_30,
  3, 154, :_reduce_31,
  6, 154, :_reduce_32,
  5, 154, :_reduce_33,
  5, 154, :_reduce_34,
  5, 154, :_reduce_35,
  5, 154, :_reduce_36,
  3, 154, :_reduce_37,
  3, 154, :_reduce_38,
  3, 154, :_reduce_39,
  1, 154, :_reduce_none,
  3, 165, :_reduce_41,
  3, 165, :_reduce_42,
  1, 177, :_reduce_none,
  3, 177, :_reduce_44,
  3, 177, :_reduce_45,
  3, 177, :_reduce_46,
  2, 177, :_reduce_47,
  1, 177, :_reduce_none,
  1, 164, :_reduce_49,
  1, 167, :_reduce_none,
  1, 167, :_reduce_none,
  1, 182, :_reduce_none,
  4, 182, :_reduce_53,
  0, 190, :_reduce_54,
  0, 191, :_reduce_55,
  6, 187, :_reduce_56,
  1, 189, :_reduce_57,
  2, 181, :_reduce_58,
  3, 181, :_reduce_59,
  4, 181, :_reduce_60,
  5, 181, :_reduce_61,
  4, 181, :_reduce_62,
  5, 181, :_reduce_63,
  2, 181, :_reduce_64,
  2, 181, :_reduce_65,
  2, 181, :_reduce_66,
  2, 181, :_reduce_67,
  2, 181, :_reduce_68,
  1, 166, :_reduce_none,
  3, 166, :_reduce_70,
  1, 195, :_reduce_none,
  3, 195, :_reduce_72,
  1, 194, :_reduce_73,
  2, 194, :_reduce_74,
  3, 194, :_reduce_75,
  5, 194, :_reduce_76,
  2, 194, :_reduce_77,
  4, 194, :_reduce_78,
  2, 194, :_reduce_79,
  4, 194, :_reduce_80,
  1, 194, :_reduce_81,
  3, 194, :_reduce_82,
  1, 198, :_reduce_none,
  3, 198, :_reduce_84,
  2, 197, :_reduce_85,
  3, 197, :_reduce_86,
  1, 200, :_reduce_87,
  3, 200, :_reduce_88,
  1, 199, :_reduce_89,
  1, 199, :_reduce_90,
  4, 199, :_reduce_91,
  3, 199, :_reduce_92,
  3, 199, :_reduce_93,
  3, 199, :_reduce_94,
  3, 199, :_reduce_95,
  2, 199, :_reduce_96,
  1, 199, :_reduce_97,
  1, 174, :_reduce_98,
  1, 174, :_reduce_99,
  4, 174, :_reduce_100,
  3, 174, :_reduce_101,
  3, 174, :_reduce_102,
  3, 174, :_reduce_103,
  3, 174, :_reduce_104,
  2, 174, :_reduce_105,
  1, 174, :_reduce_106,
  1, 203, :_reduce_107,
  1, 203, :_reduce_none,
  2, 204, :_reduce_109,
  1, 204, :_reduce_110,
  3, 204, :_reduce_111,
  1, 205, :_reduce_none,
  1, 205, :_reduce_none,
  1, 205, :_reduce_none,
  1, 205, :_reduce_115,
  1, 205, :_reduce_116,
  1, 208, :_reduce_none,
  1, 208, :_reduce_none,
  1, 162, :_reduce_119,
  1, 162, :_reduce_none,
  1, 163, :_reduce_121,
  0, 211, :_reduce_122,
  4, 163, :_reduce_123,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  3, 180, :_reduce_195,
  5, 180, :_reduce_196,
  3, 180, :_reduce_197,
  5, 180, :_reduce_198,
  6, 180, :_reduce_199,
  5, 180, :_reduce_200,
  5, 180, :_reduce_201,
  5, 180, :_reduce_202,
  5, 180, :_reduce_203,
  4, 180, :_reduce_204,
  3, 180, :_reduce_205,
  3, 180, :_reduce_206,
  3, 180, :_reduce_207,
  3, 180, :_reduce_208,
  3, 180, :_reduce_209,
  3, 180, :_reduce_210,
  3, 180, :_reduce_211,
  3, 180, :_reduce_212,
  3, 180, :_reduce_213,
  4, 180, :_reduce_214,
  2, 180, :_reduce_215,
  2, 180, :_reduce_216,
  3, 180, :_reduce_217,
  3, 180, :_reduce_218,
  3, 180, :_reduce_219,
  3, 180, :_reduce_220,
  3, 180, :_reduce_221,
  3, 180, :_reduce_222,
  3, 180, :_reduce_223,
  3, 180, :_reduce_224,
  3, 180, :_reduce_225,
  3, 180, :_reduce_226,
  3, 180, :_reduce_227,
  3, 180, :_reduce_228,
  3, 180, :_reduce_229,
  2, 180, :_reduce_230,
  2, 180, :_reduce_231,
  3, 180, :_reduce_232,
  3, 180, :_reduce_233,
  3, 180, :_reduce_234,
  3, 180, :_reduce_235,
  3, 180, :_reduce_236,
  6, 180, :_reduce_237,
  1, 180, :_reduce_none,
  1, 214, :_reduce_239,
  1, 215, :_reduce_none,
  2, 215, :_reduce_241,
  4, 215, :_reduce_242,
  2, 215, :_reduce_243,
  3, 219, :_reduce_244,
  1, 220, :_reduce_none,
  1, 220, :_reduce_none,
  1, 170, :_reduce_247,
  1, 170, :_reduce_248,
  2, 170, :_reduce_249,
  4, 170, :_reduce_250,
  2, 170, :_reduce_251,
  1, 193, :_reduce_252,
  2, 193, :_reduce_253,
  2, 193, :_reduce_254,
  4, 193, :_reduce_255,
  1, 193, :_reduce_256,
  0, 223, :_reduce_257,
  2, 186, :_reduce_258,
  2, 222, :_reduce_259,
  2, 221, :_reduce_260,
  1, 221, :_reduce_none,
  1, 216, :_reduce_262,
  2, 216, :_reduce_263,
  3, 216, :_reduce_264,
  4, 216, :_reduce_265,
  1, 176, :_reduce_266,
  1, 176, :_reduce_267,
  3, 175, :_reduce_268,
  4, 175, :_reduce_269,
  2, 175, :_reduce_270,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_281,
  0, 246, :_reduce_282,
  4, 213, :_reduce_283,
  2, 213, :_reduce_284,
  0, 247, :_reduce_285,
  4, 213, :_reduce_286,
  3, 213, :_reduce_287,
  3, 213, :_reduce_288,
  2, 213, :_reduce_289,
  3, 213, :_reduce_290,
  0, 248, :_reduce_291,
  4, 213, :_reduce_292,
  1, 213, :_reduce_293,
  4, 213, :_reduce_294,
  3, 213, :_reduce_295,
  1, 213, :_reduce_296,
  5, 213, :_reduce_297,
  4, 213, :_reduce_298,
  3, 213, :_reduce_299,
  2, 213, :_reduce_300,
  1, 213, :_reduce_none,
  2, 213, :_reduce_302,
  2, 213, :_reduce_303,
  6, 213, :_reduce_304,
  6, 213, :_reduce_305,
  0, 249, :_reduce_306,
  0, 250, :_reduce_307,
  7, 213, :_reduce_308,
  0, 251, :_reduce_309,
  0, 252, :_reduce_310,
  7, 213, :_reduce_311,
  5, 213, :_reduce_312,
  4, 213, :_reduce_313,
  0, 253, :_reduce_314,
  0, 254, :_reduce_315,
  9, 213, :_reduce_316,
  0, 255, :_reduce_317,
  0, 256, :_reduce_318,
  7, 213, :_reduce_319,
  0, 257, :_reduce_320,
  0, 258, :_reduce_321,
  0, 259, :_reduce_322,
  9, 213, :_reduce_323,
  0, 260, :_reduce_324,
  0, 261, :_reduce_325,
  6, 213, :_reduce_326,
  0, 262, :_reduce_327,
  6, 213, :_reduce_328,
  0, 263, :_reduce_329,
  0, 264, :_reduce_330,
  9, 213, :_reduce_331,
  1, 213, :_reduce_332,
  1, 213, :_reduce_333,
  1, 213, :_reduce_334,
  1, 213, :_reduce_335,
  1, 169, :_reduce_336,
  1, 265, :_reduce_none,
  1, 266, :_reduce_none,
  1, 267, :_reduce_none,
  1, 268, :_reduce_none,
  1, 269, :_reduce_none,
  1, 270, :_reduce_none,
  1, 271, :_reduce_none,
  1, 272, :_reduce_none,
  1, 273, :_reduce_none,
  1, 274, :_reduce_none,
  1, 275, :_reduce_none,
  1, 237, :_reduce_none,
  1, 237, :_reduce_none,
  2, 237, :_reduce_none,
  1, 239, :_reduce_none,
  1, 239, :_reduce_none,
  1, 238, :_reduce_none,
  5, 238, :_reduce_354,
  1, 159, :_reduce_none,
  2, 159, :_reduce_356,
  1, 241, :_reduce_none,
  1, 241, :_reduce_358,
  1, 276, :_reduce_none,
  3, 276, :_reduce_360,
  1, 279, :_reduce_361,
  3, 279, :_reduce_362,
  1, 278, :_reduce_363,
  4, 278, :_reduce_364,
  6, 278, :_reduce_365,
  3, 278, :_reduce_366,
  5, 278, :_reduce_367,
  2, 278, :_reduce_368,
  4, 278, :_reduce_369,
  1, 278, :_reduce_370,
  3, 278, :_reduce_371,
  4, 280, :_reduce_372,
  2, 280, :_reduce_373,
  2, 280, :_reduce_374,
  1, 280, :_reduce_375,
  2, 285, :_reduce_376,
  1, 285, :_reduce_none,
  6, 286, :_reduce_378,
  8, 286, :_reduce_379,
  4, 286, :_reduce_380,
  6, 286, :_reduce_381,
  4, 286, :_reduce_382,
  2, 286, :_reduce_383,
  6, 286, :_reduce_384,
  2, 286, :_reduce_385,
  4, 286, :_reduce_386,
  6, 286, :_reduce_387,
  2, 286, :_reduce_388,
  4, 286, :_reduce_389,
  2, 286, :_reduce_390,
  4, 286, :_reduce_391,
  1, 286, :_reduce_392,
  1, 188, :_reduce_393,
  1, 188, :_reduce_none,
  3, 290, :_reduce_395,
  1, 290, :_reduce_396,
  4, 290, :_reduce_397,
  1, 291, :_reduce_none,
  4, 291, :_reduce_399,
  1, 292, :_reduce_400,
  3, 292, :_reduce_401,
  1, 293, :_reduce_402,
  1, 293, :_reduce_none,
  0, 297, :_reduce_404,
  3, 236, :_reduce_405,
  4, 295, :_reduce_406,
  1, 295, :_reduce_407,
  3, 296, :_reduce_408,
  3, 296, :_reduce_409,
  0, 300, :_reduce_410,
  0, 301, :_reduce_411,
  6, 299, :_reduce_412,
  2, 183, :_reduce_413,
  4, 183, :_reduce_414,
  5, 183, :_reduce_415,
  5, 183, :_reduce_416,
  0, 303, :_reduce_417,
  3, 235, :_reduce_418,
  4, 235, :_reduce_419,
  4, 235, :_reduce_420,
  3, 235, :_reduce_421,
  3, 235, :_reduce_422,
  3, 235, :_reduce_423,
  2, 235, :_reduce_424,
  1, 235, :_reduce_425,
  4, 235, :_reduce_426,
  0, 304, :_reduce_427,
  0, 305, :_reduce_428,
  6, 234, :_reduce_429,
  0, 306, :_reduce_430,
  0, 307, :_reduce_431,
  6, 234, :_reduce_432,
  0, 309, :_reduce_433,
  6, 240, :_reduce_434,
  1, 308, :_reduce_none,
  1, 308, :_reduce_none,
  6, 158, :_reduce_437,
  0, 158, :_reduce_438,
  1, 310, :_reduce_439,
  1, 310, :_reduce_none,
  1, 310, :_reduce_none,
  2, 311, :_reduce_442,
  1, 311, :_reduce_none,
  2, 160, :_reduce_444,
  1, 160, :_reduce_none,
  1, 224, :_reduce_446,
  1, 224, :_reduce_447,
  1, 224, :_reduce_none,
  1, 225, :_reduce_449,
  1, 313, :_reduce_450,
  1, 313, :_reduce_none,
  2, 313, :_reduce_452,
  3, 314, :_reduce_453,
  1, 314, :_reduce_454,
  3, 226, :_reduce_455,
  3, 227, :_reduce_456,
  3, 228, :_reduce_457,
  3, 228, :_reduce_458,
  1, 318, :_reduce_459,
  3, 318, :_reduce_460,
  1, 319, :_reduce_none,
  2, 319, :_reduce_462,
  3, 230, :_reduce_463,
  3, 230, :_reduce_464,
  1, 321, :_reduce_465,
  3, 321, :_reduce_466,
  3, 229, :_reduce_467,
  3, 229, :_reduce_468,
  3, 231, :_reduce_469,
  3, 231, :_reduce_470,
  1, 322, :_reduce_471,
  3, 322, :_reduce_472,
  1, 323, :_reduce_473,
  3, 323, :_reduce_474,
  1, 315, :_reduce_475,
  2, 315, :_reduce_476,
  1, 316, :_reduce_477,
  2, 316, :_reduce_478,
  1, 317, :_reduce_479,
  2, 317, :_reduce_480,
  1, 320, :_reduce_481,
  0, 325, :_reduce_482,
  3, 320, :_reduce_483,
  0, 326, :_reduce_484,
  4, 320, :_reduce_485,
  1, 324, :_reduce_486,
  1, 324, :_reduce_487,
  1, 324, :_reduce_488,
  1, 324, :_reduce_none,
  2, 209, :_reduce_490,
  1, 209, :_reduce_491,
  1, 327, :_reduce_none,
  1, 327, :_reduce_none,
  1, 327, :_reduce_none,
  1, 327, :_reduce_none,
  3, 210, :_reduce_496,
  1, 312, :_reduce_none,
  2, 312, :_reduce_498,
  1, 212, :_reduce_none,
  1, 212, :_reduce_none,
  1, 212, :_reduce_none,
  1, 212, :_reduce_none,
  1, 201, :_reduce_none,
  1, 201, :_reduce_none,
  1, 201, :_reduce_none,
  1, 201, :_reduce_none,
  1, 201, :_reduce_none,
  1, 202, :_reduce_508,
  1, 202, :_reduce_509,
  1, 202, :_reduce_510,
  1, 202, :_reduce_511,
  1, 202, :_reduce_512,
  1, 202, :_reduce_513,
  1, 202, :_reduce_514,
  1, 232, :_reduce_515,
  1, 232, :_reduce_516,
  1, 168, :_reduce_517,
  1, 168, :_reduce_518,
  1, 173, :_reduce_519,
  1, 173, :_reduce_520,
  1, 242, :_reduce_521,
  0, 328, :_reduce_522,
  4, 242, :_reduce_523,
  2, 242, :_reduce_524,
  3, 244, :_reduce_525,
  2, 244, :_reduce_526,
  4, 329, :_reduce_527,
  2, 329, :_reduce_528,
  2, 329, :_reduce_529,
  1, 329, :_reduce_none,
  2, 331, :_reduce_531,
  0, 331, :_reduce_532,
  6, 298, :_reduce_533,
  8, 298, :_reduce_534,
  4, 298, :_reduce_535,
  6, 298, :_reduce_536,
  4, 298, :_reduce_537,
  6, 298, :_reduce_538,
  2, 298, :_reduce_539,
  4, 298, :_reduce_540,
  6, 298, :_reduce_541,
  2, 298, :_reduce_542,
  4, 298, :_reduce_543,
  2, 298, :_reduce_544,
  4, 298, :_reduce_545,
  1, 298, :_reduce_546,
  0, 298, :_reduce_547,
  1, 294, :_reduce_548,
  1, 294, :_reduce_549,
  1, 294, :_reduce_550,
  1, 294, :_reduce_551,
  1, 277, :_reduce_none,
  1, 277, :_reduce_553,
  1, 333, :_reduce_none,
  1, 334, :_reduce_none,
  3, 334, :_reduce_556,
  1, 287, :_reduce_557,
  3, 287, :_reduce_558,
  1, 335, :_reduce_none,
  2, 336, :_reduce_560,
  1, 336, :_reduce_561,
  2, 337, :_reduce_562,
  1, 337, :_reduce_563,
  1, 281, :_reduce_none,
  3, 281, :_reduce_565,
  1, 330, :_reduce_none,
  3, 330, :_reduce_567,
  1, 338, :_reduce_none,
  1, 338, :_reduce_none,
  2, 282, :_reduce_570,
  1, 282, :_reduce_571,
  3, 339, :_reduce_572,
  3, 340, :_reduce_573,
  1, 288, :_reduce_574,
  3, 288, :_reduce_575,
  1, 332, :_reduce_576,
  3, 332, :_reduce_577,
  1, 341, :_reduce_none,
  1, 341, :_reduce_none,
  2, 289, :_reduce_580,
  1, 289, :_reduce_581,
  1, 342, :_reduce_none,
  1, 342, :_reduce_none,
  2, 284, :_reduce_584,
  2, 283, :_reduce_585,
  0, 283, :_reduce_586,
  1, 245, :_reduce_none,
  0, 343, :_reduce_588,
  4, 245, :_reduce_589,
  1, 233, :_reduce_590,
  2, 233, :_reduce_591,
  1, 218, :_reduce_none,
  3, 218, :_reduce_593,
  3, 344, :_reduce_594,
  2, 344, :_reduce_595,
  4, 344, :_reduce_596,
  2, 344, :_reduce_597,
  2, 344, :_reduce_598,
  1, 192, :_reduce_none,
  1, 192, :_reduce_none,
  1, 192, :_reduce_none,
  1, 185, :_reduce_none,
  1, 185, :_reduce_none,
  1, 185, :_reduce_none,
  1, 185, :_reduce_none,
  1, 302, :_reduce_none,
  1, 302, :_reduce_none,
  1, 302, :_reduce_none,
  1, 184, :_reduce_none,
  1, 184, :_reduce_none,
  1, 172, :_reduce_none,
  0, 150, :_reduce_none,
  1, 150, :_reduce_none,
  0, 179, :_reduce_none,
  1, 179, :_reduce_none,
  2, 196, :_reduce_none,
  2, 171, :_reduce_none,
  0, 217, :_reduce_none,
  1, 217, :_reduce_none,
  1, 217, :_reduce_none,
  1, 243, :_reduce_621,
  1, 243, :_reduce_none,
  1, 153, :_reduce_none,
  2, 153, :_reduce_624,
  0, 151, :_reduce_625 ]

racc_reduce_n = 626

racc_shift_n = 1056

racc_token_table = {
  false => 0,
  :error => 1,
  :kCLASS => 2,
  :kMODULE => 3,
  :kDEF => 4,
  :kUNDEF => 5,
  :kBEGIN => 6,
  :kRESCUE => 7,
  :kENSURE => 8,
  :kEND => 9,
  :kIF => 10,
  :kUNLESS => 11,
  :kTHEN => 12,
  :kELSIF => 13,
  :kELSE => 14,
  :kCASE => 15,
  :kWHEN => 16,
  :kWHILE => 17,
  :kUNTIL => 18,
  :kFOR => 19,
  :kBREAK => 20,
  :kNEXT => 21,
  :kREDO => 22,
  :kRETRY => 23,
  :kIN => 24,
  :kDO => 25,
  :kDO_COND => 26,
  :kDO_BLOCK => 27,
  :kDO_LAMBDA => 28,
  :kRETURN => 29,
  :kYIELD => 30,
  :kSUPER => 31,
  :kSELF => 32,
  :kNIL => 33,
  :kTRUE => 34,
  :kFALSE => 35,
  :kAND => 36,
  :kOR => 37,
  :kNOT => 38,
  :kIF_MOD => 39,
  :kUNLESS_MOD => 40,
  :kWHILE_MOD => 41,
  :kUNTIL_MOD => 42,
  :kRESCUE_MOD => 43,
  :kALIAS => 44,
  :kDEFINED => 45,
  :klBEGIN => 46,
  :klEND => 47,
  :k__LINE__ => 48,
  :k__FILE__ => 49,
  :k__ENCODING__ => 50,
  :tIDENTIFIER => 51,
  :tFID => 52,
  :tGVAR => 53,
  :tIVAR => 54,
  :tCONSTANT => 55,
  :tLABEL => 56,
  :tCVAR => 57,
  :tNTH_REF => 58,
  :tBACK_REF => 59,
  :tSTRING_CONTENT => 60,
  :tINTEGER => 61,
  :tFLOAT => 62,
  :tREGEXP_END => 63,
  :tUPLUS => 64,
  :tUMINUS => 65,
  :tUMINUS_NUM => 66,
  :tPOW => 67,
  :tCMP => 68,
  :tEQ => 69,
  :tEQQ => 70,
  :tNEQ => 71,
  :tGEQ => 72,
  :tLEQ => 73,
  :tANDOP => 74,
  :tOROP => 75,
  :tMATCH => 76,
  :tNMATCH => 77,
  :tDOT => 78,
  :tDOT2 => 79,
  :tDOT3 => 80,
  :tAREF => 81,
  :tASET => 82,
  :tLSHFT => 83,
  :tRSHFT => 84,
  :tCOLON2 => 85,
  :tCOLON3 => 86,
  :tOP_ASGN => 87,
  :tASSOC => 88,
  :tLPAREN => 89,
  :tLPAREN2 => 90,
  :tRPAREN => 91,
  :tLPAREN_ARG => 92,
  :tLBRACK => 93,
  :tLBRACK2 => 94,
  :tRBRACK => 95,
  :tLBRACE => 96,
  :tLBRACE_ARG => 97,
  :tSTAR => 98,
  :tSTAR2 => 99,
  :tAMPER => 100,
  :tAMPER2 => 101,
  :tTILDE => 102,
  :tPERCENT => 103,
  :tDIVIDE => 104,
  :tPLUS => 105,
  :tMINUS => 106,
  :tLT => 107,
  :tGT => 108,
  :tPIPE => 109,
  :tBANG => 110,
  :tCARET => 111,
  :tLCURLY => 112,
  :tRCURLY => 113,
  :tBACK_REF2 => 114,
  :tSYMBEG => 115,
  :tSTRING_BEG => 116,
  :tXSTRING_BEG => 117,
  :tREGEXP_BEG => 118,
  :tWORDS_BEG => 119,
  :tQWORDS_BEG => 120,
  :tSTRING_DBEG => 121,
  :tSTRING_DVAR => 122,
  :tSTRING_END => 123,
  :tSTRING => 124,
  :tSYMBOL => 125,
  :tNL => 126,
  :tEH => 127,
  :tCOLON => 128,
  :tCOMMA => 129,
  :tSPACE => 130,
  :tSEMI => 131,
  :tLAMBDA => 132,
  :tLAMBEG => 133,
  :tDSTAR => 134,
  :tCHAR => 135,
  :tSYMBOLS_BEG => 136,
  :tQSYMBOLS_BEG => 137,
  :tSTRING_DEND => 138,
  :tUBANG => 139,
  :tRATIONAL => 140,
  :tIMAGINARY => 141,
  :tLABEL_END => 142,
  :tEQL => 143,
  :tLOWEST => 144 }

racc_nt_base = 145

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "kCLASS",
  "kMODULE",
  "kDEF",
  "kUNDEF",
  "kBEGIN",
  "kRESCUE",
  "kENSURE",
  "kEND",
  "kIF",
  "kUNLESS",
  "kTHEN",
  "kELSIF",
  "kELSE",
  "kCASE",
  "kWHEN",
  "kWHILE",
  "kUNTIL",
  "kFOR",
  "kBREAK",
  "kNEXT",
  "kREDO",
  "kRETRY",
  "kIN",
  "kDO",
  "kDO_COND",
  "kDO_BLOCK",
  "kDO_LAMBDA",
  "kRETURN",
  "kYIELD",
  "kSUPER",
  "kSELF",
  "kNIL",
  "kTRUE",
  "kFALSE",
  "kAND",
  "kOR",
  "kNOT",
  "kIF_MOD",
  "kUNLESS_MOD",
  "kWHILE_MOD",
  "kUNTIL_MOD",
  "kRESCUE_MOD",
  "kALIAS",
  "kDEFINED",
  "klBEGIN",
  "klEND",
  "k__LINE__",
  "k__FILE__",
  "k__ENCODING__",
  "tIDENTIFIER",
  "tFID",
  "tGVAR",
  "tIVAR",
  "tCONSTANT",
  "tLABEL",
  "tCVAR",
  "tNTH_REF",
  "tBACK_REF",
  "tSTRING_CONTENT",
  "tINTEGER",
  "tFLOAT",
  "tREGEXP_END",
  "tUPLUS",
  "tUMINUS",
  "tUMINUS_NUM",
  "tPOW",
  "tCMP",
  "tEQ",
  "tEQQ",
  "tNEQ",
  "tGEQ",
  "tLEQ",
  "tANDOP",
  "tOROP",
  "tMATCH",
  "tNMATCH",
  "tDOT",
  "tDOT2",
  "tDOT3",
  "tAREF",
  "tASET",
  "tLSHFT",
  "tRSHFT",
  "tCOLON2",
  "tCOLON3",
  "tOP_ASGN",
  "tASSOC",
  "tLPAREN",
  "tLPAREN2",
  "tRPAREN",
  "tLPAREN_ARG",
  "tLBRACK",
  "tLBRACK2",
  "tRBRACK",
  "tLBRACE",
  "tLBRACE_ARG",
  "tSTAR",
  "tSTAR2",
  "tAMPER",
  "tAMPER2",
  "tTILDE",
  "tPERCENT",
  "tDIVIDE",
  "tPLUS",
  "tMINUS",
  "tLT",
  "tGT",
  "tPIPE",
  "tBANG",
  "tCARET",
  "tLCURLY",
  "tRCURLY",
  "tBACK_REF2",
  "tSYMBEG",
  "tSTRING_BEG",
  "tXSTRING_BEG",
  "tREGEXP_BEG",
  "tWORDS_BEG",
  "tQWORDS_BEG",
  "tSTRING_DBEG",
  "tSTRING_DVAR",
  "tSTRING_END",
  "tSTRING",
  "tSYMBOL",
  "tNL",
  "tEH",
  "tCOLON",
  "tCOMMA",
  "tSPACE",
  "tSEMI",
  "tLAMBDA",
  "tLAMBEG",
  "tDSTAR",
  "tCHAR",
  "tSYMBOLS_BEG",
  "tQSYMBOLS_BEG",
  "tSTRING_DEND",
  "tUBANG",
  "tRATIONAL",
  "tIMAGINARY",
  "tLABEL_END",
  "tEQL",
  "tLOWEST",
  "$start",
  "program",
  "top_compstmt",
  "@1",
  "top_stmts",
  "opt_terms",
  "none",
  "top_stmt",
  "terms",
  "stmt",
  "bodystmt",
  "@2",
  "compstmt",
  "opt_rescue",
  "opt_else",
  "opt_ensure",
  "stmts",
  "fitem",
  "undef_list",
  "expr_value",
  "command_asgn",
  "mlhs",
  "command_call",
  "var_lhs",
  "primary_value",
  "opt_call_args",
  "rbracket",
  "call_op",
  "backref",
  "lhs",
  "mrhs",
  "mrhs_arg",
  "expr",
  "@3",
  "opt_nl",
  "arg",
  "command",
  "block_command",
  "block_call",
  "dot_or_colon",
  "operation2",
  "command_args",
  "cmd_brace_block",
  "opt_block_param",
  "fcall",
  "@4",
  "@5",
  "operation",
  "call_args",
  "mlhs_basic",
  "mlhs_inner",
  "rparen",
  "mlhs_head",
  "mlhs_item",
  "mlhs_node",
  "mlhs_post",
  "user_variable",
  "keyword_variable",
  "cname",
  "cpath",
  "fname",
  "op",
  "reswords",
  "fsym",
  "symbol",
  "dsym",
  "@6",
  "simple_numeric",
  "primary",
  "arg_value",
  "aref_args",
  "args",
  "trailer",
  "assocs",
  "paren_args",
  "opt_paren_args",
  "opt_block_arg",
  "block_arg",
  "@7",
  "literal",
  "strings",
  "xstring",
  "regexp",
  "words",
  "qwords",
  "symbols",
  "qsymbols",
  "var_ref",
  "assoc_list",
  "brace_block",
  "method_call",
  "lambda",
  "then",
  "if_tail",
  "do",
  "case_body",
  "for_var",
  "superclass",
  "term",
  "f_arglist",
  "singleton",
  "@8",
  "@9",
  "@10",
  "@11",
  "@12",
  "@13",
  "@14",
  "@15",
  "@16",
  "@17",
  "@18",
  "@19",
  "@20",
  "@21",
  "@22",
  "@23",
  "@24",
  "@25",
  "@26",
  "k_begin",
  "k_if",
  "k_unless",
  "k_while",
  "k_until",
  "k_case",
  "k_for",
  "k_class",
  "k_module",
  "k_def",
  "k_end",
  "f_marg",
  "f_norm_arg",
  "f_margs",
  "f_marg_list",
  "block_args_tail",
  "f_block_kwarg",
  "f_kwrest",
  "opt_f_block_arg",
  "f_block_arg",
  "opt_block_args_tail",
  "block_param",
  "f_arg",
  "f_block_optarg",
  "f_rest_arg",
  "block_param_def",
  "opt_bv_decl",
  "bv_decls",
  "bvar",
  "f_bad_arg",
  "f_larglist",
  "lambda_body",
  "@27",
  "f_args",
  "do_block",
  "@28",
  "@29",
  "operation3",
  "@30",
  "@31",
  "@32",
  "@33",
  "@34",
  "cases",
  "@35",
  "exc_list",
  "exc_var",
  "numeric",
  "string",
  "string1",
  "string_contents",
  "xstring_contents",
  "regexp_contents",
  "word_list",
  "word",
  "string_content",
  "symbol_list",
  "qword_list",
  "qsym_list",
  "string_dvar",
  "@36",
  "@37",
  "sym",
  "@38",
  "args_tail",
  "f_kwarg",
  "opt_args_tail",
  "f_optarg",
  "f_arg_asgn",
  "f_arg_item",
  "f_label",
  "f_kw",
  "f_block_kw",
  "kwrest_mark",
  "f_opt",
  "f_block_opt",
  "restarg_mark",
  "blkarg_mark",
  "@39",
  "assoc" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

def _reduce_1(val, _values, result)
                      self.lexer.lex_state = :expr_beg
                    
    result
end

def _reduce_2(val, _values, result)
                      result = new_compstmt val
                    
    result
end

def _reduce_3(val, _values, result)
                      result = val[0]
                    
    result
end

# reduce 4 omitted

# reduce 5 omitted

def _reduce_6(val, _values, result)
                      result = self.block_append val[0], val[2]
                    
    result
end

# reduce 7 omitted

def _reduce_8(val, _values, result)
                      result = val[0]

                      # TODO: remove once I have more confidence this is fixed
                      # result.each_of_type :call_args do |s|
                      #   debug20 666, s, result
                      # end
                    
    result
end

def _reduce_9(val, _values, result)
                      if (self.in_def || self.in_single > 0) then
                        debug20 1
                        yyerror "BEGIN in method"
                      end
                      self.env.extend
                    
    result
end

def _reduce_10(val, _values, result)
                      result = new_iter s(:preexe), nil, val[3]
                    
    result
end

def _reduce_11(val, _values, result)
                      result = new_body val
                    
    result
end

def _reduce_12(val, _values, result)
                      result = new_compstmt val
                    
    result
end

# reduce 13 omitted

# reduce 14 omitted

def _reduce_15(val, _values, result)
                      result = self.block_append val[0], val[2]
                    
    result
end

def _reduce_16(val, _values, result)
                      result = val[1]
                      debug20 2, val, result
                    
    result
end

def _reduce_17(val, _values, result)
                      lexer.lex_state = :expr_fname
                      result = self.lexer.lineno
                    
    result
end

def _reduce_18(val, _values, result)
                      result = s(:alias, val[1], val[3]).line(val[2])
                    
    result
end

def _reduce_19(val, _values, result)
                      result = s(:valias, val[1].to_sym, val[2].to_sym)
                    
    result
end

def _reduce_20(val, _values, result)
                      result = s(:valias, val[1].to_sym, :"$#{val[2]}")
                    
    result
end

def _reduce_21(val, _values, result)
                      yyerror "can't make alias for the number variables"
                    
    result
end

def _reduce_22(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_23(val, _values, result)
                      result = new_if val[2], val[0], nil
                    
    result
end

def _reduce_24(val, _values, result)
                      result = new_if val[2], nil, val[0]
                    
    result
end

def _reduce_25(val, _values, result)
                      result = new_while val[0], val[2], true
                    
    result
end

def _reduce_26(val, _values, result)
                      result = new_until val[0], val[2], true
                    
    result
end

def _reduce_27(val, _values, result)
                      result = s(:rescue, val[0], new_resbody(s(:array), val[2]))
                    
    result
end

def _reduce_28(val, _values, result)
                      if (self.in_def || self.in_single > 0) then
                        debug20 3
                        yyerror "END in method; use at_exit"
                      end
                      result = new_iter s(:postexe), 0, val[2]
                    
    result
end

# reduce 29 omitted

def _reduce_30(val, _values, result)
                      result = new_masgn val[0], val[2], :wrap
                    
    result
end

def _reduce_31(val, _values, result)
                      result = new_op_asgn val
                    
    result
end

def _reduce_32(val, _values, result)
                      result = s(:op_asgn1, val[0], val[2], val[4].to_sym, val[5])
                    
    result
end

def _reduce_33(val, _values, result)
                      result = s(:op_asgn, val[0], val[4], val[2].to_sym, val[3].to_sym)
                      if val[1] == '&.'
                        result[0] = :safe_op_asgn
                      end
                      result.line = val[0].line
                    
    result
end

def _reduce_34(val, _values, result)
                      result = s(:op_asgn, val[0], val[4], val[2].to_sym, val[3].to_sym)
                      if val[1] == '&.'
                        result[0] = :safe_op_asgn
                      end
                      result.line = val[0].line
                    
    result
end

def _reduce_35(val, _values, result)
                      result = s(:op_asgn, val[0], val[4], val[2], val[3])
                      debug20 4, val, result
                    
    result
end

def _reduce_36(val, _values, result)
                      result = s(:op_asgn, val[0], val[4], val[2], val[3])
                      debug20 5, val, result
                    
    result
end

def _reduce_37(val, _values, result)
                      self.backref_assign_error val[0]
                    
    result
end

def _reduce_38(val, _values, result)
                      result = new_assign val[0], s(:svalue, val[2])
                    
    result
end

def _reduce_39(val, _values, result)
                      result = new_masgn val[0], val[2]
                    
    result
end

# reduce 40 omitted

def _reduce_41(val, _values, result)
                      result = new_assign val[0], val[2]
                    
    result
end

def _reduce_42(val, _values, result)
                      result = new_assign val[0], val[2]
                    
    result
end

# reduce 43 omitted

def _reduce_44(val, _values, result)
                      result = logical_op :and, val[0], val[2]
                    
    result
end

def _reduce_45(val, _values, result)
                      result = logical_op :or, val[0], val[2]
                    
    result
end

def _reduce_46(val, _values, result)
                      result = s(:call, val[2], :"!")
                    
    result
end

def _reduce_47(val, _values, result)
                      result = s(:call, val[1], :"!")
                    
    result
end

# reduce 48 omitted

def _reduce_49(val, _values, result)
                      result = value_expr(val[0])
                    
    result
end

# reduce 50 omitted

# reduce 51 omitted

# reduce 52 omitted

def _reduce_53(val, _values, result)
                      result = new_call val[0], val[2].to_sym, val[3]
                    
    result
end

def _reduce_54(val, _values, result)
                      self.env.extend(:dynamic)
                      result = self.lexer.lineno
                    
    result
end

def _reduce_55(val, _values, result)
                      result = nil # self.env.dynamic.keys
                    
    result
end

def _reduce_56(val, _values, result)
                      result = new_iter nil, val[2], val[4]
                      result.line = val[1]

                      self.env.unextend
                    
    result
end

def _reduce_57(val, _values, result)
                      result = new_call nil, val[0].to_sym
                    
    result
end

def _reduce_58(val, _values, result)
                      result = val[0].concat val[1][1..-1] # REFACTOR pattern
                    
    result
end

def _reduce_59(val, _values, result)
                      result = val[0].concat val[1][1..-1]
                      if val[2] then
                        block_dup_check result, val[2]

                        result, operation = val[2], result
                        result.insert 1, operation
                      end
                    
    result
end

def _reduce_60(val, _values, result)
                      result = new_call val[0], val[2].to_sym, val[3], val[1]
                    
    result
end

def _reduce_61(val, _values, result)
                      recv, _, msg, args, block = val
                      call = new_call recv, msg.to_sym, args, val[1]

                      block_dup_check call, block

                      block.insert 1, call
                      result = block
                    
    result
end

def _reduce_62(val, _values, result)
                      result = new_call val[0], val[2].to_sym, val[3]
                    
    result
end

def _reduce_63(val, _values, result)
                      recv, _, msg, args, block = val
                      call = new_call recv, msg.to_sym, args

                      block_dup_check call, block

                      block.insert 1, call
                      result = block
                    
    result
end

def _reduce_64(val, _values, result)
                      result = new_super val[1]
                    
    result
end

def _reduce_65(val, _values, result)
                      result = new_yield val[1]
                    
    result
end

def _reduce_66(val, _values, result)
                      line = val[0].last
                      result = s(:return, ret_args(val[1])).line(line)
                    
    result
end

def _reduce_67(val, _values, result)
                      line = val[0].last
                      result = s(:break, ret_args(val[1])).line(line)
                    
    result
end

def _reduce_68(val, _values, result)
                      line = val[0].last
                      result = s(:next, ret_args(val[1])).line(line)
                    
    result
end

# reduce 69 omitted

def _reduce_70(val, _values, result)
                      result = val[1]
                    
    result
end

# reduce 71 omitted

def _reduce_72(val, _values, result)
                      result = s(:masgn, s(:array, val[1]))
                    
    result
end

def _reduce_73(val, _values, result)
                      result = s(:masgn, val[0])
                    
    result
end

def _reduce_74(val, _values, result)
                      result = s(:masgn, val[0] << val[1].compact)
                    
    result
end

def _reduce_75(val, _values, result)
                      result = s(:masgn, val[0] << s(:splat, val[2]))
                    
    result
end

def _reduce_76(val, _values, result)
                      ary1, _, splat, _, ary2 = val

                      result = list_append ary1, s(:splat, splat)
                      result.concat ary2[1..-1]
                      result = s(:masgn, result)
                    
    result
end

def _reduce_77(val, _values, result)
                      result = s(:masgn, val[0] << s(:splat))
                    
    result
end

def _reduce_78(val, _values, result)
                      ary = list_append val[0], s(:splat)
                      ary.concat val[3][1..-1]
                      result = s(:masgn, ary)
                    
    result
end

def _reduce_79(val, _values, result)
                      result = s(:masgn, s(:array, s(:splat, val[1])))
                    
    result
end

def _reduce_80(val, _values, result)
                      ary = s(:array, s(:splat, val[1]))
                      ary.concat val[3][1..-1]
                      result = s(:masgn, ary)
                    
    result
end

def _reduce_81(val, _values, result)
                      result = s(:masgn, s(:array, s(:splat)))
                    
    result
end

def _reduce_82(val, _values, result)
                      result = s(:masgn, s(:array, s(:splat), *val[2][1..-1]))
                    
    result
end

# reduce 83 omitted

def _reduce_84(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_85(val, _values, result)
                      result = s(:array, val[0])
                    
    result
end

def _reduce_86(val, _values, result)
                      result = val[0] << val[1].compact
                    
    result
end

def _reduce_87(val, _values, result)
                      result = s(:array, val[0])
                    
    result
end

def _reduce_88(val, _values, result)
                      result = list_append val[0], val[2]
                    
    result
end

def _reduce_89(val, _values, result)
                      result = self.assignable val[0]
                    
    result
end

def _reduce_90(val, _values, result)
                      result = self.assignable val[0]
                    
    result
end

def _reduce_91(val, _values, result)
                      result = self.aryset val[0], val[2]
                    
    result
end

def _reduce_92(val, _values, result)
                      result = new_attrasgn val[0], val[2], val[1]
                    
    result
end

def _reduce_93(val, _values, result)
                      result = s(:attrasgn, val[0], :"#{val[2]}=")
                    
    result
end

def _reduce_94(val, _values, result)
                      result = new_attrasgn val[0], val[2], val[1]
                    
    result
end

def _reduce_95(val, _values, result)
                      if (self.in_def || self.in_single > 0) then
                        debug20 7
                        yyerror "dynamic constant assignment"
                      end

                      result = s(:const, s(:colon2, val[0], val[2].to_sym), nil)
                    
    result
end

def _reduce_96(val, _values, result)
                      if (self.in_def || self.in_single > 0) then
                        debug20 8
                        yyerror "dynamic constant assignment"
                      end

                      result = s(:const, nil, s(:colon3, val[1].to_sym))
                    
    result
end

def _reduce_97(val, _values, result)
                      self.backref_assign_error val[0]
                    
    result
end

def _reduce_98(val, _values, result)
                      result = self.assignable val[0]
                    
    result
end

def _reduce_99(val, _values, result)
                      result = self.assignable val[0]
                      debug20 9, val, result
                    
    result
end

def _reduce_100(val, _values, result)
                      result = self.aryset val[0], val[2]
                    
    result
end

def _reduce_101(val, _values, result)
                      result = new_attrasgn val[0], val[2], val[1]
                    
    result
end

def _reduce_102(val, _values, result)
                      result = s(:attrasgn, val[0], :"#{val[2]}=")
                    
    result
end

def _reduce_103(val, _values, result)
                      result = new_attrasgn val[0], val[2], val[1]
                    
    result
end

def _reduce_104(val, _values, result)
                      if (self.in_def || self.in_single > 0) then
                        debug20 10
                        yyerror "dynamic constant assignment"
                      end

                      result = s(:const, s(:colon2, val[0], val[2].to_sym))
                    
    result
end

def _reduce_105(val, _values, result)
                      if (self.in_def || self.in_single > 0) then
                        debug20 11
                        yyerror "dynamic constant assignment"
                      end

                      result = s(:const, s(:colon3, val[1].to_sym))
                    
    result
end

def _reduce_106(val, _values, result)
                      self.backref_assign_error val[0]
                    
    result
end

def _reduce_107(val, _values, result)
                      yyerror "class/module name must be CONSTANT"
                    
    result
end

# reduce 108 omitted

def _reduce_109(val, _values, result)
                      result = s(:colon3, val[1].to_sym)
                    
    result
end

def _reduce_110(val, _values, result)
                      result = val[0].to_sym
                    
    result
end

def _reduce_111(val, _values, result)
                      result = s(:colon2, val[0], val[2].to_sym)
                    
    result
end

# reduce 112 omitted

# reduce 113 omitted

# reduce 114 omitted

def _reduce_115(val, _values, result)
                      lexer.lex_state = :expr_end
                      result = val[0]
                    
    result
end

def _reduce_116(val, _values, result)
                      lexer.lex_state = :expr_end
                      result = val[0]
                    
    result
end

# reduce 117 omitted

# reduce 118 omitted

def _reduce_119(val, _values, result)
                      result = s(:lit, val[0].to_sym)
                    
    result
end

# reduce 120 omitted

def _reduce_121(val, _values, result)
                      result = new_undef val[0]
                    
    result
end

def _reduce_122(val, _values, result)
                      lexer.lex_state = :expr_fname
                    
    result
end

def _reduce_123(val, _values, result)
                      result = new_undef val[0], val[3]
                    
    result
end

# reduce 124 omitted

# reduce 125 omitted

# reduce 126 omitted

# reduce 127 omitted

# reduce 128 omitted

# reduce 129 omitted

# reduce 130 omitted

# reduce 131 omitted

# reduce 132 omitted

# reduce 133 omitted

# reduce 134 omitted

# reduce 135 omitted

# reduce 136 omitted

# reduce 137 omitted

# reduce 138 omitted

# reduce 139 omitted

# reduce 140 omitted

# reduce 141 omitted

# reduce 142 omitted

# reduce 143 omitted

# reduce 144 omitted

# reduce 145 omitted

# reduce 146 omitted

# reduce 147 omitted

# reduce 148 omitted

# reduce 149 omitted

# reduce 150 omitted

# reduce 151 omitted

# reduce 152 omitted

# reduce 153 omitted

# reduce 154 omitted

# reduce 155 omitted

# reduce 156 omitted

# reduce 157 omitted

# reduce 158 omitted

# reduce 159 omitted

# reduce 160 omitted

# reduce 161 omitted

# reduce 162 omitted

# reduce 163 omitted

# reduce 164 omitted

# reduce 165 omitted

# reduce 166 omitted

# reduce 167 omitted

# reduce 168 omitted

# reduce 169 omitted

# reduce 170 omitted

# reduce 171 omitted

# reduce 172 omitted

# reduce 173 omitted

# reduce 174 omitted

# reduce 175 omitted

# reduce 176 omitted

# reduce 177 omitted

# reduce 178 omitted

# reduce 179 omitted

# reduce 180 omitted

# reduce 181 omitted

# reduce 182 omitted

# reduce 183 omitted

# reduce 184 omitted

# reduce 185 omitted

# reduce 186 omitted

# reduce 187 omitted

# reduce 188 omitted

# reduce 189 omitted

# reduce 190 omitted

# reduce 191 omitted

# reduce 192 omitted

# reduce 193 omitted

# reduce 194 omitted

def _reduce_195(val, _values, result)
                      result = new_assign val[0], val[2]
                    
    result
end

def _reduce_196(val, _values, result)
                      result = new_assign val[0], s(:rescue, val[2], new_resbody(s(:array), val[4]))
                    
    result
end

def _reduce_197(val, _values, result)
                      result = new_op_asgn val
                    
    result
end

def _reduce_198(val, _values, result)
                      result = new_op_asgn val
                      result = s(:rescue, result, new_resbody(s(:array), val[4]))
                    
    result
end

def _reduce_199(val, _values, result)
                      val[2][0] = :arglist if val[2]
                      result = s(:op_asgn1, val[0], val[2], val[4].to_sym, val[5])
                    
    result
end

def _reduce_200(val, _values, result)
                      result = new_op_asgn2 val
                    
    result
end

def _reduce_201(val, _values, result)
                      result = new_op_asgn2 val
                    
    result
end

def _reduce_202(val, _values, result)
                      result = s(:op_asgn, val[0], val[4], val[2].to_sym, val[3].to_sym)
                    
    result
end

def _reduce_203(val, _values, result)
                      yyerror "constant re-assignment"
                    
    result
end

def _reduce_204(val, _values, result)
                      yyerror "constant re-assignment"
                    
    result
end

def _reduce_205(val, _values, result)
                      self.backref_assign_error val[0]
                    
    result
end

def _reduce_206(val, _values, result)
                      v1, v2 = val[0], val[2]
                      if v1.node_type == :lit and v2.node_type == :lit and Integer === v1.last and Integer === v2.last then
                        result = s(:lit, (v1.last)..(v2.last))
                      else
                        result = s(:dot2, v1, v2)
                      end
                    
    result
end

def _reduce_207(val, _values, result)
                      v1, v2 = val[0], val[2]
                      if v1.node_type == :lit and v2.node_type == :lit and Integer === v1.last and Integer === v2.last then
                        result = s(:lit, (v1.last)...(v2.last))
                      else
                        result = s(:dot3, v1, v2)
                      end
                    
    result
end

def _reduce_208(val, _values, result)
                      result = new_call val[0], :+, argl(val[2])
                    
    result
end

def _reduce_209(val, _values, result)
                      result = new_call val[0], :-, argl(val[2])
                    
    result
end

def _reduce_210(val, _values, result)
                      result = new_call val[0], :*, argl(val[2])
                    
    result
end

def _reduce_211(val, _values, result)
                      result = new_call val[0], :"/", argl(val[2])
                    
    result
end

def _reduce_212(val, _values, result)
                      result = new_call val[0], :"%", argl(val[2])
                    
    result
end

def _reduce_213(val, _values, result)
                      result = new_call val[0], :**, argl(val[2])
                    
    result
end

def _reduce_214(val, _values, result)
                      result = new_call(new_call(s(:lit, val[1]), :"**", argl(val[3])), :"-@")
                    
    result
end

def _reduce_215(val, _values, result)
                      result = new_call val[1], :"+@"
                    
    result
end

def _reduce_216(val, _values, result)
                      result = new_call val[1], :"-@"
                    
    result
end

def _reduce_217(val, _values, result)
                      result = new_call val[0], :"|", argl(val[2])
                    
    result
end

def _reduce_218(val, _values, result)
                      result = new_call val[0], :"^", argl(val[2])
                    
    result
end

def _reduce_219(val, _values, result)
                      result = new_call val[0], :"&", argl(val[2])
                    
    result
end

def _reduce_220(val, _values, result)
                      result = new_call val[0], :"<=>", argl(val[2])
                    
    result
end

def _reduce_221(val, _values, result)
                      result = new_call val[0], :">", argl(val[2])
                    
    result
end

def _reduce_222(val, _values, result)
                      result = new_call val[0], :">=", argl(val[2])
                    
    result
end

def _reduce_223(val, _values, result)
                      result = new_call val[0], :"<", argl(val[2])
                    
    result
end

def _reduce_224(val, _values, result)
                      result = new_call val[0], :"<=", argl(val[2])
                    
    result
end

def _reduce_225(val, _values, result)
                      result = new_call val[0], :"==", argl(val[2])
                    
    result
end

def _reduce_226(val, _values, result)
                      result = new_call val[0], :"===", argl(val[2])
                    
    result
end

def _reduce_227(val, _values, result)
                      result = new_call val[0], :"!=", argl(val[2])
                    
    result
end

def _reduce_228(val, _values, result)
                      result = new_match val[0], val[2]
                    
    result
end

def _reduce_229(val, _values, result)
                      result = s(:not, new_match(val[0], val[2]))
                    
    result
end

def _reduce_230(val, _values, result)
                      result = new_call val[1], :"!"
                    
    result
end

def _reduce_231(val, _values, result)
                      result = new_call value_expr(val[1]), :"~"
                    
    result
end

def _reduce_232(val, _values, result)
                      val[0] = value_expr val[0]
                      val[2] = value_expr val[2]
                      result = new_call val[0], :"\<\<", argl(val[2])
                    
    result
end

def _reduce_233(val, _values, result)
                      val[0] = value_expr val[0]
                      val[2] = value_expr val[2]
                      result = new_call val[0], :">>", argl(val[2])
                    
    result
end

def _reduce_234(val, _values, result)
                      result = logical_op :and, val[0], val[2]
                    
    result
end

def _reduce_235(val, _values, result)
                      result = logical_op :or, val[0], val[2]
                    
    result
end

def _reduce_236(val, _values, result)
                      result = s(:defined, val[2])
                    
    result
end

def _reduce_237(val, _values, result)
                      result = s(:if, val[0], val[2], val[5])
                    
    result
end

# reduce 238 omitted

def _reduce_239(val, _values, result)
                      result = value_expr(val[0])
                    
    result
end

# reduce 240 omitted

def _reduce_241(val, _values, result)
                      result = args [val[0]]
                    
    result
end

def _reduce_242(val, _values, result)
                      result = args [val[0], array_to_hash(val[2])]
                    
    result
end

def _reduce_243(val, _values, result)
                      result = args [array_to_hash(val[0])]
                    
    result
end

def _reduce_244(val, _values, result)
                      result = val[1]
                    
    result
end

# reduce 245 omitted

# reduce 246 omitted

def _reduce_247(val, _values, result)
                      result = val[0]
                    
    result
end

def _reduce_248(val, _values, result)
                      result = val[0]
                    
    result
end

def _reduce_249(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_250(val, _values, result)
                      result = args [val[0], array_to_hash(val[2])]
                    
    result
end

def _reduce_251(val, _values, result)
                      result = args [array_to_hash(val[0])]
                    
    result
end

def _reduce_252(val, _values, result)
                      warning "parenthesize argument(s) for future version"
                      result = call_args val
                    
    result
end

def _reduce_253(val, _values, result)
                      result = call_args val
                      result = self.arg_blk_pass val[0], val[1]
                    
    result
end

def _reduce_254(val, _values, result)
                      result = call_args [array_to_hash(val[0])]
                      result = self.arg_blk_pass result, val[1]
                    
    result
end

def _reduce_255(val, _values, result)
                      result = call_args [val[0], array_to_hash(val[2])]
                      result = self.arg_blk_pass result, val[3]
                    
    result
end

def _reduce_256(val, _values, result)
                      result = call_args val
                    
    result
end

def _reduce_257(val, _values, result)
                      result = lexer.cmdarg.stack.dup # TODO: smell?
                      lexer.cmdarg.push true
                    
    result
end

def _reduce_258(val, _values, result)
                      lexer.cmdarg.stack.replace val[0]
                      result = val[1]
                    
    result
end

def _reduce_259(val, _values, result)
                      result = s(:block_pass, val[1])
                    
    result
end

def _reduce_260(val, _values, result)
                      result = val[1]
                    
    result
end

# reduce 261 omitted

def _reduce_262(val, _values, result)
                      result = s(:array, val[0])
                    
    result
end

def _reduce_263(val, _values, result)
                      result = s(:array, s(:splat, val[1]))
                    
    result
end

def _reduce_264(val, _values, result)
                      result = self.list_append val[0], val[2]
                    
    result
end

def _reduce_265(val, _values, result)
                      result = self.list_append val[0], s(:splat, val[3])
                    
    result
end

def _reduce_266(val, _values, result)
                      result = new_masgn_arg val[0]
                    
    result
end

def _reduce_267(val, _values, result)
                      result = new_masgn_arg val[0], :wrap
                    
    result
end

def _reduce_268(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_269(val, _values, result)
                      result = self.arg_concat val[0], val[3]
                    
    result
end

def _reduce_270(val, _values, result)
                      result = s(:splat, val[1])
                    
    result
end

# reduce 271 omitted

# reduce 272 omitted

# reduce 273 omitted

# reduce 274 omitted

# reduce 275 omitted

# reduce 276 omitted

# reduce 277 omitted

# reduce 278 omitted

# reduce 279 omitted

# reduce 280 omitted

def _reduce_281(val, _values, result)
                      result = new_call nil, val[0].to_sym
                    
    result
end

def _reduce_282(val, _values, result)
                      result = self.lexer.lineno
                    
    result
end

def _reduce_283(val, _values, result)
                      unless val[2] then
                        result = s(:nil)
                      else
                        result = s(:begin, val[2])
                      end

                      result.line = val[1]
                    
    result
end

def _reduce_284(val, _values, result)
                      debug20 13, val, result
                    
    result
end

def _reduce_285(val, _values, result)
                      lexer.lex_state = :expr_endarg
                    
    result
end

def _reduce_286(val, _values, result)
                      warning "(...) interpreted as grouped expression"
                      result = val[1]
                    
    result
end

def _reduce_287(val, _values, result)
                      result = val[1] || s(:nil)
                      result.paren = true
                    
    result
end

def _reduce_288(val, _values, result)
                      result = s(:colon2, val[0], val[2].to_sym)
                    
    result
end

def _reduce_289(val, _values, result)
                      result = s(:colon3, val[1].to_sym)
                    
    result
end

def _reduce_290(val, _values, result)
                      result = val[1] || s(:array)
                      result[0] = :array # aref_args is :args
                    
    result
end

def _reduce_291(val, _values, result)
                      result = self.lexer.lineno
                    
    result
end

def _reduce_292(val, _values, result)
                      result = new_hash val
                    
    result
end

def _reduce_293(val, _values, result)
                      result = s(:return)
                    
    result
end

def _reduce_294(val, _values, result)
                      result = new_yield val[2]
                    
    result
end

def _reduce_295(val, _values, result)
                      result = new_yield
                    
    result
end

def _reduce_296(val, _values, result)
                      result = new_yield
                    
    result
end

def _reduce_297(val, _values, result)
                      result = s(:defined, val[3])
                    
    result
end

def _reduce_298(val, _values, result)
                      result = s(:call, val[2], :"!")
                    
    result
end

def _reduce_299(val, _values, result)
                      debug20 14, val, result
                    
    result
end

def _reduce_300(val, _values, result)
                      oper, iter = val[0], val[1]
                      call = oper # FIX
                      iter.insert 1, call
                      result = iter
                      call.line = iter.line
                    
    result
end

# reduce 301 omitted

def _reduce_302(val, _values, result)
                      call, iter = val[0], val[1]
                      block_dup_check call, iter
                      iter.insert 1, call # FIX
                      result = iter
                    
    result
end

def _reduce_303(val, _values, result)
                      result = val[1] # TODO: fix lineno
                    
    result
end

def _reduce_304(val, _values, result)
                      result = new_if val[1], val[3], val[4]
                    
    result
end

def _reduce_305(val, _values, result)
                      result = new_if val[1], val[4], val[3]
                    
    result
end

def _reduce_306(val, _values, result)
                      lexer.cond.push true
                    
    result
end

def _reduce_307(val, _values, result)
                      lexer.cond.pop
                    
    result
end

def _reduce_308(val, _values, result)
                      result = new_while val[5], val[2], true
                    
    result
end

def _reduce_309(val, _values, result)
                      lexer.cond.push true
                    
    result
end

def _reduce_310(val, _values, result)
                      lexer.cond.pop
                    
    result
end

def _reduce_311(val, _values, result)
                      result = new_until val[5], val[2], true
                    
    result
end

def _reduce_312(val, _values, result)
                      (_, line), expr, _, body, _ = val
                      result = new_case expr, body, line
                    
    result
end

def _reduce_313(val, _values, result)
                      (_, line), _, body, _ = val
                      result = new_case nil, body, line
                    
    result
end

def _reduce_314(val, _values, result)
                      lexer.cond.push true
                    
    result
end

def _reduce_315(val, _values, result)
                      lexer.cond.pop
                    
    result
end

def _reduce_316(val, _values, result)
                      result = new_for val[4], val[1], val[7]
                    
    result
end

def _reduce_317(val, _values, result)
                      result = self.lexer.lineno
                    
    result
end

def _reduce_318(val, _values, result)
                      self.comments.push self.lexer.comments
                      if (self.in_def || self.in_single > 0) then
                        yyerror "class definition in method body"
                      end
                      self.env.extend
                    
    result
end

def _reduce_319(val, _values, result)
                      result = new_class val
                      self.env.unextend
                      self.lexer.comments # we don't care about comments in the body
                    
    result
end

def _reduce_320(val, _values, result)
                      result = self.lexer.lineno
                    
    result
end

def _reduce_321(val, _values, result)
                      result = self.in_def
                      self.in_def = false
                    
    result
end

def _reduce_322(val, _values, result)
                      result = self.in_single
                      self.in_single = 0
                      self.env.extend
                    
    result
end

def _reduce_323(val, _values, result)
                      result = new_sclass val
                      self.env.unextend
                      self.lexer.comments # we don't care about comments in the body
                    
    result
end

def _reduce_324(val, _values, result)
                      result = self.lexer.lineno
                    
    result
end

def _reduce_325(val, _values, result)
                      self.comments.push self.lexer.comments
                      yyerror "module definition in method body" if
                        self.in_def or self.in_single > 0

                      self.env.extend
                    
    result
end

def _reduce_326(val, _values, result)
                      result = new_module val
                      self.env.unextend
                      self.lexer.comments # we don't care about comments in the body
                    
    result
end

def _reduce_327(val, _values, result)
                      result = [self.in_def, self.lexer.cmdarg.stack.dup]

                      self.comments.push self.lexer.comments
                      self.in_def = true
                      self.env.extend
                      # TODO: local->cmdargs = cmdarg_stack;
                      # TODO: port local_push_gen and local_pop_gen
                      lexer.cmdarg.stack.replace [false]
                    
    result
end

def _reduce_328(val, _values, result)
                      in_def, cmdarg = val[2]

                      result = new_defn val

                      lexer.cmdarg.stack.replace cmdarg
                      self.env.unextend
                      self.in_def = in_def
                      self.lexer.comments # we don't care about comments in the body
                    
    result
end

def _reduce_329(val, _values, result)
                      self.comments.push self.lexer.comments
                      lexer.lex_state = :expr_fname
                    
    result
end

def _reduce_330(val, _values, result)
                      self.in_single += 1
                      self.env.extend
                      lexer.lex_state = :expr_endfn # force for args
                      result = lexer.lineno
                    
    result
end

def _reduce_331(val, _values, result)
                      result = new_defs val
                      result[3].line val[5]

                      self.env.unextend
                      self.in_single -= 1
                      self.lexer.comments # we don't care about comments in the body
                    
    result
end

def _reduce_332(val, _values, result)
                      result = s(:break)
                    
    result
end

def _reduce_333(val, _values, result)
                      result = s(:next)
                    
    result
end

def _reduce_334(val, _values, result)
                      result = s(:redo)
                    
    result
end

def _reduce_335(val, _values, result)
                      result = s(:retry)
                    
    result
end

def _reduce_336(val, _values, result)
                      result = value_expr(val[0])
                    
    result
end

# reduce 337 omitted

# reduce 338 omitted

# reduce 339 omitted

# reduce 340 omitted

# reduce 341 omitted

# reduce 342 omitted

# reduce 343 omitted

# reduce 344 omitted

# reduce 345 omitted

# reduce 346 omitted

# reduce 347 omitted

# reduce 348 omitted

# reduce 349 omitted

# reduce 350 omitted

# reduce 351 omitted

# reduce 352 omitted

# reduce 353 omitted

def _reduce_354(val, _values, result)
                      result = s(:if, val[1], val[3], val[4])
                    
    result
end

# reduce 355 omitted

def _reduce_356(val, _values, result)
                      result = val[1]
                    
    result
end

# reduce 357 omitted

def _reduce_358(val, _values, result)
                      val[0].delete_at 1 if val[0][1].nil? # HACK
                    
    result
end

# reduce 359 omitted

def _reduce_360(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_361(val, _values, result)
                      result = s(:array, val[0])
                    
    result
end

def _reduce_362(val, _values, result)
                      result = list_append val[0], val[2]
                    
    result
end

def _reduce_363(val, _values, result)
                      args, = val

                      result = block_var args
                    
    result
end

def _reduce_364(val, _values, result)
                      args, _, _, splat = val

                      result = block_var args, "*#{splat}".to_sym
                    
    result
end

def _reduce_365(val, _values, result)
                      args, _, _, splat, _, args2 = val

                      result = block_var args, "*#{splat}".to_sym, args2
                    
    result
end

def _reduce_366(val, _values, result)
                      args, _, _ = val

                      result = block_var args, :*
                    
    result
end

def _reduce_367(val, _values, result)
                      args, _, _, _, args2 = val

                      result = block_var args, :*, args2
                    
    result
end

def _reduce_368(val, _values, result)
                      _, splat = val

                      result = block_var :"*#{splat}"
                    
    result
end

def _reduce_369(val, _values, result)
                      _, splat, _, args = val

                      result = block_var :"*#{splat}", args
                    
    result
end

def _reduce_370(val, _values, result)
                      result = block_var :*
                    
    result
end

def _reduce_371(val, _values, result)
                      _, _, args = val

                      result = block_var :*, args
                    
    result
end

def _reduce_372(val, _values, result)
                      result = call_args val
                    
    result
end

def _reduce_373(val, _values, result)
                      result = call_args val
                    
    result
end

def _reduce_374(val, _values, result)
                      result = call_args val
                    
    result
end

def _reduce_375(val, _values, result)
                      result = call_args val
                    
    result
end

def _reduce_376(val, _values, result)
                      result = args val
                    
    result
end

# reduce 377 omitted

def _reduce_378(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_379(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_380(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_381(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_382(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_383(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_384(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_385(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_386(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_387(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_388(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_389(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_390(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_391(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_392(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_393(val, _values, result)
 result = 0 
    result
end

# reduce 394 omitted

def _reduce_395(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_396(val, _values, result)
                      self.lexer.command_start = true
                      result = s(:args)
                    
    result
end

def _reduce_397(val, _values, result)
                      result = args val
                    
    result
end

# reduce 398 omitted

def _reduce_399(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_400(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_401(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_402(val, _values, result)
                      result = s(:shadow, val[0].to_sym)
                    
    result
end

# reduce 403 omitted

def _reduce_404(val, _values, result)
                      self.env.extend :dynamic
                      result = self.lexer.lineno

                      result = lexer.lpar_beg
                      lexer.paren_nest += 1
                      lexer.lpar_beg = lexer.paren_nest
                    
    result
end

def _reduce_405(val, _values, result)
                      lpar, args, body = val
                      lexer.lpar_beg = lpar

                      call = new_call nil, :lambda
                      result = new_iter call, args, body
                      self.env.unextend
                    
    result
end

def _reduce_406(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_407(val, _values, result)
                      result = val[0]
                      result = 0 if result == s(:args)
                    
    result
end

def _reduce_408(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_409(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_410(val, _values, result)
                      self.env.extend :dynamic
                      result = self.lexer.lineno
                    
    result
end

def _reduce_411(val, _values, result)
                      result = nil # self.env.dynamic.keys
                    
    result
end

def _reduce_412(val, _values, result)
                      args   = val[2]
                      body   = val[4]
                      result = new_iter nil, args, body
                      result.line = val[1]

                      self.env.unextend
                    
    result
end

def _reduce_413(val, _values, result)
                      # TODO:
                      ## if (nd_type($1) == NODE_YIELD) {
                      ##     compile_error(PARSER_ARG "block given to yield");

                      syntax_error "Both block arg and actual block given." if
                        val[0].block_pass?

                      val = invert_block_call val if inverted? val

                      result = val[1]
                      result.insert 1, val[0]
                    
    result
end

def _reduce_414(val, _values, result)
                      result = new_call val[0], val[2].to_sym, val[3]
                    
    result
end

def _reduce_415(val, _values, result)
                      iter1, _, name, args, iter2 = val

                      call = new_call iter1, name.to_sym, args
                      iter2.insert 1, call

                      result = iter2
                    
    result
end

def _reduce_416(val, _values, result)
                      iter1, _, name, args, iter2 = val

                      call = new_call iter1, name.to_sym, args
                      iter2.insert 1, call

                      result = iter2
                    
    result
end

def _reduce_417(val, _values, result)
                      result = self.lexer.lineno
                    
    result
end

def _reduce_418(val, _values, result)
                      args = self.call_args val[2..-1]
                      result = val[0].concat args[1..-1]
                    
    result
end

def _reduce_419(val, _values, result)
                      result = new_call val[0], val[2].to_sym, val[3], val[1]
                    
    result
end

def _reduce_420(val, _values, result)
                      result = new_call val[0], val[2].to_sym, val[3]
                    
    result
end

def _reduce_421(val, _values, result)
                      result = new_call val[0], val[2].to_sym
                    
    result
end

def _reduce_422(val, _values, result)
                      result = new_call val[0], :call, val[2], val[1]
                    
    result
end

def _reduce_423(val, _values, result)
                      result = new_call val[0], :call, val[2]
                    
    result
end

def _reduce_424(val, _values, result)
                      result = new_super val[1]
                    
    result
end

def _reduce_425(val, _values, result)
                      result = s(:zsuper)
                    
    result
end

def _reduce_426(val, _values, result)
                      result = new_aref val
                    
    result
end

def _reduce_427(val, _values, result)
                      self.env.extend :dynamic
                      result = self.lexer.lineno
                    
    result
end

def _reduce_428(val, _values, result)
                      result = nil # self.env.dynamic.keys
                    
    result
end

def _reduce_429(val, _values, result)
                      _, line, args, _, body, _ = val

                      result = new_iter nil, args, body
                      result.line = line

                      self.env.unextend
                    
    result
end

def _reduce_430(val, _values, result)
                      self.env.extend :dynamic
                      result = self.lexer.lineno
                    
    result
end

def _reduce_431(val, _values, result)
                      result = nil # self.env.dynamic.keys
                    
    result
end

def _reduce_432(val, _values, result)
                      _, line, args, _, body, _ = val

                      result = new_iter nil, args, body
                      result.line = line

                      self.env.unextend
                    
    result
end

def _reduce_433(val, _values, result)
                      result = self.lexer.lineno
                    
    result
end

def _reduce_434(val, _values, result)
                      result = new_when(val[2], val[4])
                      result.line = val[1]
                      result << val[5] if val[5]
                    
    result
end

# reduce 435 omitted

# reduce 436 omitted

def _reduce_437(val, _values, result)
                      _, klasses, var, _, body, rest = val

                      klasses ||= s(:array)
                      klasses << new_assign(var, s(:gvar, :"$!")) if var

                      result = new_resbody(klasses, body)
                      result << rest if rest # UGH, rewritten above
                    
    result
end

def _reduce_438(val, _values, result)
                      result = nil
                    
    result
end

def _reduce_439(val, _values, result)
                      result = s(:array, val[0])
                    
    result
end

# reduce 440 omitted

# reduce 441 omitted

def _reduce_442(val, _values, result)
                      result = val[1]
                    
    result
end

# reduce 443 omitted

def _reduce_444(val, _values, result)
                      _, body = val

                      result = body || s(:nil)
                    
    result
end

# reduce 445 omitted

def _reduce_446(val, _values, result)
                      result = s(:lit, val[0])
                    
    result
end

def _reduce_447(val, _values, result)
                      result = s(:lit, val[0])
                    
    result
end

# reduce 448 omitted

def _reduce_449(val, _values, result)
                      val[0] = s(:dstr, val[0].value) if val[0][0] == :evstr
                      result = val[0]
                    
    result
end

def _reduce_450(val, _values, result)
                      debug20 23, val, result
                    
    result
end

# reduce 451 omitted

def _reduce_452(val, _values, result)
                      result = self.literal_concat val[0], val[1]
                    
    result
end

def _reduce_453(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_454(val, _values, result)
                      result = new_string val
                    
    result
end

def _reduce_455(val, _values, result)
                      result = new_xstring val[1]
                    
    result
end

def _reduce_456(val, _values, result)
                      result = new_regexp val
                    
    result
end

def _reduce_457(val, _values, result)
                      result = s(:array)
                    
    result
end

def _reduce_458(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_459(val, _values, result)
                      result = new_word_list
                    
    result
end

def _reduce_460(val, _values, result)
                      result = val[0].dup << new_word_list_entry(val)
                    
    result
end

# reduce 461 omitted

def _reduce_462(val, _values, result)
                      result = self.literal_concat val[0], val[1]
                    
    result
end

def _reduce_463(val, _values, result)
                      result = s(:array)
                    
    result
end

def _reduce_464(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_465(val, _values, result)
                      result = new_symbol_list
                    
    result
end

def _reduce_466(val, _values, result)
                      result = val[0].dup << new_symbol_list_entry(val)
                    
    result
end

def _reduce_467(val, _values, result)
                      result = s(:array)
                    
    result
end

def _reduce_468(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_469(val, _values, result)
                      result = s(:array)
                    
    result
end

def _reduce_470(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_471(val, _values, result)
                      result = new_qword_list
                    
    result
end

def _reduce_472(val, _values, result)
                      result = val[0].dup << new_qword_list_entry(val)
                    
    result
end

def _reduce_473(val, _values, result)
                      result = new_qsym_list
                    
    result
end

def _reduce_474(val, _values, result)
                      result = val[0].dup << new_qsym_list_entry(val)
                    
    result
end

def _reduce_475(val, _values, result)
                      result = s(:str, "")
                    
    result
end

def _reduce_476(val, _values, result)
                      result = literal_concat(val[0], val[1])
                    
    result
end

def _reduce_477(val, _values, result)
                      result = nil
                    
    result
end

def _reduce_478(val, _values, result)
                      result = literal_concat(val[0], val[1])
                    
    result
end

def _reduce_479(val, _values, result)
                      result = nil
                    
    result
end

def _reduce_480(val, _values, result)
                      result = literal_concat(val[0], val[1])
                    
    result
end

def _reduce_481(val, _values, result)
                      result = new_string val
                    
    result
end

def _reduce_482(val, _values, result)
                      result = lexer.lex_strterm

                      lexer.lex_strterm = nil
                      lexer.lex_state = :expr_beg # TODO: expr_value ?
                    
    result
end

def _reduce_483(val, _values, result)
                      lexer.lex_strterm = val[1]
                      result = s(:evstr, val[2])
                    
    result
end

def _reduce_484(val, _values, result)
                      result = [lexer.lex_strterm,
                                lexer.brace_nest,
                                lexer.string_nest, # TODO: remove
                                lexer.cond.store,
                                lexer.cmdarg.store,
                                lexer.lex_state,
                               ]

                      lexer.lex_strterm = nil
                      lexer.brace_nest  = 0
                      lexer.string_nest = 0

                      lexer.lex_state   = :expr_value
                    
    result
end

def _reduce_485(val, _values, result)
                      # TODO: tRCURLY -> tSTRING_END
                      _, memo, stmt, _ = val

                      lex_strterm, brace_nest, string_nest, oldcond, oldcmdarg, oldlex_state = memo

                      lexer.lex_strterm = lex_strterm
                      lexer.brace_nest  = brace_nest
                      lexer.string_nest = string_nest

                      lexer.cond.restore oldcond
                      lexer.cmdarg.restore oldcmdarg

                      lexer.lex_state = oldlex_state

                      case stmt
                      when Sexp then
                        case stmt[0]
                        when :str, :dstr, :evstr then
                          result = stmt
                        else
                          result = s(:evstr, stmt)
                        end
                      when nil then
                        result = s(:evstr)
                      else
                        debug20 25
                        raise "unknown string body: #{stmt.inspect}"
                      end
                    
    result
end

def _reduce_486(val, _values, result)
 result = s(:gvar, val[0].to_sym) 
    result
end

def _reduce_487(val, _values, result)
 result = s(:ivar, val[0].to_sym) 
    result
end

def _reduce_488(val, _values, result)
 result = s(:cvar, val[0].to_sym) 
    result
end

# reduce 489 omitted

def _reduce_490(val, _values, result)
                      lexer.lex_state = :expr_end
                      result = val[1].to_sym
                    
    result
end

def _reduce_491(val, _values, result)
                      result = val[0].to_sym
                    
    result
end

# reduce 492 omitted

# reduce 493 omitted

# reduce 494 omitted

# reduce 495 omitted

def _reduce_496(val, _values, result)
                      lexer.lex_state = :expr_end
                      result = val[1]

                      result ||= s(:str, "")

                      case result[0]
                      when :dstr then
                        result[0] = :dsym
                      when :str then
                        result = s(:lit, result.last.to_sym)
                      when :evstr then
                        result = s(:dsym, "", result)
                      else
                        debug20 26, val, result
                      end
                    
    result
end

# reduce 497 omitted

def _reduce_498(val, _values, result)
                      result = -val[1] # TODO: pt_testcase
                    
    result
end

# reduce 499 omitted

# reduce 500 omitted

# reduce 501 omitted

# reduce 502 omitted

# reduce 503 omitted

# reduce 504 omitted

# reduce 505 omitted

# reduce 506 omitted

# reduce 507 omitted

def _reduce_508(val, _values, result)
 result = s(:nil)   
    result
end

def _reduce_509(val, _values, result)
 result = s(:self)  
    result
end

def _reduce_510(val, _values, result)
 result = s(:true)  
    result
end

def _reduce_511(val, _values, result)
 result = s(:false) 
    result
end

def _reduce_512(val, _values, result)
 result = s(:str, self.file) 
    result
end

def _reduce_513(val, _values, result)
 result = s(:lit, lexer.lineno) 
    result
end

def _reduce_514(val, _values, result)
                      result =
                        if defined? Encoding then
                          s(:colon2, s(:const, :Encoding), :UTF_8)
                        else
                          s(:str, "Unsupported!")
                        end
                    
    result
end

def _reduce_515(val, _values, result)
                      var = val[0]
                      result = Sexp === var ? var : self.gettable(var)
                    
    result
end

def _reduce_516(val, _values, result)
                      var = val[0]
                      result = Sexp === var ? var : self.gettable(var)
                    
    result
end

def _reduce_517(val, _values, result)
                      result = self.assignable val[0]
                    
    result
end

def _reduce_518(val, _values, result)
                      result = self.assignable val[0]
                      debug20 29, val, result
                    
    result
end

def _reduce_519(val, _values, result)
 result = s(:nth_ref,  val[0]) 
    result
end

def _reduce_520(val, _values, result)
 result = s(:back_ref, val[0]) 
    result
end

def _reduce_521(val, _values, result)
                      result = nil
                    
    result
end

def _reduce_522(val, _values, result)
                      lexer.lex_state = :expr_beg
                    
    result
end

def _reduce_523(val, _values, result)
                      result = val[2]
                    
    result
end

def _reduce_524(val, _values, result)
                      yyerrok
                      result = nil
                      debug20 30, val, result
                    
    result
end

def _reduce_525(val, _values, result)
                      result = val[1]
                      self.lexer.lex_state = :expr_beg
                      self.lexer.command_start = true
                      # TODO:
                      # $<num>$ = parser->parser_in_kwarg;
                      # parser->parser_in_kwarg = 1;
                    
    result
end

def _reduce_526(val, _values, result)
                      # TODO: parser->parser_in_kwarg = $<num>1;
                      result = val[0]
                      self.lexer.lex_state = :expr_beg
                      self.lexer.command_start = true
                    
    result
end

def _reduce_527(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_528(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_529(val, _values, result)
                      result = args val
                    
    result
end

# reduce 530 omitted

def _reduce_531(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_532(val, _values, result)
                      result = nil
                    
    result
end

def _reduce_533(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_534(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_535(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_536(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_537(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_538(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_539(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_540(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_541(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_542(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_543(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_544(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_545(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_546(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_547(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_548(val, _values, result)
                      yyerror "formal argument cannot be a constant"
                    
    result
end

def _reduce_549(val, _values, result)
                      yyerror "formal argument cannot be an instance variable"
                    
    result
end

def _reduce_550(val, _values, result)
                      yyerror "formal argument cannot be a global variable"
                    
    result
end

def _reduce_551(val, _values, result)
                      yyerror "formal argument cannot be a class variable"
                    
    result
end

# reduce 552 omitted

def _reduce_553(val, _values, result)
                      identifier = val[0].to_sym
                      self.env[identifier] = :lvar

                      result = identifier
                    
    result
end

# reduce 554 omitted

# reduce 555 omitted

def _reduce_556(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_557(val, _values, result)
                      case val[0]
                      when Symbol then
                        result = s(:args)
                        result << val[0]
                      when Sexp then
                        result = val[0]
                      else
                        debug20 32
                        raise "Unknown f_arg type: #{val.inspect}"
                      end
                    
    result
end

def _reduce_558(val, _values, result)
                      list, _, item = val

                      if list.sexp_type == :args then
                        result = list
                      else
                        result = s(:args, list)
                      end

                      result << item
                    
    result
end

# reduce 559 omitted

def _reduce_560(val, _values, result)
                      # TODO: call_args
                      label, _ = val[0] # TODO: fix lineno?
                      identifier = label.to_sym
                      self.env[identifier] = :lvar

                      result = s(:array, s(:kwarg, identifier, val[1]))
                    
    result
end

def _reduce_561(val, _values, result)
                      label, _ = val[0] # TODO: fix lineno?
                      identifier = label.to_sym
                      self.env[identifier] = :lvar

                      result = s(:array, s(:kwarg, identifier))
                    
    result
end

def _reduce_562(val, _values, result)
                      # TODO: call_args
                      label, _ = val[0] # TODO: fix lineno?
                      identifier = label.to_sym
                      self.env[identifier] = :lvar

                      result = s(:array, s(:kwarg, identifier, val[1]))
                    
    result
end

def _reduce_563(val, _values, result)
                      label, _ = val[0] # TODO: fix lineno?
                      identifier = label.to_sym
                      self.env[identifier] = :lvar

                      result = s(:array, s(:kwarg, identifier))
                    
    result
end

# reduce 564 omitted

def _reduce_565(val, _values, result)
                      list, _, item = val
                      result = list << item.last
                    
    result
end

# reduce 566 omitted

def _reduce_567(val, _values, result)
                      result = args val
                    
    result
end

# reduce 568 omitted

# reduce 569 omitted

def _reduce_570(val, _values, result)
                      result = :"**#{val[1]}"
                    
    result
end

def _reduce_571(val, _values, result)
                      result = :"**"
                    
    result
end

def _reduce_572(val, _values, result)
                      result = self.assignable val[0], val[2]
                      # TODO: detect duplicate names
                    
    result
end

def _reduce_573(val, _values, result)
                      result = self.assignable val[0], val[2]
                    
    result
end

def _reduce_574(val, _values, result)
                      result = s(:block, val[0])
                    
    result
end

def _reduce_575(val, _values, result)
                      result = val[0]
                      result << val[2]
                    
    result
end

def _reduce_576(val, _values, result)
                      result = s(:block, val[0])
                    
    result
end

def _reduce_577(val, _values, result)
                      result = self.block_append val[0], val[2]
                    
    result
end

# reduce 578 omitted

# reduce 579 omitted

def _reduce_580(val, _values, result)
                      # TODO: differs from parse.y - needs tests
                      name = val[1].to_sym
                      self.assignable name
                      result = :"*#{name}"
                    
    result
end

def _reduce_581(val, _values, result)
                      name = :"*"
                      self.env[name] = :lvar
                      result = name
                    
    result
end

# reduce 582 omitted

# reduce 583 omitted

def _reduce_584(val, _values, result)
                      identifier = val[1].to_sym

                      self.env[identifier] = :lvar
                      result = "&#{identifier}".to_sym
                    
    result
end

def _reduce_585(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_586(val, _values, result)
                      result = nil
                    
    result
end

# reduce 587 omitted

def _reduce_588(val, _values, result)
                      lexer.lex_state = :expr_beg
                    
    result
end

def _reduce_589(val, _values, result)
                      result = val[2]
                      yyerror "Can't define single method for literals." if
                        result[0] == :lit
                    
    result
end

def _reduce_590(val, _values, result)
                      result = s(:array)
                    
    result
end

def _reduce_591(val, _values, result)
                      result = val[0]
                    
    result
end

# reduce 592 omitted

def _reduce_593(val, _values, result)
                      list = val[0].dup
                      more = val[2][1..-1]
                      list.push(*more) unless more.empty?
                      result = list
                      result[0] = :hash
                    
    result
end

def _reduce_594(val, _values, result)
                      result = s(:array, val[0], val[2])
                    
    result
end

def _reduce_595(val, _values, result)
                      result = s(:array, s(:lit, val[0][0].to_sym), val[1])
                    
    result
end

def _reduce_596(val, _values, result)
                      _, sym, _, value = val
                      sym[0] = :dsym
                      result = s(:array, sym, value)
                    
    result
end

def _reduce_597(val, _values, result)
                      raise "not yet: #{val.inspect}"
                      # result = s(:array, s(:lit, val[1].to_sym), val[1])
                    
    result
end

def _reduce_598(val, _values, result)
                      result = s(:array, s(:kwsplat, val[1]))
                    
    result
end

# reduce 599 omitted

# reduce 600 omitted

# reduce 601 omitted

# reduce 602 omitted

# reduce 603 omitted

# reduce 604 omitted

# reduce 605 omitted

# reduce 606 omitted

# reduce 607 omitted

# reduce 608 omitted

# reduce 609 omitted

# reduce 610 omitted

# reduce 611 omitted

# reduce 612 omitted

# reduce 613 omitted

# reduce 614 omitted

# reduce 615 omitted

# reduce 616 omitted

# reduce 617 omitted

# reduce 618 omitted

# reduce 619 omitted

# reduce 620 omitted

def _reduce_621(val, _values, result)
 yyerrok 
    result
end

# reduce 622 omitted

# reduce 623 omitted

def _reduce_624(val, _values, result)
 yyerrok 
    result
end

def _reduce_625(val, _values, result)
 result = nil; 
    result
end

def _reduce_none(val, _values, result)
  val[0]
end

end   # class Ruby22Parser
