#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.14
# from Racc grammer file "".
#

require 'racc/parser.rb'
class Ruby24Parser < RubyParser::Parser


require "ruby_lexer"
require "ruby_parser_extras"

# :stopdoc:

# Local Variables: **
# racc-token-length-max:14 **
# End: **
##### State transition tables begin ###

clist = [
'-506,297,72,73,74,12,60,-506,-506,-506,66,67,-506,-506,-506,70,-506',
'68,69,71,33,34,75,76,-506,-100,-506,-506,-506,32,31,30,104,103,105,106',
'-506,-506,22,-506,-506,-506,-506,-506,11,48,1004,13,108,107,109,98,59',
'100,99,101,-91,102,110,111,112,94,95,756,45,46,44,-506,-506,-506,-506',
'-506,-506,-506,-506,-506,-506,-506,-506,-506,-506,-106,-93,-506,-506',
'-506,43,-506,-506,36,209,-506,61,62,-506,-506,63,-506,38,-506,210,-506',
'47,-506,-506,-506,-506,-506,-506,-506,23,-506,272,-506,272,91,83,85',
'86,87,89,211,627,-91,84,92,-506,-506,-506,-506,-91,-506,65,-506,-103',
'81,88,90,-288,-518,96,97,-105,-506,-506,-288,-288,-288,-602,-93,-288',
'-288,-288,-92,-288,-98,-104,-94,-91,218,-102,-91,222,736,-288,-288,-288',
'272,116,755,666,-517,585,115,-288,-288,-91,-288,-288,-288,-288,-288',
'-84,457,-93,626,-101,-93,116,-99,-106,-102,585,115,262,-106,-99,-70',
'223,271,-106,271,-93,708,665,-288,-288,-288,-288,-288,-288,-288,-288',
'-288,-288,-288,-288,-288,-288,585,-92,-288,-288,-288,-94,793,-288,-104',
'-98,-288,736,736,-288,-288,-603,-288,-105,-288,-602,-288,-106,-288,-288',
'-288,-288,-288,-288,-288,-103,-288,321,-288,-101,-103,271,-92,-105,-602',
'-92,-94,-89,-105,-94,116,-288,-288,-288,-288,115,-288,-104,-288,585',
'-92,-102,-104,-606,-94,585,-102,-99,-288,-104,-606,-606,-606,116,-100',
'-606,-606,-606,115,-606,-603,-90,-97,-93,219,220,-98,-101,-606,-606',
'-606,-606,-101,116,-103,707,-599,322,115,-606,-606,83,-606,-606,-606',
'-606,-606,219,220,84,409,219,220,223,630,411,410,116,116,-95,116,666',
'115,115,358,115,219,220,-96,666,-606,-606,-606,-606,-606,-606,-606,-606',
'-606,-606,-606,-606,-606,-606,-92,382,-606,-606,-606,-503,792,-606,272',
'790,-606,665,-503,-606,-606,-600,-606,-599,-606,665,-606,-503,-606,-606',
'-606,-606,-606,-606,-606,116,-606,-606,-606,629,115,116,385,-99,938',
'-599,115,643,-99,611,-100,-606,-606,-606,-606,-100,-606,-606,-606,223',
'644,-94,-98,223,-606,-606,-606,-98,-606,-102,-606,-606,-101,-606,-506',
'388,-503,570,223,-417,-506,-506,-606,391,666,-606,-600,-506,573,-92',
'-506,747,886,-606,-606,748,-606,-606,-606,-606,-606,271,-94,565,-101',
'562,561,560,-600,563,613,612,611,94,95,611,407,-103,665,768,412,581',
'580,530,-606,-606,-606,-606,-606,-606,-606,-606,-606,-606,-606,-606',
'-606,-606,-606,-506,-606,-606,-606,611,650,-606,616,456,-606,-100,-602',
'-606,94,95,-606,574,-606,-517,-606,791,-606,-606,-606,-606,-606,-606',
'-606,611,-606,-606,-606,458,-606,613,612,631,613,612,609,459,-105,850',
'-503,-606,-606,825,-93,591,-606,-503,-503,-503,96,97,-503,-503,-503',
'681,-503,-89,-606,-102,570,-606,613,612,-503,116,-503,-503,-503,222',
'115,573,-98,116,-103,490,-503,-503,115,-503,-503,-503,-503,-503,265',
'-515,613,612,116,96,97,266,-515,115,542,766,565,544,562,561,560,-515',
'563,223,581,580,1008,-503,-503,-503,-503,-503,-503,-503,-503,-503,-503',
'-503,-503,-503,-503,530,-503,-503,-503,-503,215,-503,-503,-503,274,-503',
'611,454,-503,-503,611,-503,574,-503,500,-503,455,-503,-503,-503,-503',
'-503,-503,-503,-515,-503,503,-503,565,265,562,561,560,570,563,505,266',
'-96,776,-69,-503,-503,-503,-503,573,-503,-288,-503,984,-510,219,220',
'-105,-288,-288,-288,-510,-503,-503,-288,-288,542,-288,215,544,216,568',
'613,612,624,1015,613,612,619,-280,578,577,581,580,1013,-91,-280,-288',
'-288,223,-288,-288,-288,-288,-288,-280,-289,-509,215,516,-100,517,116',
'-289,-509,965,611,115,223,217,-508,524,-289,277,752,223,574,-508,-288',
'-288,-288,-288,-288,-288,-288,-288,-288,-288,-288,-288,-288,-288,215',
'216,-288,-288,-288,274,649,965,-511,527,-288,531,-280,-288,-514,-511',
'752,-518,-288,-97,-288,-514,-288,-288,-288,-288,-288,-288,-288,-289',
'-288,216,-288,-336,-106,613,612,614,116,542,-336,611,541,115,-608,-288',
'-288,-512,-95,-336,-288,-608,-608,-608,-512,243,-608,-608,-608,-90,-608',
'215,-288,-104,542,216,-288,544,594,-608,-608,-608,-608,-288,-99,581',
'580,592,-603,539,-608,-608,-288,-608,-608,-608,-608,-608,-513,215,854',
'825,116,545,215,-513,533,115,-336,219,220,214,613,612,609,455,854,825',
'219,220,212,-608,-608,-608,-608,-608,-608,-608,-608,-608,-608,-608,-608',
'-608,-608,591,216,-608,-608,-608,-288,-288,-608,401,595,-608,596,-288',
'-608,-608,618,-608,-603,-608,622,-608,-288,-608,-608,-608,-608,-608',
'-608,-608,216,-608,-608,-608,565,216,562,561,560,570,563,119,120,121',
'122,123,-608,-608,-608,-608,573,-608,-425,-608,119,120,121,122,123,-425',
'-425,-425,625,-608,-425,-425,-425,628,-425,215,635,-288,568,760,243',
'-262,750,-425,-425,-425,215,578,577,581,580,752,637,523,-425,-425,223',
'-425,-425,-425,-425,-425,521,-289,641,642,274,653,-516,243,-289,243',
'240,243,243,-516,242,241,223,-289,223,223,-84,574,-516,-425,-425,-425',
'-425,-425,-425,-425,-425,-425,-425,-425,-425,-425,-425,684,216,-425',
'-425,-425,223,535,-425,695,274,-425,700,216,-425,-425,701,-425,223,-425',
'704,-425,505,-425,-425,-425,-425,-425,-425,-425,-289,-425,-425,-425',
'710,-516,565,713,562,561,560,714,563,243,716,-626,-425,-425,718,-425',
'720,-425,-626,-626,-626,728,729,-626,-626,-626,243,-626,565,-425,562',
'561,560,730,563,243,-626,-626,-626,732,722,240,257,258,591,242,241,-626',
'-626,930,-626,-626,-626,-626,-626,739,769,770,240,771,246,-263,242,241',
'238,239,722,240,244,777,245,242,241,238,239,725,490,490,-626,-626,-626',
'-626,-626,-626,-626,-626,-626,-626,-626,-626,-626,-626,223,795,-626',
'-626,-626,262,503,-626,505,274,-626,695,223,-626,-626,274,-626,274,-626',
'695,-626,243,-626,-626,-626,-626,-626,-626,-626,243,-626,-626,-626,825',
'223,565,848,562,561,560,223,563,825,858,-281,-626,-626,223,-626,-264',
'-626,-281,-281,-281,885,888,-281,-281,-281,243,-281,240,-626,713,891',
'242,241,238,239,894,-281,-281,-281,722,896,257,258,898,223,900,-281',
'-281,725,-281,-281,-281,-281,-281,901,695,909,240,-262,246,913,242,241',
'238,239,915,916,244,565,245,562,561,560,223,563,713,919,-281,-281,-281',
'-281,-281,-281,-281,-281,-281,-281,-281,-281,-281,-281,921,923,-281',
'-281,-281,925,925,-281,223,931,-281,933,935,-281,-281,722,-281,223,-281',
'945,-281,946,-281,-281,-281,-281,-281,-281,-281,223,-281,949,-281,565',
'-265,562,561,560,570,563,119,120,121,122,123,-281,-281,-281,-281,573',
'-281,-607,-281,119,120,121,122,123,-607,-607,-607,959,-281,-607,-607',
'-607,966,-607,243,877,878,568,760,879,110,111,-607,-607,-607,-607,578',
'577,581,580,257,258,967,-607,-607,969,-607,-607,-607,-607,-607,565,970',
'562,561,560,240,563,246,986,242,241,238,239,988,989,244,565,245,562',
'561,560,574,563,-607,-607,-607,-607,-607,-607,-607,-607,-607,-607,-607',
'-607,-607,-607,993,722,-607,-607,-607,713,998,-607,1000,1002,-607,1004',
'1004,-607,-607,1011,-607,722,-607,1016,-607,1017,-607,-607,-607,-607',
'-607,-607,-607,925,-607,-607,-607,565,925,562,561,560,570,563,925,1022',
'986,-603,-602,-607,-607,-607,-607,573,-607,-296,-607,700,986,1045,1046',
'1047,-296,-296,-296,1048,-607,-296,-296,-296,1004,-296,243,1004,1004',
'568,551,223,925,986,3,-296,-296,,578,577,581,580,257,258,,-296,-296',
',-296,-296,-296,-296,-296,565,,562,561,560,240,563,246,,242,241,238',
'239,,,244,565,245,562,561,560,574,563,-296,-296,-296,-296,-296,-296',
'-296,-296,-296,-296,-296,-296,-296,-296,,722,-296,-296,-296,,,-296,',
'277,-296,,,-296,-296,,-296,722,-296,,-296,,-296,-296,-296,-296,-296',
'-296,-296,,-296,962,-296,562,561,560,962,563,562,561,560,,563,,,-296',
'-296,,-296,,-296,297,72,73,74,12,60,,,,66,67,-296,,,70,,68,69,71,33',
'34,75,76,,,,,,32,31,30,104,103,105,106,,,22,,,,,654,11,48,,13,108,107',
'109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,243,247,252,253,254',
'249,251,259,260,255,256,,236,237,,,257,258,,43,,,36,,,61,62,,,63,,38',
'240,,246,47,242,241,238,239,250,248,244,23,245,,,,91,83,85,86,87,89',
',,,84,92,,261,,-239,,,65,,,81,88,90,,,96,97,297,72,73,74,12,60,,,,66',
'67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,22,,',
',,638,11,48,,13,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45',
'46,44,243,247,252,253,254,249,251,259,260,255,256,,236,237,,,257,258',
',43,,,36,,,61,62,,,63,,38,240,,246,47,242,241,238,239,250,248,244,23',
'245,,,,91,83,85,86,87,89,,,,84,92,,261,,,,,65,,,81,88,90,,,96,97,297',
'72,73,74,12,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104',
'103,105,106,,,22,,,,,654,11,48,,13,108,107,109,98,59,100,99,101,,102',
'110,111,,94,95,,45,46,44,243,247,252,253,254,249,251,259,260,255,256',
',236,237,,,257,258,,43,,,36,,,61,62,,,63,,38,240,,246,47,242,241,238',
'239,250,248,244,23,245,,,,91,83,85,86,87,89,,,,84,92,,261,,,,,65,,,81',
'88,90,,,96,97,297,72,73,74,12,60,,,,66,67,,,,70,,68,69,71,33,34,75,76',
',,,,,32,31,30,104,103,105,106,,,22,,,,,,11,48,,13,108,107,109,98,59',
'100,99,101,,102,110,111,,94,95,,45,46,44,243,247,252,253,254,249,251',
'259,260,255,256,,236,237,,,257,258,,43,,,36,,,61,62,,,63,,38,240,,246',
'47,242,241,238,239,250,248,244,23,245,,,,91,83,85,86,87,89,,,,84,92',
',261,,,,,65,,,81,88,90,,,96,97,297,72,73,74,12,60,,,,66,67,,,,70,,68',
'69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,22,,,,,,11,48,,13',
'108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,243,247,252',
'253,254,249,251,259,260,255,256,,236,237,,,257,258,,43,,,36,,,61,62',
',,63,,38,240,,246,47,242,241,238,239,250,248,244,23,245,,,,91,83,85',
'86,87,89,,,,84,92,,261,,,,,65,,,81,88,90,,,96,97,297,72,73,74,12,60',
',,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,',
',22,,,,,,11,48,,13,108,107,109,98,59,100,99,101,,102,110,111,,94,95',
',45,46,44,243,247,252,253,254,249,251,259,260,255,256,,236,237,,,257',
'258,,43,,,36,,,61,62,,,63,,38,240,,246,47,242,241,238,239,250,248,244',
'23,245,,,,91,83,85,86,87,89,,,,84,92,,261,,,,,65,,,81,88,90,,,96,97',
'297,72,73,74,12,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30',
'104,103,105,106,,,22,,,,,,11,48,,13,108,107,109,98,59,100,99,101,,102',
'110,111,,94,95,,45,46,44,243,247,252,253,254,249,251,259,260,255,256',
',236,237,,,257,258,,43,,,36,,,61,62,,,63,,38,240,,246,47,242,241,238',
'239,250,248,244,23,245,,,,91,83,85,86,87,89,,,,84,92,,261,,,,,65,,,81',
'88,90,,,96,97,297,72,73,74,12,60,,,,66,67,,,,70,,68,69,71,33,34,75,76',
',,,,,32,31,30,104,103,105,106,,,22,,,,,,11,48,,13,108,107,109,98,59',
'100,99,101,,102,110,111,,94,95,,45,46,44,243,247,252,253,254,249,251',
'259,260,255,256,,236,237,,,257,258,,43,,,36,,,61,62,,,63,,38,240,,246',
'47,242,241,238,239,250,248,244,23,245,,,,91,83,85,86,87,89,,,,84,92',
',261,,,,,65,,,81,88,90,,,96,97,297,72,73,74,12,60,,,,66,67,,,,70,,68',
'69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,22,,,,,,11,48,,13',
'108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,243,247,252',
'253,254,249,251,259,260,255,256,,236,237,,,257,258,,43,,,36,,,61,62',
',,63,,38,240,,246,47,242,241,238,239,250,248,244,23,245,,,,91,83,85',
'86,87,89,,,,84,92,223,261,,,,,65,,,81,88,90,,,96,97,297,72,73,74,12',
'60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106',
',,22,,,,,,11,48,,13,108,107,109,98,59,100,99,101,,102,110,111,,94,95',
',45,46,44,243,247,252,253,254,249,251,259,260,255,256,,236,237,,,257',
'258,,43,,,36,,,61,62,,,63,,38,240,,246,47,242,241,238,239,250,248,244',
'23,245,,,,91,83,85,86,87,89,,,,84,92,,261,,,,,65,,,81,88,90,,,96,97',
'297,72,73,74,12,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30',
'104,103,105,106,,,22,,,,,,11,48,,13,108,107,109,98,59,100,99,101,,102',
'110,111,,94,95,,45,46,44,243,247,252,253,254,249,251,259,260,255,256',
',236,237,,,257,258,,43,,,36,,,61,62,,,63,,38,240,,246,47,242,241,238',
'239,250,248,244,23,245,,,,91,83,85,86,87,89,,,,84,92,,261,,,,,65,,,81',
'88,90,,,96,97,297,72,73,74,12,60,,,,66,67,,,,70,,68,69,71,33,34,75,76',
',,,,,32,31,30,104,103,105,106,,,22,,,,,,11,48,,13,108,107,109,98,59',
'100,99,101,,102,110,111,,94,95,,45,46,44,243,247,252,253,254,249,251',
'259,260,255,256,,236,237,,,257,258,,43,,,36,,,61,62,,,63,,38,240,,246',
'47,242,241,238,239,250,248,244,23,245,,,,91,83,85,86,87,89,,,,84,92',
',261,,,,,65,,,81,88,90,,,96,97,297,72,73,74,12,60,,,,66,67,,,,70,,68',
'69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,22,,,,,,11,48,,13',
'108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,243,247,252',
'253,254,249,251,259,260,255,256,,236,237,,,257,258,,43,,,299,,,61,62',
',,63,,38,240,,246,47,242,241,238,239,250,248,244,23,245,,,,91,83,85',
'86,87,89,,,,84,92,,261,,,,,65,,,81,88,90,,,96,97,297,72,73,74,12,60',
',,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,',
',22,,,,,,11,48,,13,108,107,109,98,59,100,99,101,,102,110,111,,94,95',
',45,46,44,243,247,252,253,254,249,251,259,260,255,256,,236,237,,,257',
'258,,43,,,36,,,61,62,,,63,,38,240,,246,47,242,241,238,239,250,248,244',
'23,245,,,,91,83,85,86,87,89,,,,84,92,,261,,,,,65,,,81,88,90,,,96,97',
'8,72,73,74,12,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30',
'104,103,105,106,,,22,,,,,,11,48,10,13,108,107,109,98,59,100,99,101,',
'102,110,111,,94,95,,45,46,44,243,247,252,253,254,249,251,259,260,255',
'256,,236,237,,,257,258,,43,,,36,,,61,62,,,63,,38,240,,246,47,242,241',
'238,239,250,248,244,23,245,,,,91,83,85,86,87,89,,,,84,92,,261,,,,,65',
',,81,88,90,,,96,97,297,72,73,74,12,60,,,,66,67,,,,70,,68,69,71,33,34',
'75,76,,,,,,32,31,30,104,103,105,106,,,22,,,,,,11,48,,13,108,107,109',
'98,59,100,99,101,,102,110,111,,94,95,,45,46,44,243,247,252,253,254,249',
'251,259,260,255,256,,236,237,,,257,258,,43,,,36,,,61,62,,,63,,38,240',
',246,47,242,241,238,239,250,248,244,23,245,,,,91,83,85,86,87,89,,,,84',
'92,,261,,,,,65,,,81,88,90,,,96,97,297,72,73,74,12,60,,,,66,67,,,,70',
',68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,22,,,,,,11,48',
',13,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,243,247',
'252,253,254,249,251,259,260,255,256,,236,237,,,257,258,,43,,,36,,,61',
'62,,,63,,38,240,,246,47,242,241,238,239,250,248,244,23,245,,,,91,83',
'85,86,87,89,,,,84,92,,261,,,,,65,,,81,88,90,,,96,97,297,72,73,74,12',
'60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106',
',,22,,,,,,11,48,,13,108,107,109,98,59,100,99,101,,102,110,111,,94,95',
',45,46,44,243,-627,-627,-627,-627,249,251,,,-627,-627,,,,,,257,258,',
'43,,,36,,,61,62,,,63,,38,240,,246,47,242,241,238,239,250,248,244,23',
'245,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,297,72',
'73,74,12,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103',
'105,106,,,22,,,,,,11,48,,13,108,107,109,98,59,100,99,101,,102,110,111',
',94,95,,45,46,44,243,247,252,253,254,249,251,,,255,256,,,,,,257,258',
',43,,,36,,,61,62,,,63,,38,240,,246,47,242,241,238,239,250,248,244,23',
'245,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,297,72',
'73,74,12,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103',
'105,106,,,22,,,,,,11,48,,13,108,107,109,98,59,100,99,101,,102,110,111',
',94,95,,45,46,44,243,247,252,253,254,249,251,259,,255,256,,,,,,257,258',
',43,,,299,,,61,62,,,63,,38,240,,246,47,242,241,238,239,250,248,244,23',
'245,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,297,72',
'73,74,12,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103',
'105,106,,,22,,,,,,11,48,,13,108,107,109,98,59,100,99,101,,102,110,111',
',94,95,,45,46,44,243,-627,-627,-627,-627,249,251,,,-627,-627,,,,,,257',
'258,,43,,,299,,,61,62,,,63,,38,240,,246,47,242,241,238,239,250,248,244',
'23,245,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,297',
'72,73,74,12,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104',
'103,105,106,,,22,,,,,,11,48,,13,108,107,109,98,59,100,99,101,,102,110',
'111,,94,95,,45,46,44,243,-627,-627,-627,-627,249,251,,,-627,-627,,,',
',,257,258,,43,,,36,,,61,62,,,63,,38,240,,246,47,242,241,238,239,250',
'248,244,23,245,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96',
'97,297,72,73,74,12,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31',
'30,104,103,105,106,,,22,,,,,,11,48,,13,108,107,109,98,59,100,99,101',
',102,110,111,,94,95,,45,46,44,243,-627,-627,-627,-627,249,251,,,-627',
'-627,,,,,,257,258,,43,,,36,,,61,62,,,63,,38,240,,246,47,242,241,238',
'239,250,248,244,23,245,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88',
'90,,,96,97,297,72,73,74,12,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,',
',,,,32,31,30,104,103,105,106,,,22,,,,,,11,48,,13,108,107,109,98,59,100',
'99,101,,102,110,111,,94,95,,45,46,44,243,247,252,253,254,249,251,259',
'260,255,256,,-627,-627,,,257,258,,43,,,36,,,61,62,,,63,,38,240,,246',
'47,242,241,238,239,250,248,244,23,245,,,,91,83,85,86,87,89,,,,84,92',
',,,,,,65,,,81,88,90,,,96,97,8,72,73,74,12,60,,,,66,67,,,,70,,68,69,71',
'33,34,75,76,,,,,,32,31,30,104,103,105,106,,,22,,,,,,11,48,10,13,108',
'107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,243,247,252,253',
'254,249,251,259,260,255,256,,-627,-627,,,257,258,,43,,,36,,,61,62,,',
'63,,38,240,,246,47,242,241,238,239,250,248,244,23,245,,,,91,83,85,86',
'87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,297,72,73,74,12,60,,,,66',
'67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,22,,',
',,,11,48,,13,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46',
'44,243,-627,-627,-627,-627,249,251,,,-627,-627,,,,,,257,258,,43,,,36',
',,61,62,,,63,,38,240,,246,47,242,241,238,239,250,248,244,23,245,,,,91',
'83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,297,72,73,74,12',
'60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106',
',,22,,,,,,11,48,,13,108,107,109,98,59,100,99,101,,102,110,111,,94,95',
',45,46,44,243,-627,-627,-627,-627,249,251,,,-627,-627,,,,,,257,258,',
'43,,,36,,,61,62,,,63,,38,240,,246,47,242,241,238,239,250,248,244,23',
'245,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,297,72',
'73,74,12,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103',
'105,106,,,22,,,,,,11,48,,13,108,107,109,98,59,100,99,101,,102,110,111',
',94,95,,45,46,44,243,,,,,,,,,,,,,,,,257,258,,43,,,36,,243,61,62,,,63',
',38,240,,246,47,242,241,238,239,257,258,,23,,,,,91,83,85,86,87,89,,',
'240,84,92,,242,241,238,239,,65,,,81,88,90,,,96,97,297,72,73,74,12,60',
',,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,',
',22,,,,,,11,48,,13,108,107,109,98,59,100,99,101,,102,110,111,,94,95',
',45,46,44,243,,,,,,,,,,,,,,,,257,258,,43,,,36,,,61,62,,,63,,38,240,',
'246,47,242,241,238,239,,,,23,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65',
',,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,314,315,75',
'76,,,,,,310,311,317,104,103,105,106,,,235,,,,,,,48,,,108,107,109,98',
'59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,228,',
',234,,,61,62,,,63,,,,,,47,,,,,,,,233,,,,,91,83,85,86,87,89,,,,84,92',
',,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,314',
'315,75,76,,,,,,310,311,317,104,103,105,106,,,235,,,,,,,312,,,108,107',
'109,98,59,100,99,101,,102,110,111,,94,95,,,,318,,,,,,,,,,,,,,,,,,,,308',
',,234,,,61,62,,,63,,,,,,,,,,,,,,,,,,,91,83,85,86,87,89,,,,84,92,,,,320',
',,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34',
'75,76,,,,,,32,31,30,104,103,105,106,,,22,,,,,,,48,,,108,107,109,98,59',
'100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,228,,,234',
',,61,62,,,63,,,,,,47,,,,,,,,23,,,,,91,83,85,86,87,89,,,,84,92,,,,,,',
'65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34,75',
'76,,,,,,32,31,30,104,103,105,106,,,22,,,,,,,48,,,108,107,109,98,59,100',
'99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,228,,,234,,',
'61,62,,,63,,,,,,47,,,,,,,,23,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65',
',,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,314,315,75',
'76,,,,,,310,311,317,104,103,105,106,,,235,,,,,,,48,,,108,107,109,98',
'59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,228,',
',234,,,61,62,,,63,,,,,,47,,,,,,,,233,,,,,91,83,85,86,87,89,,,,84,92',
',,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,314',
'315,75,76,,,,,,310,311,317,104,103,105,106,,,235,,,,,,,312,,,108,107',
'109,98,59,100,99,101,,102,110,111,,94,95,,,,318,,,,,,,,,,,,,,,,,,,,308',
',,304,,,61,62,,,63,,,,,,,,,,,,,,,,,,,91,83,85,86,87,89,,,,84,92,,,,',
',,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,314,315',
'75,76,,,,,,310,311,317,104,103,105,106,,,235,,,,,,,312,,,108,107,109',
'98,59,100,99,101,,102,110,111,,94,95,,,,318,,,,,,,,,,,,,,,,,,,,308,',
',234,,,61,62,,,63,,,,,,,,,,,,,,,,,,,91,83,85,86,87,89,,,,84,92,,,,519',
',,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34',
'75,76,,,,,,32,31,30,104,103,105,106,,,22,,,,,,,48,,,108,107,109,98,59',
'100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,228,,,234',
',,61,62,,,63,,,,,,47,,,,,,,,23,,,,,91,83,85,86,87,89,,,,84,92,,,,,,',
'65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,314,315',
'75,76,,,,,,310,311,317,104,103,105,106,,,235,,,,,,,48,,,108,107,109',
'98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,228',
',,234,,,61,62,,,63,,,,,,47,,,,,,,,233,,,,,91,83,85,86,87,89,,,,84,92',
',,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,314',
'315,75,76,,,,,,310,311,317,104,103,105,106,,,235,,,,,,,48,,,108,107',
'109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,',
',,228,,,234,,,61,62,,,63,,,,,,47,,,,,,,,233,,,,,91,83,85,86,87,89,,',
',84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69',
'71,314,315,75,76,,,,,,310,311,317,104,103,105,106,,,235,,,,,,,48,,,108',
'107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,',
',,,,,,228,,,234,,,61,62,,,63,,,,,,47,,,,,,,,233,,,,,91,83,85,86,87,89',
',,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68',
'69,71,314,315,75,76,,,,,,310,311,317,104,103,105,106,,,235,,,,,,,48',
',,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,',
',,,,,,,,,,,,228,,,234,,,61,62,,,63,,,,,,47,,,,,,,,233,,,,,91,83,85,86',
'87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,',
'70,,68,69,71,314,315,75,76,,,,,,310,311,317,104,103,105,106,,,235,,',
',,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44',
',,,,,,,,,,,,,,,,,,,228,,,234,,,61,62,,,63,,,,,,47,,,,,,,,233,,,,,91',
'83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,',
'66,67,,,,70,,68,69,71,314,315,75,76,,,,,,310,311,317,104,103,105,106',
',,235,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45',
'46,44,,,,,,,,,,,,,,,,,,,,228,,,234,,,61,62,,,63,,,,,,47,,,,,,,,233,',
',,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,',
'60,,,,66,67,,,,70,,68,69,71,314,315,75,76,,,,,,310,311,317,104,103,105',
'106,,,235,,,,,,,48,,,108,107,109,98,59,100,99,101,290,102,110,111,,94',
'95,,45,46,44,,,,,,,,,,,,,,,,,,,,228,,,234,,,61,62,,,63,,,,284,,47,,',
',,,,,233,,,,,91,287,85,86,87,89,,,,84,288,,,,,,,65,,291,81,88,90,,,96',
'97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,314,315,75,76,,,,,,310,311',
'317,104,103,105,106,,,235,,,,,,,48,,,108,107,109,98,59,100,99,101,,102',
'110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,228,,,234,,,61,62,,,63,',
',,,,47,,,,,,,,233,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90',
',,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,314,315,75,76,,,,,,310',
'311,317,104,103,105,106,,,235,,,,,,,48,,,108,107,109,98,59,100,99,101',
',102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,228,,,234,,,61,62,',
',63,,,,,,47,,,,,,,,233,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81',
'88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,314,315,75,76,,',
',,,310,311,317,104,103,105,106,,,235,,,,,,,48,,,108,107,109,98,59,100',
'99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,228,,,234,,',
'61,62,,,63,,,,,,47,,,,,,,,233,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65',
',,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34,75,76',
',,,,,32,31,30,104,103,105,106,,,235,,,,,,,48,,,108,107,109,98,59,100',
'99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,228,,,234,,',
'61,62,,,63,,,,,,47,,,,,,,,233,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65',
',,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,314,315,75',
'76,,,,,,310,311,317,104,103,105,106,,,235,,,,,,,48,,,108,107,109,98',
'59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,228,',
',234,,,61,62,,,63,,,,,,47,,,,,,,,233,,,,,91,83,85,86,87,89,,,,84,92',
',,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33',
'34,75,76,,,,,,32,31,30,104,103,105,106,,,235,,,,,,,48,,,108,107,109',
'98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,228',
',,234,,,61,62,,,63,,,,,,47,,,,,,,,233,,,,,91,83,85,86,87,89,,,,84,92',
',,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,314',
'315,75,76,,,,,,310,311,317,104,103,105,106,,,235,,,,,,,312,,,108,107',
'109,98,59,100,99,101,,102,110,111,,94,95,,,,318,,,,,,,,,,,,,,,,,,,,903',
',,234,,,61,62,,,63,,,,,,,,,,,,,,,,,,,91,83,85,86,87,89,,,,84,92,,,,',
',,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34',
'75,76,,,,,,32,31,30,104,103,105,106,,,235,,,,,,,48,,,108,107,109,98',
'59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,228,',
',234,,,61,62,,,63,,,,,,47,,,,,,,,233,,,,,91,83,85,86,87,89,,,,84,92',
',,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,314',
'315,75,76,,,,,,310,311,317,104,103,105,106,,,235,,,,,,,48,,,108,107',
'109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,',
',,228,,,234,,,61,62,,,63,,,,,,47,,,,,,,,233,,,,,91,83,85,86,87,89,,',
',84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69',
'71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,235,,,,,,,48,,,108,107',
'109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,',
',,228,,,234,,,61,62,,,63,,,,,,47,,,,,,,,233,,,,,91,83,85,86,87,89,,',
',84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69',
'71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,235,,,,,,,48,,,108,107',
'109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,',
',,228,,,234,,,61,62,,,63,,,,,,47,,,,,,,,233,,,,,91,83,85,86,87,89,,',
',84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69',
'71,314,315,75,76,,,,,,310,311,317,104,103,105,106,,,235,,,,,,,312,,',
'108,107,109,98,59,100,99,101,,102,110,111,,94,95,,,,318,,,,,,,,,,,,',
',,,,,,,976,,,234,,,61,62,,,63,,,,,,,,,,,,,,,,,,,91,83,85,86,87,89,,',
',84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69',
'71,314,315,75,76,,,,,,310,311,317,104,103,105,106,,,235,,,,,,,48,,,108',
'107,109,98,59,100,99,101,290,102,110,111,,94,95,,45,46,44,,,,,,,,,,',
',,,,,,,,,228,,,234,,,61,62,,,63,,,,284,,47,,,,,,,,233,,,,,91,287,85',
'86,87,89,,,,84,288,,,,,,,65,,291,81,88,90,,,96,97,72,73,74,,60,,,,66',
'67,,,,70,,68,69,71,314,315,75,76,,,,,,310,311,317,104,103,105,106,,',
'235,,,,,,,48,,,108,107,109,98,59,100,99,101,290,102,110,111,,94,95,',
'45,46,44,,,,,,,,,,,,,,,,,,,,228,,,234,,,61,62,,,63,,678,,284,,47,,,',
',,,,233,,,,,91,287,85,86,87,89,,,,84,288,,,,,,,65,,291,81,88,90,,,96',
'97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,314,315,75,76,,,,,,310,311',
'317,104,103,105,106,,,235,,,,,,,48,,,108,107,109,98,59,100,99,101,,102',
'110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,228,,,234,,,61,62,,,63,',
',,,,47,,,,,,,,233,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90',
',,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,314,315,75,76,,,,,,310',
'311,317,104,103,105,106,,,235,,,,,,,48,,,108,107,109,98,59,100,99,101',
',102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,228,,,234,,,61,62,',
',63,,,,,,47,,,,,,,,233,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81',
'88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,314,315,75,76,,',
',,,310,311,317,104,103,105,106,,,235,,,,,,,48,,,108,107,109,98,59,100',
'99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,228,,,234,,',
'61,62,,,63,,774,,,,47,,,,,,,,233,,,,,91,83,85,86,87,89,,,,84,92,,,,',
',,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,314,315',
'75,76,,,,,,310,311,317,104,103,105,106,,,235,,,,,,,48,,,108,107,109',
'98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,228',
',,234,,,61,62,,,63,,,,,,47,,,,,,,,233,,,,,91,83,85,86,87,89,,,,84,92',
',,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,314',
'315,75,76,,,,,,310,311,317,104,103,105,106,,,235,,,,,,,312,,,108,107',
'109,98,59,100,99,101,,102,110,111,,94,95,,,,318,,,,,,,,,,,,,,,,,,,,308',
',,304,,,61,62,,,63,,,,,,,,,,,,,,,,,,,91,83,85,86,87,89,,,,84,92,,,,',
',,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,314,315',
'75,76,,,,,,310,311,317,104,103,105,106,,,235,,,,,,,48,,,108,107,109',
'98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,228',
',,234,,,61,62,,,63,,678,,,,47,,,,,,,,233,,,,,91,83,85,86,87,89,,,,84',
'92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71',
'314,315,75,76,,,,,,310,311,317,104,103,105,106,,,235,,,,,,,48,,,108',
'107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,',
',,,,,,228,,,234,,,61,62,,,63,,,,,,47,,,,,,,,233,,,,,91,83,85,86,87,89',
',,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68',
'69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,22,,,,,,,48,,,108',
'107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,',
',,,,,,228,,,234,,,61,62,,,63,,,,,,47,,,,,,,,23,,,,,91,83,85,86,87,89',
',,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68',
'69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,22,,,,,,,48,,,108',
'107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,',
',,,,,,228,,,234,,,61,62,,,63,,,,,,47,,,,,,,,23,,,,,91,83,85,86,87,89',
',,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68',
'69,71,314,315,75,76,,,,,,310,311,317,104,103,105,106,,,235,,,,,,,48',
',,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,',
',,,,,,,,,,,,228,,,234,,,61,62,,,63,,,,,,47,,,,,,,,233,,,,,91,83,85,86',
'87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,',
'70,,68,69,71,314,315,75,76,,,,,,310,311,317,104,103,105,106,,,235,,',
',,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44',
',,,,,,,,,,,,,,,,,,,228,,,234,,,61,62,,,63,,,,,,47,,,,,,,,233,,,,,91',
'83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,',
'66,67,,,,70,,68,69,71,314,315,75,76,,,,,,310,311,317,104,103,105,106',
',,235,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45',
'46,44,,,,,,,,,,,,,,,,,,,,228,,,234,535,,61,62,,,63,,,,,,47,,,,,,,,233',
',,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74',
',60,,,,66,67,,,,70,,68,69,71,314,315,75,76,,,,,,310,311,317,104,103',
'105,106,,,235,,,,,,,312,,,108,107,109,597,59,100,99,598,,102,110,111',
',94,95,,,,318,,,,,,,,,,,,,,,,,,,,599,,,234,,,61,62,,,63,,,,,,,,,,,,',
',,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74',
'12,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105',
'106,,,22,,,,,,11,48,10,13,108,107,109,98,59,100,99,101,,102,110,111',
',94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,43,,,36,,,61,62,,,63,,38,,,,47,',
',,,,,,23,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97',
'72,73,74,,60,,,,66,67,,,,70,,68,69,71,314,315,75,76,,,,,,310,311,317',
'104,103,105,106,,,235,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110',
'111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,228,,,234,,,61,62,,,63,,,,,',
'47,,,,,,,,233,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96',
'97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,314,315,75,76,,,,,,310,311',
'317,104,103,105,106,,,235,,,,,,,48,,,108,107,109,98,59,100,99,101,,102',
'110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,228,,,234,,,61,62,,,63,',
',,,,47,,,,,,,,233,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90',
',,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,314,315,75,76,,,,,,310',
'311,317,104,103,105,106,,,235,,,,,,,48,,,108,107,109,98,59,100,99,101',
',102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,228,,,234,,,61,62,',
',63,,,,,,47,,,,,,,,233,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81',
'88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,314,315,75,76,,',
',,,310,311,317,104,103,105,106,,,235,,,,,,,48,,,108,107,109,98,59,100',
'99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,228,,,234,,',
'61,62,,,63,,,,,,47,,,,,,,,233,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65',
',,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,314,315,75',
'76,,,,,,310,311,317,104,103,105,106,,,235,,,,,,,48,,,108,107,109,98',
'59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,228,',
',234,,,61,62,,,63,,,,,,47,,,,,,,,233,,,,,91,83,85,86,87,89,,,,84,92',
',,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,314',
'315,75,76,,,,,,310,311,317,104,103,105,106,,,235,,,,,,,48,,,108,107',
'109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,',
',,228,,,234,,,61,62,,,63,,,,,,47,,,,,,,,233,,,,,91,83,85,86,87,89,,',
',84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69',
'71,314,315,75,76,,,,,,310,311,317,104,103,105,106,,,235,,,,,,,48,,,108',
'107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,',
',,,,,,228,,,234,,,61,62,,,63,,,,,,47,,,,,,,,233,,,,,91,83,85,86,87,89',
',,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68',
'69,71,314,315,75,76,,,,,,310,311,317,104,103,105,106,,,235,,,,,,,48',
',,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,',
',,,,,,,,,,,,228,,,234,,,61,62,,,63,,,,,,47,,,,,,,,233,,,,,91,83,85,86',
'87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,',
'70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,235,,,,,,,48',
',,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,',
',,,,,,,,,,,,228,,,234,,,61,62,,,63,,,,,,47,,,,,,,,233,,,,,91,83,85,86',
'87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,',
'70,,68,69,71,314,315,75,76,,,,,,310,311,317,104,103,105,106,,,235,,',
',,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44',
',,,,,,,,,,,,,,,,,,,228,,,234,,,61,62,,,63,,,,,,47,,,,,,,,233,,,,,91',
'83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,',
'66,67,,,,70,,68,69,71,314,315,75,76,,,,,,310,311,317,104,103,105,106',
',,235,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45',
'46,44,,,,,,,,,,,,,,,,,,,,228,,,234,,,61,62,,,63,,417,,,,47,,,,,,,,233',
',,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74',
',60,,,,66,67,,,,70,,68,69,71,314,315,75,76,,,,,,310,311,317,104,103',
'105,106,,,235,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,',
'94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,228,,,234,,,61,62,,,63,,,,,,47,,',
',,,,,233,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97',
'72,73,74,,60,,,,66,67,,,,70,,68,69,71,314,315,75,76,,,,,,310,311,317',
'104,103,105,106,,,235,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110',
'111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,228,,,234,,,61,62,,,63,,,,,',
'47,,,,,,,,233,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96',
'97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,314,315,75,76,,,,,,310,311',
'317,104,103,105,106,,,235,,,,,,,312,,,108,107,109,98,59,100,99,101,',
'102,110,111,,94,95,,,,318,,,,,,,,,,,,,,,,,,,,308,,,304,,,61,62,,,63',
',,,,,,,,,,,,,,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96',
'97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,314,315,75,76,,,,,,310,311',
'317,104,103,105,106,,,235,,,,,,,48,,,108,107,109,98,59,100,99,101,,102',
'110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,228,,,234,,,61,62,,,63,',
',,,,47,,,,,,,,233,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90',
',,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,314,315,75,76,,,,,,310',
'311,317,104,103,105,106,,,235,,,,,,,48,,,108,107,109,98,59,100,99,101',
',102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,228,,,234,,,61,62,',
',63,,,,,,47,,,,,,,,233,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81',
'88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,314,315,75,76,,',
',,,310,311,317,104,103,105,106,,,235,,,,,,,48,,,108,107,109,98,59,100',
'99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,228,,,234,,',
'61,62,,,63,,,,,,47,,,,,,,,233,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65',
',,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,314,315,75',
'76,,,,,,310,311,317,104,103,105,106,,,235,,,,,,,48,,,108,107,109,98',
'59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,228,',
',234,,,61,62,,,63,,,,,,47,,,,,,,,233,,,,,91,83,85,86,87,89,,,,84,92',
',,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,314',
'315,75,76,,,,,,310,311,317,104,103,105,106,,,235,,,,,,,48,,,108,107',
'109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,',
',,228,,,234,,,61,62,,,63,,,,,,47,,,,,,,,233,,,,,91,83,85,86,87,89,,',
',84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69',
'71,314,315,75,76,,,,,,310,311,317,104,103,105,106,,,235,,,,,,,48,,,108',
'107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,',
',,,,,,228,,,234,,,61,62,,,63,,,,,,47,,,,,,,,233,,,,,91,83,85,86,87,89',
',,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68',
'69,71,314,315,75,76,,,,,,310,311,317,104,103,105,106,,,235,,,,,,,48',
',,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,',
',,,,,,,,,,,,228,,,234,,,61,62,,,63,,,,,,47,,,,,,,,233,,,,,91,83,85,86',
'87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,',
'70,,68,69,71,314,315,75,76,,,,,,310,311,317,104,103,105,106,,,235,,',
',,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44',
',,,,,,,,,,,,,,,,,,,228,,,234,,,61,62,,,63,,,,,,47,,,,,,,,233,,,,,91',
'83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,',
'66,67,,,,70,,68,69,71,314,315,75,76,,,,,,310,311,317,104,103,105,106',
',,235,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45',
'46,44,,,,,,,,,,,,,,,,,,,,228,,,234,,,61,62,,,63,,,,,,47,,,,,,,,233,',
',,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,',
'60,,,,66,67,,,,70,,68,69,71,314,315,75,76,,,,,,310,311,317,104,103,105',
'106,,,235,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95',
',45,46,44,,,,,,,,,,,,,,,,,,,,228,,,234,,,61,62,,,63,,,,,,47,,,,,,,,233',
',,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74',
',60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106',
',,235,,,,,,,48,,,108,107,109,98,59,100,99,101,290,102,110,111,,94,95',
',45,46,44,,,,,,,,,,,,,,,,,,,,228,,,234,,,61,62,,,63,,286,,284,,47,,',
',,,,,233,,,,,91,287,85,86,87,89,,,,84,288,,,,,,,65,,291,81,88,90,,,96',
'97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104',
'103,105,106,,,235,,,,,,,48,,,108,107,109,98,59,100,99,101,290,102,110',
'111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,228,,,234,,,61,62,,,63,,286',
',284,,47,,,,,,,,233,,,,,91,287,85,86,87,89,,,,84,288,,,,,,,65,,291,81',
'88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,',
',32,31,30,104,103,105,106,,,235,,,,,,,48,,,108,107,109,98,59,100,99',
'101,290,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,228,,,234,,',
'61,62,,,63,,286,,284,,47,,,,,,,,233,,,,,91,287,85,86,87,89,,,,84,288',
'223,,,,,,65,,291,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69',
'71,314,315,75,76,,,,,,310,311,317,104,103,105,106,,,235,,,,,,,312,,',
'108,107,109,98,59,100,99,101,,102,110,111,,94,95,,,,318,,,,,,,,,,,,',
',,,,,,,903,,,234,,,61,62,,,63,,,,,,,,,,,,,,,,,,,91,83,85,86,87,89,,',
',84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69',
'71,314,315,75,76,,,,,,310,311,317,104,103,105,106,,,235,,,,,,,48,,,108',
'107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,',
',,,,,,228,,,234,,,61,62,,,63,,,,,,47,,,,,,,,233,,,,,91,83,85,86,87,89',
',,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68',
'69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,235,,,,,,,48,,,108',
'107,109,98,59,100,99,101,290,102,110,111,,94,95,,45,46,44,,,,,,,,,,',
',,,,,,,,,228,,,234,,,61,62,,,63,,286,,284,,47,,,,,,,,233,,,,,91,287',
'85,86,87,89,,,,84,288,,,,,,,65,,291,81,88,90,,,96,97,72,73,74,,60,,',
',66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,235',
',,,,,,48,,,108,107,109,98,59,100,99,101,290,102,110,111,,94,95,,45,46',
'44,,,,,,,,,,,,,,,,,,,,228,,,234,,,61,62,,,63,,286,,284,,47,,,,,,,,233',
',,,,91,287,85,86,87,89,,,,84,288,,,,,,,65,,291,81,88,90,,,96,97,72,73',
'74,,60,,,,66,67,,,,70,,68,69,71,314,315,75,76,,,,,,310,311,317,104,103',
'105,106,,,235,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,',
'94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,228,,,234,,,61,62,,,63,,,,,,47,,',
',,,,,233,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97',
'72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104',
'103,105,106,,,235,,,,,,,48,,,108,107,109,98,59,100,99,101,290,102,110',
'111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,228,,,234,,,61,62,,,63,,286',
',284,,47,,,,,,,,233,,,,,91,287,85,86,87,89,,,,84,288,,,,,,,65,,291,81',
'88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,314,315,75,76,,',
',,,310,311,317,104,103,105,106,,,235,,,,,,,48,,,108,107,109,98,59,100',
'99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,228,,,234,,',
'61,62,,,63,,,,,,47,,,,,,,,233,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65',
',,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,314,315,75',
'76,,,,,,310,311,317,104,103,105,106,,,235,,,,,,,48,,,108,107,109,98',
'59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,228,',
',234,,,61,62,,,63,,,,,,47,,,,,,,,233,,,,,91,83,85,86,87,89,,,,84,92',
',,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,314',
'315,75,76,,,,,,310,311,317,104,103,105,106,,,235,,,,,,,48,,,108,107',
'109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,',
',,228,,,234,,,61,62,,,63,,,,,,47,,,,,,,,233,,,,,91,83,85,86,87,89,,',
',84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69',
'71,314,315,75,76,,,,,,310,311,317,104,103,105,106,,,235,,,,,,,48,,,108',
'107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,',
',,,,,,228,,,234,,,61,62,,,63,,,,,,47,,,,,,,,233,,,,,91,83,85,86,87,89',
',,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,12,60,,,,66,67,,,,70,',
'68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,22,,,,,,11,48,',
'13,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,',
',,,,,,,,,,,,,43,,,36,,,61,62,,,63,,38,,,,47,,,,,,,,23,,,,,91,83,85,86',
'87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,',
'70,,68,69,71,314,315,75,76,,,,,,310,311,317,104,103,105,106,,,235,,',
',,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44',
',,,,,,,,,,,,,,,,,,,228,,,234,,,61,62,,,63,,,,,,47,,,,,,,,233,,,,,91',
'83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,',
'66,67,,,,70,,68,69,71,314,315,75,76,,,,,,310,311,317,104,103,105,106',
',,235,,,,,,,312,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,',
',,318,,,,,,,,,,,,,,,,,,,,308,,,304,,,61,62,,,63,,303,,,,,,,,,,,,,,,',
',91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60',
',,,66,67,,,,70,,68,69,71,314,315,75,76,,,,,,310,311,317,104,103,105',
'106,,,235,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95',
',45,46,44,,,,,,,,,,,,,,,,,,,,228,,,234,,,61,62,,,63,,,,,,47,,,,,,,,233',
',,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74',
',60,,,,66,67,,,,70,,68,69,71,314,315,75,76,,,,,,310,311,317,104,103',
'105,106,,,235,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,',
'94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,228,,,234,,,61,62,,,63,,,,,,47,,',
',,,,,233,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97',
'72,73,74,,60,,,,66,67,,,,70,,68,69,71,314,315,75,76,,,,,,310,311,317',
'104,103,105,106,,,235,,,,,,,312,,,108,107,109,98,59,100,99,101,,102',
'110,111,,94,95,,,,318,,,,,,,,,,,,,,,,,,,,308,,,304,,,61,62,,,63,,,,',
',,,,,,,,,,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97',
'72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104',
'103,105,106,,,235,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111',
',94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,228,,,234,,,61,62,,,63,,,,,,47,',
',,,,,,233,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97',
'72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104',
'103,105,106,,,235,,,,,,,48,,,108,107,109,98,59,100,99,101,290,102,110',
'111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,228,,,234,,,61,62,,,63,,286',
',284,,47,,,,,,,,233,,,,,91,287,85,86,87,89,,,,84,288,,,,,,,65,,291,81',
'88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,',
',32,31,30,104,103,105,106,,,22,,,,,,,48,,,108,107,109,98,59,100,99,101',
',102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,228,,,234,,,61,62,',
',63,,,,,,47,,,,,,,,23,,,,,91,83,85,86,87,89,,,,84,92,223,,,,,,65,,,81',
'88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,314,315,75,76,,',
',,,310,311,317,104,103,105,106,,,235,,,,,,,48,,,108,107,109,98,59,100',
'99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,228,,,234,,',
'61,62,,,63,,286,,,,47,,,,,,,,233,,,,,91,83,85,86,87,89,,,,84,92,,,,',
',,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,314,315',
'75,76,,,,,,310,311,317,104,103,105,106,,,235,,,,,,,48,,,108,107,109',
'98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,228',
',,234,,,61,62,,,63,,,,,,47,,,,,,,,233,,,,,91,83,85,86,87,89,,,,84,92',
',,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,314',
'315,75,76,,,,,,310,311,317,104,103,105,106,,,235,,,,,,,312,,,108,107',
'109,98,59,100,99,101,,102,110,111,,94,95,,,,318,,,,,,,,,,,,,,,,,,,,308',
',,304,,,61,62,,,63,,,,,,,,,,,,,,,,,,,91,83,85,86,87,89,,,,84,92,,,,',
',,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,314,315',
'75,76,,,,,,310,311,317,104,103,105,106,,,235,,,,,,,48,,,108,107,109',
'98,59,100,99,101,290,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,',
',228,,,234,,,61,62,,,63,,286,,,,47,,,,,,,,233,,,,,91,287,85,86,87,89',
',,,84,288,,,,,,,65,,291,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70',
',68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,235,,,,,,,48,',
',108,107,109,98,59,100,99,101,290,102,110,111,,94,95,,45,46,44,,,,,',
',,,,,,,,,,,,,,228,,,234,,,61,62,,,63,,286,,284,,47,,,,,,,,233,,,,,91',
'287,85,86,87,89,,,,84,288,,,,,,,65,,291,81,88,90,,,96,97,72,73,74,12',
'60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106',
',,22,,,,,,11,48,,13,108,107,109,98,59,100,99,101,,102,110,111,,94,95',
',45,46,44,,,,,,,,,,,,,,,,,,,,43,,,36,,,61,62,,,63,,38,,,,47,,,,,,,,23',
',,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74',
',60,,,,66,67,,,,70,,68,69,71,314,315,75,76,,,,,,310,311,317,104,103',
'105,106,,,235,,,,,,,312,,,108,107,109,597,59,100,99,598,,102,110,111',
',94,95,,,,318,,,,,,,,,,,,,,,,,,,,599,,,234,,,61,62,,,63,,,,,,,,,,,,',
',,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74',
',60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106',
',,22,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45',
'46,44,,,,,,,,,,,,,,,,,,,,228,,,234,,,61,62,,,63,,,,,,47,,,,,,,,23,,',
',,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,12',
'60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106',
',,22,,,,,,11,48,,13,108,107,109,98,59,100,99,101,,102,110,111,,94,95',
',45,46,44,,,,,,,,,,,,,,,,,,,,43,,,36,,,61,62,,,63,,38,,,,47,,,,,,,,23',
',,,,91,83,85,86,87,89,,,,84,92,,,,,,401,65,,,81,88,90,,,96,97,72,73',
'74,,60,,,,66,67,,,,70,,68,69,71,314,315,75,76,,,,,,310,311,317,104,103',
'105,106,,,235,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,',
'94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,228,,,234,,,61,62,,,63,,,,,,47,,',
',,,,,233,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97',
'72,73,74,,60,,,,66,67,,,,70,,68,69,71,314,315,75,76,,,,,,310,311,317',
'104,103,105,106,,,235,,,,,,,48,,,108,107,109,98,59,100,99,101,290,102',
'110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,228,,,234,,,61,62,,,63,',
',,284,,47,,,,,,,,233,,,,,91,287,85,86,87,89,,,,84,288,,,,,,,65,,291',
'81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,314,315,75,76',
',,,,,310,311,317,104,103,105,106,,,235,,,,,,,48,,,108,107,109,98,59',
'100,99,101,290,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,228,',
',234,,,61,62,,,63,,678,,284,,47,,,,,,,,233,,,,,91,287,85,86,87,89,,',
',84,288,,,,,,,65,,291,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,',
'68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,22,,,,,,,48,,,108',
'107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,',
',,,,,,228,,,234,,,61,62,,,63,,,,,,47,,,,,,,,23,,,,,91,83,85,86,87,89',
',,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68',
'69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,22,,,,,,,48,,,108',
'107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,',
',,,,,,228,,,234,,,61,62,,,63,,,,,,47,,,,,,,,23,,,,,91,83,85,86,87,89',
',,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68',
'69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,22,,,,,,,48,,,108',
'107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,',
',,,,,,228,,,234,,,61,62,,,63,,,,,,47,,,,,,,,23,,,,,91,83,85,86,87,89',
',,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,12,60,,,,66,67,,,,70,',
'68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,22,,,,,,11,48,10',
'13,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,',
',,,,,,,,,,,,,43,,,36,,,61,62,,,63,,38,,,,47,,,,,,,,23,,,,,91,83,85,86',
'87,89,,,,84,92,,,,,,401,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67',
',,,70,,68,69,71,314,315,75,76,,,,,,310,311,317,104,103,105,106,,,235',
',,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44',
',,,,,,,,,,,,,,,,,,,228,,,234,,,61,62,,,63,,,,,,47,,,,,,,,233,,,,,91',
'83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,',
'66,67,,,,70,,68,69,71,314,315,75,76,,,,,,310,311,317,104,103,105,106',
',,235,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45',
'46,44,,,,,,,,,,,,,,,,,,,,228,,,234,,,61,62,,,63,,,,,,47,,,,,,,,233,',
',,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,',
'60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106',
',,22,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45',
'46,44,,,,,,,,,,,,,,,,,,,,228,,,234,,,61,62,,,63,,,,,,47,,,,,,,,23,,',
',,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60',
',,,66,67,,,,70,,68,69,71,314,315,75,76,,,,,,310,311,317,104,103,105',
'106,,,235,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95',
',45,46,44,,,,,,,,,,,,,,,,,,,,228,,,234,,,61,62,,,63,,,,,,47,,,,,,,,233',
',,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74',
',60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106',
',,22,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45',
'46,44,,,,,,,,,,,,,,,,,,,,228,,,234,,,61,62,,,63,,,,,,47,,,,,,,,23,,',
',,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60',
',,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,',
',235,,,,,,,48,,,108,107,109,98,59,100,99,101,290,102,110,111,,94,95',
',45,46,44,,,,,,,,,,,,,,,,,,,,228,,,234,,,61,62,,,63,,286,,284,,47,,',
',,,,,233,,,,,91,287,85,86,87,89,,,,84,288,,,,,,,65,,291,81,88,90,,,96',
'97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104',
'103,105,106,,,22,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111',
',94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,228,,,234,,,61,62,,,63,,,,,,47,',
',,,,,,23,,,,,91,83,85,86,87,89,,,,84,92,116,,,,,115,65,,,81,88,90,,',
'96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,314,315,75,76,,,,,,310,311',
'317,104,103,105,106,,,235,,,,,,,312,,,108,107,109,98,59,100,99,101,',
'102,110,111,,94,95,,,,318,,,,,,,,,,,,,,,,,,,,352,,,36,,,61,62,,,63,',
'38,,,,,,,,,,,,,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,',
'96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30',
'104,103,105,106,,,235,,,,,,,48,,,108,107,109,98,59,100,99,101,290,102',
'110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,228,,,234,,,61,62,,,63,',
'286,,284,,47,,,,,,,,233,,,,,91,287,85,86,87,89,,,,84,288,,,,,,,65,,291',
'81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,314,315,75,76',
',,,,,310,311,317,104,103,105,106,,,235,,,,,,,48,,,108,107,109,98,59',
'100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,228,,,234',
',,61,62,,,63,,,,,,47,,,,,,,,233,,,,,91,83,85,86,87,89,,,,84,92,,,,,',
',65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34,75',
'76,,,,,,32,31,30,104,103,105,106,,,22,,,,,,,48,,,108,107,109,98,59,100',
'99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,228,,,234,,',
'61,62,,,63,,,,,,47,,,,,,,,23,,,,,91,83,85,86,87,89,,,,84,92,223,,,,',
',65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34,75',
'76,,,,,,32,31,30,104,103,105,106,,,22,,,,,,,48,,,108,107,109,98,59,100',
'99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,228,,,234,,',
'61,62,,,63,,,,,,47,,,,,,,,23,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65',
',,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,314,315,75',
'76,,,,,,310,311,317,104,103,105,106,,,235,,,,,,,48,,,108,107,109,98',
'59,100,99,101,290,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,228',
',,234,,,61,62,,,63,,,,,,47,,,,,,,,233,,,,,91,287,85,86,87,89,,,,84,288',
',,,,,,65,,291,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71',
'33,34,75,76,,,,,,32,31,30,104,103,105,106,,,22,,,,,,,48,,,108,107,109',
'98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,228',
',,234,,,61,62,,,63,,,,,,47,,,,,,,,23,,,,,91,83,85,86,87,89,,,,84,92',
',,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33',
'34,75,76,,,,,,32,31,30,104,103,105,106,,,22,,,,,,,48,,,108,107,109,98',
'59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,228,',
',234,,,61,62,,,63,,,,,,47,,,,,,,,23,,,,,91,83,85,86,87,89,,,,84,92,',
',,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33',
'34,75,76,,,,,,32,31,30,104,103,105,106,,,235,,,,,,,48,,,108,107,109',
'98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,228',
',,234,,,61,62,,,63,,417,,,,47,,,,,,,,233,,,,,91,83,85,86,87,89,,,,84',
'92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71',
'33,34,75,76,,,,,,32,31,30,104,103,105,106,,,235,,,,,,,48,,,108,107,109',
'98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,228',
',,234,,,61,62,,,63,,,,,,47,,,,,,,,233,,,,,91,83,85,86,87,89,,,,84,92',
',,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,314',
'315,75,76,,,,,,310,311,317,104,103,105,106,,,235,,,,,,,48,,,108,107',
'109,98,59,100,99,101,290,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,',
',,,,,228,,,234,,,61,62,,,63,,,,,,47,,,,,,,,233,,,,,91,287,85,86,87,89',
',,,84,288,,,,,,,65,,291,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70',
',68,69,71,314,315,75,76,,,,,,310,311,317,104,103,105,106,,,235,,,,,',
',48,,,108,107,109,98,59,100,99,101,290,102,110,111,,94,95,,45,46,44',
',,,,,,,,,,,,,,,,,,,228,,,234,,,61,62,,,63,,678,,,,47,,,,,,,,233,,,,',
'91,287,85,86,87,89,,,,84,288,,,,,,,65,,291,81,88,90,,,96,97,72,73,74',
',60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106',
',,235,,,,,,,48,,,108,107,109,98,59,100,99,101,290,102,110,111,,94,95',
',45,46,44,,,,,,,,,,,,,,,,,,,,228,,,234,,,61,62,,,63,,286,,284,,47,,',
',,,,,233,,,,,91,287,85,86,87,89,,,,84,288,,,,,,,65,,291,81,88,90,,,96',
'97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104',
'103,105,106,,,235,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111',
',94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,228,,,234,,,61,62,,,63,,,,,,47,',
',,,,,,233,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97',
'72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104',
'103,105,106,,,235,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111',
',94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,228,,,234,,,61,62,,,63,,417,,,,47',
',,,,,,,233,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97',
'72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104',
'103,105,106,,,22,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111',
',94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,228,,,234,,,61,62,,,63,,,,,,47,',
',,,,,,23,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97',
'72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104',
'103,105,106,,,22,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111',
',94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,228,,,234,,,61,62,,,63,,,,,,47,',
',,,,,,23,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97',
'72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104',
'103,105,106,,,22,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111',
',94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,228,,,234,,,61,62,,,63,,,,,,47,',
',,,,,,23,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97',
'72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104',
'103,105,106,,,235,,,,,,,48,,,108,107,109,98,59,100,99,101,290,102,110',
'111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,228,,,234,,,61,62,,,63,,286',
',284,,47,,,,,,,,233,,,,,91,287,85,86,87,89,,,,84,288,,,,,,,65,,291,81',
'88,90,,,96,97,176,187,177,200,173,193,183,182,203,204,198,181,180,175',
'201,205,206,185,174,188,192,194,186,179,,,,195,202,197,196,189,199,184',
'172,191,190,,,,,,171,178,169,170,166,167,168,127,129,,,128,,,,,,,,,161',
'162,,157,139,140,141,148,145,147,,,142,143,,,,163,164,149,150,,,,,,',
',,,,,,,154,153,,138,160,156,155,151,152,146,144,136,159,137,,,165,91',
',,,,,,,,,92,,,,,,,,,158,176,187,177,200,173,193,183,182,203,204,198',
'181,180,175,201,205,206,185,174,188,192,194,186,179,,,,195,202,197,367',
'366,368,365,172,191,190,,,,,,171,178,169,170,362,363,364,360,129,100',
'99,361,,102,,,,,,,161,162,,157,139,140,141,148,145,147,,,142,143,,,',
'163,164,149,150,,,,,,374,,,,,,,,154,153,,138,160,156,155,151,152,146',
'144,136,159,137,,,165,,,,,,,,,,,,,,,,,,,,158,176,187,177,200,173,193',
'183,182,203,204,198,181,180,175,201,205,206,185,174,188,192,194,186',
'179,,,,195,202,197,196,189,199,184,172,191,190,,,,,,171,178,169,170',
'166,167,168,127,129,126,,128,,,,,,,,,161,162,,157,139,140,141,148,145',
'147,,,142,143,,,,163,164,149,150,,,,,,,,,,,,,,154,153,,138,160,156,155',
'151,152,146,144,136,159,137,,,165,91,,,,,,,,,,92,,,,,,,,,158,176,187',
'177,200,173,193,183,182,203,204,198,181,180,175,201,205,206,185,174',
'188,192,194,186,179,,,,195,202,197,196,189,199,184,172,191,190,,,,,',
'171,178,169,170,166,167,168,127,129,398,397,128,,399,,,,,,,161,162,',
'157,139,140,141,148,145,147,,,142,143,,,,163,164,149,150,,,,,,,,,,,',
',,154,153,,138,160,156,155,151,152,146,144,136,159,137,,,165,,,,,,,',
',,,,,,,,,,,,158,176,187,177,200,173,193,183,182,203,204,198,181,180',
'175,201,205,206,185,174,188,192,194,186,179,,,,195,202,197,196,189,199',
'184,172,191,190,,,,,,171,178,169,170,166,167,168,127,129,,,128,,,,,',
',,,161,162,,157,139,140,141,148,145,147,,,142,143,,,,163,164,149,150',
',,,,,,,,,,,,,154,153,,138,160,156,155,151,152,146,144,136,159,137,,',
'165,91,,,,,,,,,,92,,,,,,,,,158,176,187,177,200,173,193,183,182,203,204',
'198,181,180,175,201,205,206,185,174,188,192,194,186,179,,,,195,202,197',
'196,189,199,184,172,191,190,,,,,,171,178,169,170,166,167,168,127,129',
',,128,,,,,,,,,161,162,,157,139,140,141,148,145,147,,,142,143,,,,163',
'164,149,150,,,,,,,,,,,,,,154,153,,138,160,156,155,151,152,146,144,136',
'159,137,,,165,91,,,,,,,,,,92,,,,,,,,,158,176,187,177,200,173,193,183',
'182,203,204,198,181,180,175,201,205,206,185,174,188,192,194,186,179',
',,,195,202,197,196,189,199,184,172,191,190,,,,,,171,178,169,170,166',
'167,168,127,129,,,128,,,,,,,,,161,162,,157,139,140,141,148,145,147,',
',142,143,,,,163,164,149,150,,,,,,,,,,,,,,154,153,,138,160,156,155,151',
'152,146,144,136,159,137,-626,,165,,,,,-626,-626,-626,,,-626,-626,-626',
'565,-626,562,561,560,570,563,158,,,-626,-626,,,,,573,,,,,-626,-626,',
'-626,-626,-626,-626,-626,,,,,,,,,,568,,565,,562,561,560,570,563,578',
'577,581,580,,,,,,573,,,,,,,-626,,,,,,,-626,,,,,274,-626,,568,,,,,574',
',,,744,438,581,580,745,,,,,,-626,-626,,161,162,,157,139,140,141,148',
'145,147,,-626,142,143,,,-626,163,164,149,150,,,574,,,274,,,,,,,,154',
'153,,138,160,156,155,151,152,146,144,136,159,137,,,165,,,,,742,431,',
',743,,,,,,,,,161,162,158,157,139,140,141,148,145,147,,,142,143,,,,163',
'164,149,150,,,,,,274,,,,,,,,154,153,,138,160,156,155,151,152,146,144',
'136,159,137,,,165,,,,,1010,438,,,1009,,,,,,,,,161,162,158,157,139,140',
'141,148,145,147,,,142,143,,,,163,164,149,150,,,,,,274,,,,,,,,154,153',
',138,160,156,155,151,152,146,144,136,159,137,,,165,,,,,862,438,,,863',
',,,,,,,,161,162,158,157,139,140,141,148,145,147,,,142,143,,,,163,164',
'149,150,,,,,,274,,,,,,,,154,153,,138,160,156,155,151,152,146,144,136',
'159,137,,,165,,,,,488,431,,,489,,,,,,,,,161,162,158,157,139,140,141',
'148,145,147,,,142,143,,,,163,164,149,150,,,,,,274,,,,,,,,154,153,,138',
'160,156,155,151,152,146,144,136,159,137,,,165,,,,,434,438,,,433,,,,',
',,,,161,162,158,157,139,140,141,148,145,147,,,142,143,,,,163,164,149',
'150,,,,,,274,,,,,,,,154,153,,138,160,156,155,151,152,146,144,136,159',
'137,,,165,,,,,488,431,,,489,,,,,,,,,161,162,158,157,139,140,141,148',
'145,147,,,142,143,,,,163,164,149,150,,,,,,,,,,,,,,154,153,,138,160,156',
'155,151,152,146,144,136,159,137,,,165,,,,,427,431,,,428,,,,,,,,,161',
'162,158,157,139,140,141,148,145,147,,,142,143,,,,163,164,149,150,,,',
',,274,,,,,,,,154,153,,138,160,156,155,151,152,146,144,136,159,137,,565',
'165,562,561,560,570,563,565,,562,561,560,570,563,,,573,,,,,158,,573',
',,,,,,,,,,,,,,568,,,,,,,568,,578,577,581,580,,,,658,438,581,580,659',
',,,,,,,,161,162,,157,139,140,141,148,145,147,,,142,143,,,574,163,164',
'149,150,,,574,,,274,,,,,,,,154,153,,138,160,156,155,151,152,146,144',
'136,159,137,,,165,,,,,656,431,,,657,,,,,,,,,161,162,158,157,139,140',
'141,148,145,147,,,142,143,,,,163,164,149,150,,,,,,274,,,,,,,,154,153',
',138,160,156,155,151,152,146,144,136,159,137,,,165,,,,,1038,431,,,1039',
',,,,,,,,161,162,158,157,139,140,141,148,145,147,,,142,143,,,,163,164',
'149,150,,,,,,274,,,,,,,,154,153,,138,160,156,155,151,152,146,144,136',
'159,137,,,165,,,,,1040,438,,,1041,,,,,,,,,161,162,158,157,139,140,141',
'148,145,147,,,142,143,,,,163,164,149,150,,,,,,274,,,,,,,,154,153,,138',
'160,156,155,151,152,146,144,136,159,137,,565,165,562,561,560,570,563',
',,691,438,,,692,,,573,,,,,158,161,162,,157,139,140,141,148,145,147,',
',142,143,,,568,163,164,149,150,,,,,,274,581,580,,,,,,154,153,,138,160',
'156,155,151,152,146,144,136,159,137,,,165,,,,,688,431,,,689,,574,,,',
',,,161,162,158,157,139,140,141,148,145,147,,,142,143,,,,163,164,149',
'150,,,,,,274,,,,,,,,154,153,,138,160,156,155,151,152,146,144,136,159',
'137,,565,165,562,561,560,570,563,565,,562,561,560,570,563,,,573,,,,',
'158,,573,565,,562,561,560,570,563,,,,,,,,568,,573,,,,,568,,578,577,581',
'580,,,,,,581,580,,,,565,568,562,561,560,570,563,,,,578,577,581,580,',
'565,573,562,561,560,570,563,574,,,,,,,574,,573,,,,,,,568,565,,562,561',
'560,570,563,574,578,577,581,580,,,568,565,573,562,561,560,570,563,,',
',581,580,,,,565,573,562,561,560,570,563,,568,,,,,,574,,573,,,581,580',
',,568,,,,,,574,,,578,577,581,580,,,568,565,,562,561,560,570,563,,578',
'577,581,580,,,574,565,573,562,561,560,570,563,,,,,,,,574,,573,,,,,,',
'568,,,,,,574,,,,,581,580,,,568,656,431,,,657,,,,578,577,581,580,,161',
'162,,157,139,140,141,148,145,147,,,142,143,,,574,163,164,149,150,,,',
',,274,,,,,574,,,154,153,,138,160,156,155,151,152,146,144,136,159,137',
',,165,,,,,658,438,,,659,,,,,,,,,161,162,158,157,139,140,141,148,145',
'147,,,142,143,,,,163,164,149,150,,,,,,274,,,,,,,,154,153,,138,160,156',
'155,151,152,146,144,136,159,137,,565,165,562,561,560,570,563,565,,562',
'561,560,570,563,,,573,,,,,158,,573,565,,562,561,560,570,563,,,,,,,,568',
',573,,,,,568,,,,581,580,,,,,,581,580,,,,,568,,,,,,,,,,,581,580,,,,,',
',,,574,,,,,,,574,,,,,,,,,,,,,,,,,574' ]
        racc_action_table = arr = ::Array.new(26465, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'101,992,992,992,992,992,992,101,101,101,992,992,101,101,101,992,101',
'992,992,992,992,992,992,992,101,860,101,101,101,992,992,992,992,992',
'992,992,101,101,992,101,101,101,101,101,992,992,1055,992,992,992,992',
'992,992,992,992,992,820,992,992,992,3,992,992,603,992,992,992,101,101',
'101,101,101,101,101,101,101,101,101,101,101,101,977,691,101,101,101',
'992,101,101,992,13,101,992,992,101,101,992,101,992,101,15,101,992,101',
'101,101,101,101,101,101,992,101,313,101,64,992,992,992,992,992,992,16',
'389,820,992,992,101,101,101,101,860,101,992,101,1039,992,992,992,659',
'227,992,992,1016,101,101,659,659,659,691,691,659,659,659,688,659,349',
'1041,689,820,19,1040,820,22,861,659,659,659,669,5,603,670,226,342,5',
'659,659,820,659,659,659,659,659,683,229,691,389,1038,691,603,350,353',
'744,934,603,25,977,227,683,22,313,977,64,691,550,670,659,659,659,659',
'659,659,659,659,659,659,659,659,659,659,343,688,659,659,659,689,659',
'659,745,226,659,587,588,659,659,1041,659,595,659,1040,659,229,659,659',
'659,659,659,659,659,1039,659,40,659,742,1039,669,688,1016,744,688,689',
'349,1016,689,861,659,659,659,659,861,659,1041,659,912,688,1040,1041',
'658,689,859,1040,974,659,659,658,658,658,342,1053,658,658,658,342,658',
'745,350,353,744,341,341,973,1038,658,658,658,658,1038,934,743,550,597',
'43,934,658,658,80,658,658,658,658,658,763,763,80,126,451,451,48,392',
'126,126,587,588,745,343,495,587,588,72,343,698,698,595,486,658,658,658',
'658,658,658,658,658,658,658,658,658,658,658,742,87,658,658,658,597,658',
'658,29,656,658,495,597,658,658,598,658,597,658,486,658,597,658,658,658',
'658,658,658,658,912,658,658,658,392,912,859,88,974,859,597,859,427,974',
'623,1053,658,658,658,658,1053,658,434,658,763,428,743,973,451,434,434',
'434,973,658,658,434,434,656,434,598,89,597,710,698,29,361,598,434,90',
'494,862,598,361,710,427,598,599,794,434,434,599,434,434,434,434,434',
'29,428,725,427,725,725,725,598,725,623,623,394,318,318,507,124,428,494',
'623,207,710,710,456,434,434,434,434,434,434,434,434,434,434,434,434',
'434,434,862,598,434,434,434,380,434,862,380,228,434,794,862,434,44,44',
'862,710,434,41,434,657,434,434,434,434,434,434,434,620,434,434,434,230',
'862,394,394,394,507,507,507,231,456,725,98,434,434,991,434,991,434,98',
'98,98,318,318,98,98,98,507,98,41,434,434,888,862,380,380,98,346,98,98',
'98,235,346,888,41,761,657,267,98,98,761,98,98,98,98,98,27,305,620,620',
'294,44,44,27,305,294,548,620,930,548,930,930,930,305,930,960,888,888',
'960,98,98,98,98,98,98,98,98,98,98,98,98,98,98,322,360,98,98,98,225,98',
'98,360,270,98,386,225,98,98,383,98,888,98,281,98,225,98,98,98,98,98',
'98,98,305,98,282,98,665,370,665,665,665,665,665,285,370,322,639,298',
'98,98,98,98,665,98,433,98,930,368,20,20,322,433,433,433,368,98,98,433',
'433,703,433,975,703,225,665,386,386,386,975,383,383,383,309,665,665',
'665,665,975,639,309,433,433,300,433,433,433,433,433,309,524,367,902',
'301,639,302,869,524,367,902,378,869,665,18,366,308,524,311,902,312,665',
'366,433,433,433,433,433,433,433,433,433,433,433,433,433,433,964,975',
'433,433,433,317,433,964,365,319,433,323,309,433,364,365,964,42,433,18',
'433,364,433,433,433,433,433,433,433,524,433,902,433,49,18,378,378,378',
'756,334,49,376,334,756,439,433,433,363,433,49,433,439,439,439,363,326',
'439,439,439,42,439,351,433,433,335,964,863,335,351,439,439,439,439,863',
'42,713,713,351,863,332,439,439,863,439,439,439,439,439,362,324,1024',
'1024,943,336,17,362,324,943,49,757,757,17,376,376,376,324,731,731,330',
'330,17,439,439,439,439,439,439,439,439,439,439,439,439,439,439,347,351',
'439,439,439,692,863,439,348,352,439,354,692,439,439,382,439,692,439',
'385,439,692,439,439,439,439,439,439,439,324,439,439,439,606,17,606,606',
'606,606,606,513,513,513,513,513,439,439,439,439,606,439,30,439,296,296',
'296,296,296,30,30,30,388,439,30,30,30,391,30,601,413,692,606,606,462',
'416,601,30,30,30,307,606,606,606,606,601,418,307,30,30,422,30,30,30',
'30,30,307,748,425,426,435,443,306,464,748,465,462,466,467,306,462,462',
'496,748,497,514,515,606,306,30,30,30,30,30,30,30,30,30,30,30,30,30,30',
'518,601,30,30,30,520,525,30,528,30,30,536,307,30,30,537,30,538,30,546',
'30,549,30,30,30,30,30,30,30,748,30,30,30,553,306,848,554,848,848,848',
'556,848,463,557,429,30,30,558,30,567,30,429,429,429,575,579,429,429',
'429,472,429,568,30,568,568,568,582,568,481,429,429,429,584,848,463,472',
'472,589,463,463,429,429,848,429,429,429,429,429,590,627,630,472,632',
'472,636,472,472,472,472,568,481,472,640,472,481,481,481,481,568,645',
'651,429,429,429,429,429,429,429,429,429,429,429,429,429,429,660,662',
'429,429,429,668,675,429,677,429,429,685,687,429,429,690,429,693,429',
'694,429,697,429,429,429,429,429,429,429,482,429,429,429,699,709,722',
'724,722,722,722,726,722,733,738,59,429,429,741,429,773,429,59,59,59',
'778,796,59,59,59,473,59,482,429,797,799,482,482,482,482,800,59,59,59',
'722,801,473,473,803,804,805,59,59,722,59,59,59,59,59,806,819,823,473',
'826,473,827,473,473,473,473,831,832,473,931,473,931,931,931,833,931',
'834,838,59,59,59,59,59,59,59,59,59,59,59,59,59,59,839,841,59,59,59,842',
'844,59,847,849,59,852,855,59,59,931,59,865,59,870,59,871,59,59,59,59',
'59,59,59,872,59,881,59,948,882,948,948,948,948,948,682,682,682,682,682',
'59,59,59,59,948,59,438,59,9,9,9,9,9,438,438,438,899,59,438,438,438,903',
'438,474,764,764,948,948,764,764,764,438,438,438,438,948,948,948,948',
'474,474,904,438,438,906,438,438,438,438,438,1022,907,1022,1022,1022',
'474,1022,474,932,474,474,474,474,936,937,474,986,474,986,986,986,948',
'986,438,438,438,438,438,438,438,438,438,438,438,438,438,438,942,1022',
'438,438,438,950,953,438,954,955,438,956,958,438,438,968,438,986,438',
'976,438,979,438,438,438,438,438,438,438,980,438,438,438,340,981,340',
'340,340,340,340,982,983,985,1009,1010,438,438,438,438,340,438,31,438',
'1012,1023,1028,1029,1030,31,31,31,1031,438,31,31,31,1032,31,475,1033',
'1034,340,340,1037,1042,1043,1,31,31,,340,340,340,340,475,475,,31,31',
',31,31,31,31,31,984,,984,984,984,475,984,475,,475,475,475,475,,,475',
'850,475,850,850,850,340,850,31,31,31,31,31,31,31,31,31,31,31,31,31,31',
',984,31,31,31,,,31,,31,31,,,31,31,,31,850,31,,31,,31,31,31,31,31,31',
'31,,31,900,31,900,900,900,1008,900,1008,1008,1008,,1008,,,31,31,,31',
',31,856,856,856,856,856,856,,,,856,856,31,,,856,,856,856,856,856,856',
'856,856,,,,,,856,856,856,856,856,856,856,,,856,,,,,446,856,856,,856',
'856,856,856,856,856,856,856,856,,856,856,856,,856,856,,856,856,856,446',
'446,446,446,446,446,446,446,446,446,446,,446,446,,,446,446,,856,,,856',
',,856,856,,,856,,856,446,,446,856,446,446,446,446,446,446,446,856,446',
',,,856,856,856,856,856,856,,,,856,856,,446,,446,,,856,,,856,856,856',
',,856,856,857,857,857,857,857,857,,,,857,857,,,,857,,857,857,857,857',
'857,857,857,,,,,,857,857,857,857,857,857,857,,,857,,,,,421,857,857,',
'857,857,857,857,857,857,857,857,857,,857,857,857,,857,857,,857,857,857',
'421,421,421,421,421,421,421,421,421,421,421,,421,421,,,421,421,,857',
',,857,,,857,857,,,857,,857,421,,421,857,421,421,421,421,421,421,421',
'857,421,,,,857,857,857,857,857,857,,,,857,857,,421,,,,,857,,,857,857',
'857,,,857,857,996,996,996,996,996,996,,,,996,996,,,,996,,996,996,996',
'996,996,996,996,,,,,,996,996,996,996,996,996,996,,,996,,,,,661,996,996',
',996,996,996,996,996,996,996,996,996,,996,996,996,,996,996,,996,996',
'996,661,661,661,661,661,661,661,661,661,661,661,,661,661,,,661,661,',
'996,,,996,,,996,996,,,996,,996,661,,661,996,661,661,661,661,661,661',
'661,996,661,,,,996,996,996,996,996,996,,,,996,996,,661,,,,,996,,,996',
'996,996,,,996,996,815,815,815,815,815,815,,,,815,815,,,,815,,815,815',
'815,815,815,815,815,,,,,,815,815,815,815,815,815,815,,,815,,,,,,815',
'815,,815,815,815,815,815,815,815,815,815,,815,815,815,,815,815,,815',
'815,815,780,780,780,780,780,780,780,780,780,780,780,,780,780,,,780,780',
',815,,,815,,,815,815,,,815,,815,780,,780,815,780,780,780,780,780,780',
'780,815,780,,,,815,815,815,815,815,815,,,,815,815,,780,,,,,815,,,815',
'815,815,,,815,815,759,759,759,759,759,759,,,,759,759,,,,759,,759,759',
'759,759,759,759,759,,,,,,759,759,759,759,759,759,759,,,759,,,,,,759',
'759,,759,759,759,759,759,759,759,759,759,,759,759,759,,759,759,,759',
'759,759,775,775,775,775,775,775,775,775,775,775,775,,775,775,,,775,775',
',759,,,759,,,759,759,,,759,,759,775,,775,759,775,775,775,775,775,775',
'775,759,775,,,,759,759,759,759,759,759,,,,759,759,,775,,,,,759,,,759',
'759,759,,,759,759,995,995,995,995,995,995,,,,995,995,,,,995,,995,995',
'995,995,995,995,995,,,,,,995,995,995,995,995,995,995,,,995,,,,,,995',
'995,,995,995,995,995,995,995,995,995,995,,995,995,995,,995,995,,995',
'995,995,785,785,785,785,785,785,785,785,785,785,785,,785,785,,,785,785',
',995,,,995,,,995,995,,,995,,995,785,,785,995,785,785,785,785,785,785',
'785,995,785,,,,995,995,995,995,995,995,,,,995,995,,785,,,,,995,,,995',
'995,995,,,995,995,987,987,987,987,987,987,,,,987,987,,,,987,,987,987',
'987,987,987,987,987,,,,,,987,987,987,987,987,987,987,,,987,,,,,,987',
'987,,987,987,987,987,987,987,987,987,987,,987,987,987,,987,987,,987',
'987,987,696,696,696,696,696,696,696,696,696,696,696,,696,696,,,696,696',
',987,,,987,,,987,987,,,987,,987,696,,696,987,696,696,696,696,696,696',
'696,987,696,,,,987,987,987,987,987,987,,,,987,987,,696,,,,,987,,,987',
'987,987,,,987,987,234,234,234,234,234,234,,,,234,234,,,,234,,234,234',
'234,234,234,234,234,,,,,,234,234,234,234,234,234,234,,,234,,,,,,234',
'234,,234,234,234,234,234,234,234,234,234,,234,234,234,,234,234,,234',
'234,234,787,787,787,787,787,787,787,787,787,787,787,,787,787,,,787,787',
',234,,,234,,,234,234,,,234,,234,787,,787,234,787,787,787,787,787,787',
'787,234,787,,,,234,234,234,234,234,234,,,,234,234,,787,,,,,234,,,234',
'234,234,,,234,234,583,583,583,583,583,583,,,,583,583,,,,583,,583,583',
'583,583,583,583,583,,,,,,583,583,583,583,583,583,583,,,583,,,,,,583',
'583,,583,583,583,583,583,583,583,583,583,,583,583,583,,583,583,,583',
'583,583,485,485,485,485,485,485,485,485,485,485,485,,485,485,,,485,485',
',583,,,583,,,583,583,,,583,,583,485,,485,583,485,485,485,485,485,485',
'485,583,485,,,,583,583,583,583,583,583,,,,583,583,485,485,,,,,583,,',
'583,583,583,,,583,583,866,866,866,866,866,866,,,,866,866,,,,866,,866',
'866,866,866,866,866,866,,,,,,866,866,866,866,866,866,866,,,866,,,,,',
'866,866,,866,866,866,866,866,866,866,866,866,,866,866,866,,866,866,',
'866,866,866,789,789,789,789,789,789,789,789,789,789,789,,789,789,,,789',
'789,,866,,,866,,,866,866,,,866,,866,789,,789,866,789,789,789,789,789',
'789,789,866,789,,,,866,866,866,866,866,866,,,,866,866,,789,,,,,866,',
',866,866,866,,,866,866,939,939,939,939,939,939,,,,939,939,,,,939,,939',
'939,939,939,939,939,939,,,,,,939,939,939,939,939,939,939,,,939,,,,,',
'939,939,,939,939,939,939,939,939,939,939,939,,939,939,939,,939,939,',
'939,939,939,534,534,534,534,534,534,534,534,534,534,534,,534,534,,,534',
'534,,939,,,939,,,939,939,,,939,,939,534,,534,939,534,534,534,534,534',
'534,534,939,534,,,,939,939,939,939,939,939,,,,939,939,,534,,,,,939,',
',939,939,939,,,939,939,825,825,825,825,825,825,,,,825,825,,,,825,,825',
'825,825,825,825,825,825,,,,,,825,825,825,825,825,825,825,,,825,,,,,',
'825,825,,825,825,825,825,825,825,825,825,825,,825,825,825,,825,825,',
'825,825,825,279,279,279,279,279,279,279,279,279,279,279,,279,279,,,279',
'279,,825,,,825,,,825,825,,,825,,825,279,,279,825,279,279,279,279,279',
'279,279,825,279,,,,825,825,825,825,825,825,,,,825,825,,279,,,,,825,',
',825,825,825,,,825,825,304,304,304,304,304,304,,,,304,304,,,,304,,304',
'304,304,304,304,304,304,,,,,,304,304,304,304,304,304,304,,,304,,,,,',
'304,304,,304,304,304,304,304,304,304,304,304,,304,304,304,,304,304,',
'304,304,304,24,24,24,24,24,24,24,24,24,24,24,,24,24,,,24,24,,304,,,304',
',,304,304,,,304,,304,24,,24,304,24,24,24,24,24,24,24,304,24,,,,304,304',
'304,304,304,304,,,,304,304,,24,,,,,304,,,304,304,304,,,304,304,972,972',
'972,972,972,972,,,,972,972,,,,972,,972,972,972,972,972,972,972,,,,,',
'972,972,972,972,972,972,972,,,972,,,,,,972,972,,972,972,972,972,972',
'972,972,972,972,,972,972,972,,972,972,,972,972,972,884,884,884,884,884',
'884,884,884,884,884,884,,884,884,,,884,884,,972,,,972,,,972,972,,,972',
',972,884,,884,972,884,884,884,884,884,884,884,972,884,,,,972,972,972',
'972,972,972,,,,972,972,,884,,,,,972,,,972,972,972,,,972,972,407,407',
'407,407,407,407,,,,407,407,,,,407,,407,407,407,407,407,407,407,,,,,',
'407,407,407,407,407,407,407,,,407,,,,,,407,407,407,407,407,407,407,407',
'407,407,407,407,,407,407,407,,407,407,,407,407,407,441,441,441,441,441',
'441,441,441,441,441,441,,441,441,,,441,441,,407,,,407,,,407,407,,,407',
',407,441,,441,407,441,441,441,441,441,441,441,407,441,,,,407,407,407',
'407,407,407,,,,407,407,,441,,,,,407,,,407,407,407,,,407,407,708,708',
'708,708,708,708,,,,708,708,,,,708,,708,708,708,708,708,708,708,,,,,',
'708,708,708,708,708,708,708,,,708,,,,,,708,708,,708,708,708,708,708',
'708,708,708,708,,708,708,708,,708,708,,708,708,708,887,887,887,887,887',
'887,887,887,887,887,887,,887,887,,,887,887,,708,,,708,,,708,708,,,708',
',708,887,,887,708,887,887,887,887,887,887,887,708,887,,,,708,708,708',
'708,708,708,,,,708,708,,887,,,,,708,,,708,708,708,,,708,708,329,329',
'329,329,329,329,,,,329,329,,,,329,,329,329,329,329,329,329,329,,,,,',
'329,329,329,329,329,329,329,,,329,,,,,,329,329,,329,329,329,329,329',
'329,329,329,329,,329,329,329,,329,329,,329,329,329,782,782,782,782,782',
'782,782,782,782,782,782,,782,782,,,782,782,,329,,,329,,,329,329,,,329',
',329,782,,782,329,782,782,782,782,782,782,782,329,782,,,,329,329,329',
'329,329,329,,,,329,329,,782,,,,,329,,,329,329,329,,,329,329,586,586',
'586,586,586,586,,,,586,586,,,,586,,586,586,586,586,586,586,586,,,,,',
'586,586,586,586,586,586,586,,,586,,,,,,586,586,,586,586,586,586,586',
'586,586,586,586,,586,586,586,,586,586,,586,586,586,480,480,480,480,480',
'480,480,,,480,480,,,,,,480,480,,586,,,586,,,586,586,,,586,,586,480,',
'480,586,480,480,480,480,480,480,480,586,480,,,,586,586,586,586,586,586',
',,,586,586,,,,,,,586,,,586,586,586,,,586,586,765,765,765,765,765,765',
',,,765,765,,,,765,,765,765,765,765,765,765,765,,,,,,765,765,765,765',
'765,765,765,,,765,,,,,,765,765,,765,765,765,765,765,765,765,765,765',
',765,765,765,,765,765,,765,765,765,483,483,483,483,483,483,483,,,483',
'483,,,,,,483,483,,765,,,765,,,765,765,,,765,,765,483,,483,765,483,483',
'483,483,483,483,483,765,483,,,,765,765,765,765,765,765,,,,765,765,,',
',,,,765,,,765,765,765,,,765,765,36,36,36,36,36,36,,,,36,36,,,,36,,36',
'36,36,36,36,36,36,,,,,,36,36,36,36,36,36,36,,,36,,,,,,36,36,,36,36,36',
'36,36,36,36,36,36,,36,36,36,,36,36,,36,36,36,484,484,484,484,484,484',
'484,484,,484,484,,,,,,484,484,,36,,,36,,,36,36,,,36,,36,484,,484,36',
'484,484,484,484,484,484,484,36,484,,,,36,36,36,36,36,36,,,,36,36,,,',
',,,36,,,36,36,36,,,36,36,299,299,299,299,299,299,,,,299,299,,,,299,',
'299,299,299,299,299,299,299,,,,,,299,299,299,299,299,299,299,,,299,',
',,,,299,299,,299,299,299,299,299,299,299,299,299,,299,299,299,,299,299',
',299,299,299,471,471,471,471,471,471,471,,,471,471,,,,,,471,471,,299',
',,299,,,299,299,,,299,,299,471,,471,299,471,471,471,471,471,471,471',
'299,471,,,,299,299,299,299,299,299,,,,299,299,,,,,,,299,,,299,299,299',
',,299,299,758,758,758,758,758,758,,,,758,758,,,,758,,758,758,758,758',
'758,758,758,,,,,,758,758,758,758,758,758,758,,,758,,,,,,758,758,,758',
'758,758,758,758,758,758,758,758,,758,758,758,,758,758,,758,758,758,478',
'478,478,478,478,478,478,,,478,478,,,,,,478,478,,758,,,758,,,758,758',
',,758,,758,478,,478,758,478,478,478,478,478,478,478,758,478,,,,758,758',
'758,758,758,758,,,,758,758,,,,,,,758,,,758,758,758,,,758,758,707,707',
'707,707,707,707,,,,707,707,,,,707,,707,707,707,707,707,707,707,,,,,',
'707,707,707,707,707,707,707,,,707,,,,,,707,707,,707,707,707,707,707',
'707,707,707,707,,707,707,707,,707,707,,707,707,707,479,479,479,479,479',
'479,479,,,479,479,,,,,,479,479,,707,,,707,,,707,707,,,707,,707,479,',
'479,707,479,479,479,479,479,479,479,707,479,,,,707,707,707,707,707,707',
',,,707,707,,,,,,,707,,,707,707,707,,,707,707,810,810,810,810,810,810',
',,,810,810,,,,810,,810,810,810,810,810,810,810,,,,,,810,810,810,810',
'810,810,810,,,810,,,,,,810,810,,810,810,810,810,810,810,810,810,810',
',810,810,810,,810,810,,810,810,810,460,460,460,460,460,460,460,460,460',
'460,460,,460,460,,,460,460,,810,,,810,,,810,810,,,810,,810,460,,460',
'810,460,460,460,460,460,460,460,810,460,,,,810,810,810,810,810,810,',
',,810,810,,,,,,,810,,,810,810,810,,,810,810,2,2,2,2,2,2,,,,2,2,,,,2',
',2,2,2,2,2,2,2,,,,,,2,2,2,2,2,2,2,,,2,,,,,,2,2,2,2,2,2,2,2,2,2,2,2,',
'2,2,2,,2,2,,2,2,2,461,461,461,461,461,461,461,461,461,461,461,,461,461',
',,461,461,,2,,,2,,,2,2,,,2,,2,461,,461,2,461,461,461,461,461,461,461',
'2,461,,,,2,2,2,2,2,2,,,,2,2,,,,,,,2,,,2,2,2,,,2,2,905,905,905,905,905',
'905,,,,905,905,,,,905,,905,905,905,905,905,905,905,,,,,,905,905,905',
'905,905,905,905,,,905,,,,,,905,905,,905,905,905,905,905,905,905,905',
'905,,905,905,905,,905,905,,905,905,905,476,476,476,476,476,476,476,',
',476,476,,,,,,476,476,,905,,,905,,,905,905,,,905,,905,476,,476,905,476',
'476,476,476,476,476,476,905,476,,,,905,905,905,905,905,905,,,,905,905',
',,,,,,905,,,905,905,905,,,905,905,814,814,814,814,814,814,,,,814,814',
',,,814,,814,814,814,814,814,814,814,,,,,,814,814,814,814,814,814,814',
',,814,,,,,,814,814,,814,814,814,814,814,814,814,814,814,,814,814,814',
',814,814,,814,814,814,477,477,477,477,477,477,477,,,477,477,,,,,,477',
'477,,814,,,814,,,814,814,,,814,,814,477,,477,814,477,477,477,477,477',
'477,477,814,477,,,,814,814,814,814,814,814,,,,814,814,,,,,,,814,,,814',
'814,814,,,814,814,209,209,209,209,209,209,,,,209,209,,,,209,,209,209',
'209,209,209,209,209,,,,,,209,209,209,209,209,209,209,,,209,,,,,,209',
'209,,209,209,209,209,209,209,209,209,209,,209,209,209,,209,209,,209',
'209,209,468,,,,,,,,,,,,,,,,468,468,,209,,,209,,470,209,209,,,209,,209',
'468,,468,209,468,468,468,468,470,470,,209,,,,,209,209,209,209,209,209',
',,470,209,209,,470,470,470,470,,209,,,209,209,209,,,209,209,909,909',
'909,909,909,909,,,,909,909,,,,909,,909,909,909,909,909,909,909,,,,,',
'909,909,909,909,909,909,909,,,909,,,,,,909,909,,909,909,909,909,909',
'909,909,909,909,,909,909,909,,909,909,,909,909,909,469,,,,,,,,,,,,,',
',,469,469,,909,,,909,,,909,909,,,909,,909,469,,469,909,469,469,469,469',
',,,909,,,,,909,909,909,909,909,909,,,,909,909,,,,,,,909,,,909,909,909',
',,909,909,244,244,244,,244,,,,244,244,,,,244,,244,244,244,244,244,244',
'244,,,,,,244,244,244,244,244,244,244,,,244,,,,,,,244,,,244,244,244,244',
'244,244,244,244,,244,244,244,,244,244,,244,244,244,,,,,,,,,,,,,,,,,',
',,244,,,244,,,244,244,,,244,,,,,,244,,,,,,,,244,,,,,244,244,244,244',
'244,244,,,,244,244,,,,,,,244,,,244,244,244,,,244,244,38,38,38,,38,,',
',38,38,,,,38,,38,38,38,38,38,38,38,,,,,,38,38,38,38,38,38,38,,,38,,',
',,,,38,,,38,38,38,38,38,38,38,38,,38,38,38,,38,38,,,,38,,,,,,,,,,,,',
',,,,,,,38,,,38,,,38,38,,,38,,,,,,,,,,,,,,,,,,,38,38,38,38,38,38,,,,38',
'38,,,,38,,,38,,,38,38,38,,,38,38,854,854,854,,854,,,,854,854,,,,854',
',854,854,854,854,854,854,854,,,,,,854,854,854,854,854,854,854,,,854',
',,,,,,854,,,854,854,854,854,854,854,854,854,,854,854,854,,854,854,,854',
'854,854,,,,,,,,,,,,,,,,,,,,854,,,854,,,854,854,,,854,,,,,,854,,,,,,',
',854,,,,,854,854,854,854,854,854,,,,854,854,,,,,,,854,,,854,854,854',
',,854,854,746,746,746,,746,,,,746,746,,,,746,,746,746,746,746,746,746',
'746,,,,,,746,746,746,746,746,746,746,,,746,,,,,,,746,,,746,746,746,746',
'746,746,746,746,,746,746,746,,746,746,,746,746,746,,,,,,,,,,,,,,,,,',
',,746,,,746,,,746,746,,,746,,,,,,746,,,,,,,,746,,,,,746,746,746,746',
'746,746,,,,746,746,,,,,,,746,,,746,746,746,,,746,746,256,256,256,,256',
',,,256,256,,,,256,,256,256,256,256,256,256,256,,,,,,256,256,256,256',
'256,256,256,,,256,,,,,,,256,,,256,256,256,256,256,256,256,256,,256,256',
'256,,256,256,,256,256,256,,,,,,,,,,,,,,,,,,,,256,,,256,,,256,256,,,256',
',,,,,256,,,,,,,,256,,,,,256,256,256,256,256,256,,,,256,256,,,,,,,256',
',,256,256,256,,,256,256,684,684,684,,684,,,,684,684,,,,684,,684,684',
'684,684,684,684,684,,,,,,684,684,684,684,684,684,684,,,684,,,,,,,684',
',,684,684,684,684,684,684,684,684,,684,684,684,,684,684,,,,684,,,,,',
',,,,,,,,,,,,,,684,,,684,,,684,684,,,684,,,,,,,,,,,,,,,,,,,684,684,684',
'684,684,684,,,,684,684,,,,,,,684,,,684,684,684,,,684,684,303,303,303',
',303,,,,303,303,,,,303,,303,303,303,303,303,303,303,,,,,,303,303,303',
'303,303,303,303,,,303,,,,,,,303,,,303,303,303,303,303,303,303,303,,303',
'303,303,,303,303,,,,303,,,,,,,,,,,,,,,,,,,,303,,,303,,,303,303,,,303',
',,,,,,,,,,,,,,,,,,303,303,303,303,303,303,,,,303,303,,,,303,,,303,,',
'303,303,303,,,303,303,867,867,867,,867,,,,867,867,,,,867,,867,867,867',
'867,867,867,867,,,,,,867,867,867,867,867,867,867,,,867,,,,,,,867,,,867',
'867,867,867,867,867,867,867,,867,867,867,,867,867,,867,867,867,,,,,',
',,,,,,,,,,,,,,867,,,867,,,867,867,,,867,,,,,,867,,,,,,,,867,,,,,867',
'867,867,867,867,867,,,,867,867,,,,,,,867,,,867,867,867,,,867,867,681',
'681,681,,681,,,,681,681,,,,681,,681,681,681,681,681,681,681,,,,,,681',
'681,681,681,681,681,681,,,681,,,,,,,681,,,681,681,681,681,681,681,681',
'681,,681,681,681,,681,681,,681,681,681,,,,,,,,,,,,,,,,,,,,681,,,681',
',,681,681,,,681,,,,,,681,,,,,,,,681,,,,,681,681,681,681,681,681,,,,681',
'681,,,,,,,681,,,681,681,681,,,681,681,678,678,678,,678,,,,678,678,,',
',678,,678,678,678,678,678,678,678,,,,,,678,678,678,678,678,678,678,',
',678,,,,,,,678,,,678,678,678,678,678,678,678,678,,678,678,678,,678,678',
',678,678,678,,,,,,,,,,,,,,,,,,,,678,,,678,,,678,678,,,678,,,,,,678,',
',,,,,,678,,,,,678,678,678,678,678,678,,,,678,678,,,,,,,678,,,678,678',
'678,,,678,678,243,243,243,,243,,,,243,243,,,,243,,243,243,243,243,243',
'243,243,,,,,,243,243,243,243,243,243,243,,,243,,,,,,,243,,,243,243,243',
'243,243,243,243,243,,243,243,243,,243,243,,243,243,243,,,,,,,,,,,,,',
',,,,,,243,,,243,,,243,243,,,243,,,,,,243,,,,,,,,243,,,,,243,243,243',
'243,243,243,,,,243,243,,,,,,,243,,,243,243,243,,,243,243,242,242,242',
',242,,,,242,242,,,,242,,242,242,242,242,242,242,242,,,,,,242,242,242',
'242,242,242,242,,,242,,,,,,,242,,,242,242,242,242,242,242,242,242,,242',
'242,242,,242,242,,242,242,242,,,,,,,,,,,,,,,,,,,,242,,,242,,,242,242',
',,242,,,,,,242,,,,,,,,242,,,,,242,242,242,242,242,242,,,,242,242,,,',
',,,242,,,242,242,242,,,242,242,241,241,241,,241,,,,241,241,,,,241,,241',
'241,241,241,241,241,241,,,,,,241,241,241,241,241,241,241,,,241,,,,,',
',241,,,241,241,241,241,241,241,241,241,,241,241,241,,241,241,,241,241',
'241,,,,,,,,,,,,,,,,,,,,241,,,241,,,241,241,,,241,,,,,,241,,,,,,,,241',
',,,,241,241,241,241,241,241,,,,241,241,,,,,,,241,,,241,241,241,,,241',
'241,240,240,240,,240,,,,240,240,,,,240,,240,240,240,240,240,240,240',
',,,,,240,240,240,240,240,240,240,,,240,,,,,,,240,,,240,240,240,240,240',
'240,240,240,,240,240,240,,240,240,,240,240,240,,,,,,,,,,,,,,,,,,,,240',
',,240,,,240,240,,,240,,,,,,240,,,,,,,,240,,,,,240,240,240,240,240,240',
',,,240,240,,,,,,,240,,,240,240,240,,,240,240,885,885,885,,885,,,,885',
'885,,,,885,,885,885,885,885,885,885,885,,,,,,885,885,885,885,885,885',
'885,,,885,,,,,,,885,,,885,885,885,885,885,885,885,885,885,885,885,885',
',885,885,,885,885,885,,,,,,,,,,,,,,,,,,,,885,,,885,,,885,885,,,885,',
',,885,,885,,,,,,,,885,,,,,885,885,885,885,885,885,,,,885,885,,,,,,,885',
',885,885,885,885,,,885,885,886,886,886,,886,,,,886,886,,,,886,,886,886',
'886,886,886,886,886,,,,,,886,886,886,886,886,886,886,,,886,,,,,,,886',
',,886,886,886,886,886,886,886,886,,886,886,886,,886,886,,886,886,886',
',,,,,,,,,,,,,,,,,,,886,,,886,,,886,886,,,886,,,,,,886,,,,,,,,886,,,',
',886,886,886,886,886,886,,,,886,886,,,,,,,886,,,886,886,886,,,886,886',
'239,239,239,,239,,,,239,239,,,,239,,239,239,239,239,239,239,239,,,,',
',239,239,239,239,239,239,239,,,239,,,,,,,239,,,239,239,239,239,239,239',
'239,239,,239,239,239,,239,239,,239,239,239,,,,,,,,,,,,,,,,,,,,239,,',
'239,,,239,239,,,239,,,,,,239,,,,,,,,239,,,,,239,239,239,239,239,239',
',,,239,239,,,,,,,239,,,239,239,239,,,239,239,654,654,654,,654,,,,654',
'654,,,,654,,654,654,654,654,654,654,654,,,,,,654,654,654,654,654,654',
'654,,,654,,,,,,,654,,,654,654,654,654,654,654,654,654,,654,654,654,',
'654,654,,654,654,654,,,,,,,,,,,,,,,,,,,,654,,,654,,,654,654,,,654,,',
',,,654,,,,,,,,654,,,,,654,654,654,654,654,654,,,,654,654,,,,,,,654,',
',654,654,654,,,654,654,653,653,653,,653,,,,653,653,,,,653,,653,653,653',
'653,653,653,653,,,,,,653,653,653,653,653,653,653,,,653,,,,,,,653,,,653',
'653,653,653,653,653,653,653,,653,653,653,,653,653,,653,653,653,,,,,',
',,,,,,,,,,,,,,653,,,653,,,653,653,,,653,,,,,,653,,,,,,,,653,,,,,653',
'653,653,653,653,653,,,,653,653,,,,,,,653,,,653,653,653,,,653,653,238',
'238,238,,238,,,,238,238,,,,238,,238,238,238,238,238,238,238,,,,,,238',
'238,238,238,238,238,238,,,238,,,,,,,238,,,238,238,238,238,238,238,238',
'238,,238,238,238,,238,238,,238,238,238,,,,,,,,,,,,,,,,,,,,238,,,238',
',,238,238,,,238,,,,,,238,,,,,,,,238,,,,,238,238,238,238,238,238,,,,238',
'238,,,,,,,238,,,238,238,238,,,238,238,650,650,650,,650,,,,650,650,,',
',650,,650,650,650,650,650,650,650,,,,,,650,650,650,650,650,650,650,',
',650,,,,,,,650,,,650,650,650,650,650,650,650,650,,650,650,650,,650,650',
',650,650,650,,,,,,,,,,,,,,,,,,,,650,,,650,,,650,650,,,650,,,,,,650,',
',,,,,,650,,,,,650,650,650,650,650,650,,,,650,650,,,,,,,650,,,650,650',
'650,,,650,650,901,901,901,,901,,,,901,901,,,,901,,901,901,901,901,901',
'901,901,,,,,,901,901,901,901,901,901,901,,,901,,,,,,,901,,,901,901,901',
'901,901,901,901,901,,901,901,901,,901,901,,,,901,,,,,,,,,,,,,,,,,,,',
'901,,,901,,,901,901,,,901,,,,,,,,,,,,,,,,,,,901,901,901,901,901,901',
',,,901,901,,,,,,,901,,,901,901,901,,,901,901,649,649,649,,649,,,,649',
'649,,,,649,,649,649,649,649,649,649,649,,,,,,649,649,649,649,649,649',
'649,,,649,,,,,,,649,,,649,649,649,649,649,649,649,649,,649,649,649,',
'649,649,,649,649,649,,,,,,,,,,,,,,,,,,,,649,,,649,,,649,649,,,649,,',
',,,649,,,,,,,,649,,,,,649,649,649,649,649,649,,,,649,649,,,,,,,649,',
',649,649,649,,,649,649,237,237,237,,237,,,,237,237,,,,237,,237,237,237',
'237,237,237,237,,,,,,237,237,237,237,237,237,237,,,237,,,,,,,237,,,237',
'237,237,237,237,237,237,237,,237,237,237,,237,237,,237,237,237,,,,,',
',,,,,,,,,,,,,,237,,,237,,,237,237,,,237,,,,,,237,,,,,,,,237,,,,,237',
'237,237,237,237,237,,,,237,237,,,,,,,237,,,237,237,237,,,237,237,644',
'644,644,,644,,,,644,644,,,,644,,644,644,644,644,644,644,644,,,,,,644',
'644,644,644,644,644,644,,,644,,,,,,,644,,,644,644,644,644,644,644,644',
'644,,644,644,644,,644,644,,644,644,644,,,,,,,,,,,,,,,,,,,,644,,,644',
',,644,644,,,644,,,,,,644,,,,,,,,644,,,,,644,644,644,644,644,644,,,,644',
'644,,,,,,,644,,,644,644,644,,,644,644,643,643,643,,643,,,,643,643,,',
',643,,643,643,643,643,643,643,643,,,,,,643,643,643,643,643,643,643,',
',643,,,,,,,643,,,643,643,643,643,643,643,643,643,,643,643,643,,643,643',
',643,643,643,,,,,,,,,,,,,,,,,,,,643,,,643,,,643,643,,,643,,,,,,643,',
',,,,,,643,,,,,643,643,643,643,643,643,,,,643,643,,,,,,,643,,,643,643',
'643,,,643,643,913,913,913,,913,,,,913,913,,,,913,,913,913,913,913,913',
'913,913,,,,,,913,913,913,913,913,913,913,,,913,,,,,,,913,,,913,913,913',
'913,913,913,913,913,,913,913,913,,913,913,,,,913,,,,,,,,,,,,,,,,,,,',
'913,,,913,,,913,913,,,913,,,,,,,,,,,,,,,,,,,913,913,913,913,913,913',
',,,913,913,,,,,,,913,,,913,913,913,,,913,913,642,642,642,,642,,,,642',
'642,,,,642,,642,642,642,642,642,642,642,,,,,,642,642,642,642,642,642',
'642,,,642,,,,,,,642,,,642,642,642,642,642,642,642,642,642,642,642,642',
',642,642,,642,642,642,,,,,,,,,,,,,,,,,,,,642,,,642,,,642,642,,,642,',
',,642,,642,,,,,,,,642,,,,,642,642,642,642,642,642,,,,642,642,,,,,,,642',
',642,642,642,642,,,642,642,641,641,641,,641,,,,641,641,,,,641,,641,641',
'641,641,641,641,641,,,,,,641,641,641,641,641,641,641,,,641,,,,,,,641',
',,641,641,641,641,641,641,641,641,641,641,641,641,,641,641,,641,641',
'641,,,,,,,,,,,,,,,,,,,,641,,,641,,,641,641,,,641,,641,,641,,641,,,,',
',,,641,,,,,641,641,641,641,641,641,,,,641,641,,,,,,,641,,641,641,641',
'641,,,641,641,236,236,236,,236,,,,236,236,,,,236,,236,236,236,236,236',
'236,236,,,,,,236,236,236,236,236,236,236,,,236,,,,,,,236,,,236,236,236',
'236,236,236,236,236,,236,236,236,,236,236,,236,236,236,,,,,,,,,,,,,',
',,,,,,236,,,236,,,236,236,,,236,,,,,,236,,,,,,,,236,,,,,236,236,236',
'236,236,236,,,,236,236,,,,,,,236,,,236,236,236,,,236,236,638,638,638',
',638,,,,638,638,,,,638,,638,638,638,638,638,638,638,,,,,,638,638,638',
'638,638,638,638,,,638,,,,,,,638,,,638,638,638,638,638,638,638,638,,638',
'638,638,,638,638,,638,638,638,,,,,,,,,,,,,,,,,,,,638,,,638,,,638,638',
',,638,,,,,,638,,,,,,,,638,,,,,638,638,638,638,638,638,,,,638,638,,,',
',,,638,,,638,638,638,,,638,638,637,637,637,,637,,,,637,637,,,,637,,637',
'637,637,637,637,637,637,,,,,,637,637,637,637,637,637,637,,,637,,,,,',
',637,,,637,637,637,637,637,637,637,637,,637,637,637,,637,637,,637,637',
'637,,,,,,,,,,,,,,,,,,,,637,,,637,,,637,637,,,637,,637,,,,637,,,,,,,',
'637,,,,,637,637,637,637,637,637,,,,637,637,,,,,,,637,,,637,637,637,',
',637,637,45,45,45,,45,,,,45,45,,,,45,,45,45,45,45,45,45,45,,,,,,45,45',
'45,45,45,45,45,,,45,,,,,,,45,,,45,45,45,45,45,45,45,45,,45,45,45,,45',
'45,,45,45,45,,,,,,,,,,,,,,,,,,,,45,,,45,,,45,45,,,45,,,,,,45,,,,,,,',
'45,,,,,45,45,45,45,45,45,,,,45,45,,,,,,,45,,,45,45,45,,,45,45,320,320',
'320,,320,,,,320,320,,,,320,,320,320,320,320,320,320,320,,,,,,320,320',
'320,320,320,320,320,,,320,,,,,,,320,,,320,320,320,320,320,320,320,320',
',320,320,320,,320,320,,,,320,,,,,,,,,,,,,,,,,,,,320,,,320,,,320,320',
',,320,,,,,,,,,,,,,,,,,,,320,320,320,320,320,320,,,,320,320,,,,,,,320',
',,320,320,320,,,320,320,938,938,938,,938,,,,938,938,,,,938,,938,938',
'938,938,938,938,938,,,,,,938,938,938,938,938,938,938,,,938,,,,,,,938',
',,938,938,938,938,938,938,938,938,,938,938,938,,938,938,,938,938,938',
',,,,,,,,,,,,,,,,,,,938,,,938,,,938,938,,,938,,938,,,,938,,,,,,,,938',
',,,,938,938,938,938,938,938,,,,938,938,,,,,,,938,,,938,938,938,,,938',
'938,233,233,233,,233,,,,233,233,,,,233,,233,233,233,233,233,233,233',
',,,,,233,233,233,233,233,233,233,,,233,,,,,,,233,,,233,233,233,233,233',
'233,233,233,,233,233,233,,233,233,,233,233,233,,,,,,,,,,,,,,,,,,,,233',
',,233,,,233,233,,,233,,,,,,233,,,,,,,,233,,,,,233,233,233,233,233,233',
',,,233,233,,,,,,,233,,,233,233,233,,,233,233,608,608,608,,608,,,,608',
'608,,,,608,,608,608,608,608,608,608,608,,,,,,608,608,608,608,608,608',
'608,,,608,,,,,,,608,,,608,608,608,608,608,608,608,608,,608,608,608,',
'608,608,,608,608,608,,,,,,,,,,,,,,,,,,,,608,,,608,,,608,608,,,608,,',
',,,608,,,,,,,,608,,,,,608,608,608,608,608,608,,,,608,608,,,,,,,608,',
',608,608,608,,,608,608,604,604,604,,604,,,,604,604,,,,604,,604,604,604',
'604,604,604,604,,,,,,604,604,604,604,604,604,604,,,604,,,,,,,604,,,604',
'604,604,604,604,604,604,604,,604,604,604,,604,604,,604,604,604,,,,,',
',,,,,,,,,,,,,,604,,,604,,,604,604,,,604,,,,,,604,,,,,,,,604,,,,,604',
'604,604,604,604,604,,,,604,604,,,,,,,604,,,604,604,604,,,604,604,46',
'46,46,,46,,,,46,46,,,,46,,46,46,46,46,46,46,46,,,,,,46,46,46,46,46,46',
'46,,,46,,,,,,,46,,,46,46,46,46,46,46,46,46,,46,46,46,,46,46,,46,46,46',
',,,,,,,,,,,,,,,,,,,46,,,46,,,46,46,,,46,,,,,,46,,,,,,,,46,,,,,46,46',
'46,46,46,46,,,,46,46,,,,,,,46,,,46,46,46,,,46,46,47,47,47,,47,,,,47',
'47,,,,47,,47,47,47,47,47,47,47,,,,,,47,47,47,47,47,47,47,,,47,,,,,,',
'47,,,47,47,47,47,47,47,47,47,,47,47,47,,47,47,,47,47,47,,,,,,,,,,,,',
',,,,,,,47,,,47,,,47,47,,,47,,,,,,47,,,,,,,,47,,,,,47,47,47,47,47,47',
',,,47,47,,,,,,,47,,,47,47,47,,,47,47,328,328,328,,328,,,,328,328,,,',
'328,,328,328,328,328,328,328,328,,,,,,328,328,328,328,328,328,328,,',
'328,,,,,,,328,,,328,328,328,328,328,328,328,328,,328,328,328,,328,328',
',328,328,328,,,,,,,,,,,,,,,,,,,,328,,,328,328,,328,328,,,328,,,,,,328',
',,,,,,,328,,,,,328,328,328,328,328,328,,,,328,328,,,,,,,328,,,328,328',
'328,,,328,328,359,359,359,,359,,,,359,359,,,,359,,359,359,359,359,359',
'359,359,,,,,,359,359,359,359,359,359,359,,,359,,,,,,,359,,,359,359,359',
'359,359,359,359,359,,359,359,359,,359,359,,,,359,,,,,,,,,,,,,,,,,,,',
'359,,,359,,,359,359,,,359,,,,,,,,,,,,,,,,,,,359,359,359,359,359,359',
',,,359,359,,,,,,,359,,,359,359,359,,,359,359,8,8,8,8,8,,,,8,8,,,,8,',
'8,8,8,8,8,8,8,,,,,,8,8,8,8,8,8,8,,,8,,,,,,8,8,8,8,8,8,8,8,8,8,8,8,,8',
'8,8,,8,8,,8,8,8,,,,,,,,,,,,,,,,,,,,8,,,8,,,8,8,,,8,,8,,,,8,,,,,,,,8',
',,,,8,8,8,8,8,8,,,,8,8,,,,,,,8,,,8,8,8,,,8,8,417,417,417,,417,,,,417',
'417,,,,417,,417,417,417,417,417,417,417,,,,,,417,417,417,417,417,417',
'417,,,417,,,,,,,417,,,417,417,417,417,417,417,417,417,,417,417,417,',
'417,417,,417,417,417,,,,,,,,,,,,,,,,,,,,417,,,417,,,417,417,,,417,,',
',,,417,,,,,,,,417,,,,,417,417,417,417,417,417,,,,417,417,,,,,,,417,',
',417,417,417,,,417,417,254,254,254,,254,,,,254,254,,,,254,,254,254,254',
'254,254,254,254,,,,,,254,254,254,254,254,254,254,,,254,,,,,,,254,,,254',
'254,254,254,254,254,254,254,,254,254,254,,254,254,,254,254,254,,,,,',
',,,,,,,,,,,,,,254,,,254,,,254,254,,,254,,,,,,254,,,,,,,,254,,,,,254',
'254,254,254,254,254,,,,254,254,,,,,,,254,,,254,254,254,,,254,254,253',
'253,253,,253,,,,253,253,,,,253,,253,253,253,253,253,253,253,,,,,,253',
'253,253,253,253,253,253,,,253,,,,,,,253,,,253,253,253,253,253,253,253',
'253,,253,253,253,,253,253,,253,253,253,,,,,,,,,,,,,,,,,,,,253,,,253',
',,253,253,,,253,,,,,,253,,,,,,,,253,,,,,253,253,253,253,253,253,,,,253',
'253,,,,,,,253,,,253,253,253,,,253,253,252,252,252,,252,,,,252,252,,',
',252,,252,252,252,252,252,252,252,,,,,,252,252,252,252,252,252,252,',
',252,,,,,,,252,,,252,252,252,252,252,252,252,252,,252,252,252,,252,252',
',252,252,252,,,,,,,,,,,,,,,,,,,,252,,,252,,,252,252,,,252,,,,,,252,',
',,,,,,252,,,,,252,252,252,252,252,252,,,,252,252,,,,,,,252,,,252,252',
'252,,,252,252,720,720,720,,720,,,,720,720,,,,720,,720,720,720,720,720',
'720,720,,,,,,720,720,720,720,720,720,720,,,720,,,,,,,720,,,720,720,720',
'720,720,720,720,720,,720,720,720,,720,720,,720,720,720,,,,,,,,,,,,,',
',,,,,,720,,,720,,,720,720,,,720,,,,,,720,,,,,,,,720,,,,,720,720,720',
'720,720,720,,,,720,720,,,,,,,720,,,720,720,720,,,720,720,251,251,251',
',251,,,,251,251,,,,251,,251,251,251,251,251,251,251,,,,,,251,251,251',
'251,251,251,251,,,251,,,,,,,251,,,251,251,251,251,251,251,251,251,,251',
'251,251,,251,251,,251,251,251,,,,,,,,,,,,,,,,,,,,251,,,251,,,251,251',
',,251,,,,,,251,,,,,,,,251,,,,,251,251,251,251,251,251,,,,251,251,,,',
',,,251,,,251,251,251,,,251,251,257,257,257,,257,,,,257,257,,,,257,,257',
'257,257,257,257,257,257,,,,,,257,257,257,257,257,257,257,,,257,,,,,',
',257,,,257,257,257,257,257,257,257,257,,257,257,257,,257,257,,257,257',
'257,,,,,,,,,,,,,,,,,,,,257,,,257,,,257,257,,,257,,,,,,257,,,,,,,,257',
',,,,257,257,257,257,257,257,,,,257,257,,,,,,,257,,,257,257,257,,,257',
'257,774,774,774,,774,,,,774,774,,,,774,,774,774,774,774,774,774,774',
',,,,,774,774,774,774,774,774,774,,,774,,,,,,,774,,,774,774,774,774,774',
'774,774,774,,774,774,774,,774,774,,774,774,774,,,,,,,,,,,,,,,,,,,,774',
',,774,,,774,774,,,774,,,,,,774,,,,,,,,774,,,,,774,774,774,774,774,774',
',,,774,774,,,,,,,774,,,774,774,774,,,774,774,776,776,776,,776,,,,776',
'776,,,,776,,776,776,776,776,776,776,776,,,,,,776,776,776,776,776,776',
'776,,,776,,,,,,,776,,,776,776,776,776,776,776,776,776,,776,776,776,',
'776,776,,776,776,776,,,,,,,,,,,,,,,,,,,,776,,,776,,,776,776,,,776,,',
',,,776,,,,,,,,776,,,,,776,776,776,776,776,776,,,,776,776,,,,,,,776,',
',776,776,776,,,776,776,258,258,258,,258,,,,258,258,,,,258,,258,258,258',
'258,258,258,258,,,,,,258,258,258,258,258,258,258,,,258,,,,,,,258,,,258',
'258,258,258,258,258,258,258,,258,258,258,,258,258,,258,258,258,,,,,',
',,,,,,,,,,,,,,258,,,258,,,258,258,,,258,,,,,,258,,,,,,,,258,,,,,258',
'258,258,258,258,258,,,,258,258,,,,,,,258,,,258,258,258,,,258,258,700',
'700,700,,700,,,,700,700,,,,700,,700,700,700,700,700,700,700,,,,,,700',
'700,700,700,700,700,700,,,700,,,,,,,700,,,700,700,700,700,700,700,700',
'700,,700,700,700,,700,700,,700,700,700,,,,,,,,,,,,,,,,,,,,700,,,700',
',,700,700,,,700,,700,,,,700,,,,,,,,700,,,,,700,700,700,700,700,700,',
',,700,700,,,,,,,700,,,700,700,700,,,700,700,250,250,250,,250,,,,250',
'250,,,,250,,250,250,250,250,250,250,250,,,,,,250,250,250,250,250,250',
'250,,,250,,,,,,,250,,,250,250,250,250,250,250,250,250,,250,250,250,',
'250,250,,250,250,250,,,,,,,,,,,,,,,,,,,,250,,,250,,,250,250,,,250,,',
',,,250,,,,,,,,250,,,,,250,250,250,250,250,250,,,,250,250,,,,,,,250,',
',250,250,250,,,250,250,249,249,249,,249,,,,249,249,,,,249,,249,249,249',
'249,249,249,249,,,,,,249,249,249,249,249,249,249,,,249,,,,,,,249,,,249',
'249,249,249,249,249,249,249,,249,249,249,,249,249,,249,249,249,,,,,',
',,,,,,,,,,,,,,249,,,249,,,249,249,,,249,,,,,,249,,,,,,,,249,,,,,249',
'249,249,249,249,249,,,,249,249,,,,,,,249,,,249,249,249,,,249,249,695',
'695,695,,695,,,,695,695,,,,695,,695,695,695,695,695,695,695,,,,,,695',
'695,695,695,695,695,695,,,695,,,,,,,695,,,695,695,695,695,695,695,695',
'695,,695,695,695,,695,695,,,,695,,,,,,,,,,,,,,,,,,,,695,,,695,,,695',
'695,,,695,,,,,,,,,,,,,,,,,,,695,695,695,695,695,695,,,,695,695,,,,,',
',695,,,695,695,695,,,695,695,248,248,248,,248,,,,248,248,,,,248,,248',
'248,248,248,248,248,248,,,,,,248,248,248,248,248,248,248,,,248,,,,,',
',248,,,248,248,248,248,248,248,248,248,,248,248,248,,248,248,,248,248',
'248,,,,,,,,,,,,,,,,,,,,248,,,248,,,248,248,,,248,,,,,,248,,,,,,,,248',
',,,,248,248,248,248,248,248,,,,248,248,,,,,,,248,,,248,248,248,,,248',
'248,790,790,790,,790,,,,790,790,,,,790,,790,790,790,790,790,790,790',
',,,,,790,790,790,790,790,790,790,,,790,,,,,,,790,,,790,790,790,790,790',
'790,790,790,,790,790,790,,790,790,,790,790,790,,,,,,,,,,,,,,,,,,,,790',
',,790,,,790,790,,,790,,,,,,790,,,,,,,,790,,,,,790,790,790,790,790,790',
',,,790,790,,,,,,,790,,,790,790,790,,,790,790,791,791,791,,791,,,,791',
'791,,,,791,,791,791,791,791,791,791,791,,,,,,791,791,791,791,791,791',
'791,,,791,,,,,,,791,,,791,791,791,791,791,791,791,791,,791,791,791,',
'791,791,,791,791,791,,,,,,,,,,,,,,,,,,,,791,,,791,,,791,791,,,791,,',
',,,791,,,,,,,,791,,,,,791,791,791,791,791,791,,,,791,791,,,,,,,791,',
',791,791,791,,,791,791,792,792,792,,792,,,,792,792,,,,792,,792,792,792',
'792,792,792,792,,,,,,792,792,792,792,792,792,792,,,792,,,,,,,792,,,792',
'792,792,792,792,792,792,792,,792,792,792,,792,792,,792,792,792,,,,,',
',,,,,,,,,,,,,,792,,,792,,,792,792,,,792,,,,,,792,,,,,,,,792,,,,,792',
'792,792,792,792,792,,,,792,792,,,,,,,792,,,792,792,792,,,792,792,793',
'793,793,,793,,,,793,793,,,,793,,793,793,793,793,793,793,793,,,,,,793',
'793,793,793,793,793,793,,,793,,,,,,,793,,,793,793,793,793,793,793,793',
'793,,793,793,793,,793,793,,793,793,793,,,,,,,,,,,,,,,,,,,,793,,,793',
',,793,793,,,793,,,,,,793,,,,,,,,793,,,,,793,793,793,793,793,793,,,,793',
'793,,,,,,,793,,,793,793,793,,,793,793,247,247,247,,247,,,,247,247,,',
',247,,247,247,247,247,247,247,247,,,,,,247,247,247,247,247,247,247,',
',247,,,,,,,247,,,247,247,247,247,247,247,247,247,,247,247,247,,247,247',
',247,247,247,,,,,,,,,,,,,,,,,,,,247,,,247,,,247,247,,,247,,,,,,247,',
',,,,,,247,,,,,247,247,247,247,247,247,,,,247,247,,,,,,,247,,,247,247',
'247,,,247,247,795,795,795,,795,,,,795,795,,,,795,,795,795,795,795,795',
'795,795,,,,,,795,795,795,795,795,795,795,,,795,,,,,,,795,,,795,795,795',
'795,795,795,795,795,,795,795,795,,795,795,,795,795,795,,,,,,,,,,,,,',
',,,,,,795,,,795,,,795,795,,,795,,,,,,795,,,,,,,,795,,,,,795,795,795',
'795,795,795,,,,795,795,,,,,,,795,,,795,795,795,,,795,795,259,259,259',
',259,,,,259,259,,,,259,,259,259,259,259,259,259,259,,,,,,259,259,259',
'259,259,259,259,,,259,,,,,,,259,,,259,259,259,259,259,259,259,259,,259',
'259,259,,259,259,,259,259,259,,,,,,,,,,,,,,,,,,,,259,,,259,,,259,259',
',,259,,,,,,259,,,,,,,,259,,,,,259,259,259,259,259,259,,,,259,259,,,',
',,,259,,,259,259,259,,,259,259,260,260,260,,260,,,,260,260,,,,260,,260',
'260,260,260,260,260,260,,,,,,260,260,260,260,260,260,260,,,260,,,,,',
',260,,,260,260,260,260,260,260,260,260,,260,260,260,,260,260,,260,260',
'260,,,,,,,,,,,,,,,,,,,,260,,,260,,,260,260,,,260,,,,,,260,,,,,,,,260',
',,,,260,260,260,260,260,260,,,,260,260,,,,,,,260,,,260,260,260,,,260',
'260,261,261,261,,261,,,,261,261,,,,261,,261,261,261,261,261,261,261',
',,,,,261,261,261,261,261,261,261,,,261,,,,,,,261,,,261,261,261,261,261',
'261,261,261,,261,261,261,,261,261,,261,261,261,,,,,,,,,,,,,,,,,,,,261',
',,261,,,261,261,,,261,,,,,,261,,,,,,,,261,,,,,261,261,261,261,261,261',
',,,261,261,,,,,,,261,,,261,261,261,,,261,261,268,268,268,,268,,,,268',
'268,,,,268,,268,268,268,268,268,268,268,,,,,,268,268,268,268,268,268',
'268,,,268,,,,,,,268,,,268,268,268,268,268,268,268,268,268,268,268,268',
',268,268,,268,268,268,,,,,,,,,,,,,,,,,,,,268,,,268,,,268,268,,,268,',
'268,,268,,268,,,,,,,,268,,,,,268,268,268,268,268,268,,,,268,268,,,,',
',,268,,268,268,268,268,,,268,268,274,274,274,,274,,,,274,274,,,,274',
',274,274,274,274,274,274,274,,,,,,274,274,274,274,274,274,274,,,274',
',,,,,,274,,,274,274,274,274,274,274,274,274,274,274,274,274,,274,274',
',274,274,274,,,,,,,,,,,,,,,,,,,,274,,,274,,,274,274,,,274,,274,,274',
',274,,,,,,,,274,,,,,274,274,274,274,274,274,,,,274,274,,,,,,,274,,274',
'274,274,274,,,274,274,277,277,277,,277,,,,277,277,,,,277,,277,277,277',
'277,277,277,277,,,,,,277,277,277,277,277,277,277,,,277,,,,,,,277,,,277',
'277,277,277,277,277,277,277,277,277,277,277,,277,277,,277,277,277,,',
',,,,,,,,,,,,,,,,,277,,,277,,,277,277,,,277,,277,,277,,277,,,,,,,,277',
',,,,277,277,277,277,277,277,,,,277,277,277,,,,,,277,,277,277,277,277',
',,277,277,807,807,807,,807,,,,807,807,,,,807,,807,807,807,807,807,807',
'807,,,,,,807,807,807,807,807,807,807,,,807,,,,,,,807,,,807,807,807,807',
'807,807,807,807,,807,807,807,,807,807,,,,807,,,,,,,,,,,,,,,,,,,,807',
',,807,,,807,807,,,807,,,,,,,,,,,,,,,,,,,807,807,807,807,807,807,,,,807',
'807,,,,,,,807,,,807,807,807,,,807,807,246,246,246,,246,,,,246,246,,',
',246,,246,246,246,246,246,246,246,,,,,,246,246,246,246,246,246,246,',
',246,,,,,,,246,,,246,246,246,246,246,246,246,246,,246,246,246,,246,246',
',246,246,246,,,,,,,,,,,,,,,,,,,,246,,,246,,,246,246,,,246,,,,,,246,',
',,,,,,246,,,,,246,246,246,246,246,246,,,,246,246,,,,,,,246,,,246,246',
'246,,,246,246,32,32,32,,32,,,,32,32,,,,32,,32,32,32,32,32,32,32,,,,',
',32,32,32,32,32,32,32,,,32,,,,,,,32,,,32,32,32,32,32,32,32,32,32,32',
'32,32,,32,32,,32,32,32,,,,,,,,,,,,,,,,,,,,32,,,32,,,32,32,,,32,,32,',
'32,,32,,,,,,,,32,,,,,32,32,32,32,32,32,,,,32,32,,,,,,,32,,32,32,32,32',
',,32,32,33,33,33,,33,,,,33,33,,,,33,,33,33,33,33,33,33,33,,,,,,33,33',
'33,33,33,33,33,,,33,,,,,,,33,,,33,33,33,33,33,33,33,33,33,33,33,33,',
'33,33,,33,33,33,,,,,,,,,,,,,,,,,,,,33,,,33,,,33,33,,,33,,33,,33,,33',
',,,,,,,33,,,,,33,33,33,33,33,33,,,,33,33,,,,,,,33,,33,33,33,33,,,33',
'33,284,284,284,,284,,,,284,284,,,,284,,284,284,284,284,284,284,284,',
',,,,284,284,284,284,284,284,284,,,284,,,,,,,284,,,284,284,284,284,284',
'284,284,284,,284,284,284,,284,284,,284,284,284,,,,,,,,,,,,,,,,,,,,284',
',,284,,,284,284,,,284,,,,,,284,,,,,,,,284,,,,,284,284,284,284,284,284',
',,,284,284,,,,,,,284,,,284,284,284,,,284,284,34,34,34,,34,,,,34,34,',
',,34,,34,34,34,34,34,34,34,,,,,,34,34,34,34,34,34,34,,,34,,,,,,,34,',
',34,34,34,34,34,34,34,34,34,34,34,34,,34,34,,34,34,34,,,,,,,,,,,,,,',
',,,,,34,,,34,,,34,34,,,34,,34,,34,,34,,,,,,,,34,,,,,34,34,34,34,34,34',
',,,34,34,,,,,,,34,,34,34,34,34,,,34,34,286,286,286,,286,,,,286,286,',
',,286,,286,286,286,286,286,286,286,,,,,,286,286,286,286,286,286,286',
',,286,,,,,,,286,,,286,286,286,286,286,286,286,286,,286,286,286,,286',
'286,,286,286,286,,,,,,,,,,,,,,,,,,,,286,,,286,,,286,286,,,286,,,,,,286',
',,,,,,,286,,,,,286,286,286,286,286,286,,,,286,286,,,,,,,286,,,286,286',
'286,,,286,286,288,288,288,,288,,,,288,288,,,,288,,288,288,288,288,288',
'288,288,,,,,,288,288,288,288,288,288,288,,,288,,,,,,,288,,,288,288,288',
'288,288,288,288,288,,288,288,288,,288,288,,288,288,288,,,,,,,,,,,,,',
',,,,,,288,,,288,,,288,288,,,288,,,,,,288,,,,,,,,288,,,,,288,288,288',
'288,288,288,,,,288,288,,,,,,,288,,,288,288,288,,,288,288,290,290,290',
',290,,,,290,290,,,,290,,290,290,290,290,290,290,290,,,,,,290,290,290',
'290,290,290,290,,,290,,,,,,,290,,,290,290,290,290,290,290,290,290,,290',
'290,290,,290,290,,290,290,290,,,,,,,,,,,,,,,,,,,,290,,,290,,,290,290',
',,290,,,,,,290,,,,,,,,290,,,,,290,290,290,290,290,290,,,,290,290,,,',
',,,290,,,290,290,290,,,290,290,291,291,291,,291,,,,291,291,,,,291,,291',
'291,291,291,291,291,291,,,,,,291,291,291,291,291,291,291,,,291,,,,,',
',291,,,291,291,291,291,291,291,291,291,,291,291,291,,291,291,,291,291',
'291,,,,,,,,,,,,,,,,,,,,291,,,291,,,291,291,,,291,,,,,,291,,,,,,,,291',
',,,,291,291,291,291,291,291,,,,291,291,,,,,,,291,,,291,291,291,,,291',
'291,297,297,297,297,297,,,,297,297,,,,297,,297,297,297,297,297,297,297',
',,,,,297,297,297,297,297,297,297,,,297,,,,,,297,297,,297,297,297,297',
'297,297,297,297,297,,297,297,297,,297,297,,297,297,297,,,,,,,,,,,,,',
',,,,,,297,,,297,,,297,297,,,297,,297,,,,297,,,,,,,,297,,,,,297,297,297',
'297,297,297,,,,297,297,,,,,,,297,,,297,297,297,,,297,297,245,245,245',
',245,,,,245,245,,,,245,,245,245,245,245,245,245,245,,,,,,245,245,245',
'245,245,245,245,,,245,,,,,,,245,,,245,245,245,245,245,245,245,245,,245',
'245,245,,245,245,,245,245,245,,,,,,,,,,,,,,,,,,,,245,,,245,,,245,245',
',,245,,,,,,245,,,,,,,,245,,,,,245,245,245,245,245,245,,,,245,245,,,',
',,,245,,,245,245,245,,,245,245,37,37,37,,37,,,,37,37,,,,37,,37,37,37',
'37,37,37,37,,,,,,37,37,37,37,37,37,37,,,37,,,,,,,37,,,37,37,37,37,37',
'37,37,37,,37,37,37,,37,37,,,,37,,,,,,,,,,,,,,,,,,,,37,,,37,,,37,37,',
',37,,37,,,,,,,,,,,,,,,,,37,37,37,37,37,37,,,,37,37,,,,,,,37,,,37,37',
'37,,,37,37,531,531,531,,531,,,,531,531,,,,531,,531,531,531,531,531,531',
'531,,,,,,531,531,531,531,531,531,531,,,531,,,,,,,531,,,531,531,531,531',
'531,531,531,531,,531,531,531,,531,531,,531,531,531,,,,,,,,,,,,,,,,,',
',,531,,,531,,,531,531,,,531,,,,,,531,,,,,,,,531,,,,,531,531,531,531',
'531,531,,,,531,531,,,,,,,531,,,531,531,531,,,531,531,530,530,530,,530',
',,,530,530,,,,530,,530,530,530,530,530,530,530,,,,,,530,530,530,530',
'530,530,530,,,530,,,,,,,530,,,530,530,530,530,530,530,530,530,,530,530',
'530,,530,530,,530,530,530,,,,,,,,,,,,,,,,,,,,530,,,530,,,530,530,,,530',
',,,,,530,,,,,,,,530,,,,,530,530,530,530,530,530,,,,530,530,,,,,,,530',
',,530,530,530,,,530,530,527,527,527,,527,,,,527,527,,,,527,,527,527',
'527,527,527,527,527,,,,,,527,527,527,527,527,527,527,,,527,,,,,,,527',
',,527,527,527,527,527,527,527,527,,527,527,527,,527,527,,,,527,,,,,',
',,,,,,,,,,,,,,527,,,527,,,527,527,,,527,,,,,,,,,,,,,,,,,,,527,527,527',
'527,527,527,,,,527,527,,,,,,,527,,,527,527,527,,,527,527,23,23,23,,23',
',,,23,23,,,,23,,23,23,23,23,23,23,23,,,,,,23,23,23,23,23,23,23,,,23',
',,,,,,23,,,23,23,23,23,23,23,23,23,,23,23,23,,23,23,,23,23,23,,,,,,',
',,,,,,,,,,,,,23,,,23,,,23,23,,,23,,,,,,23,,,,,,,,23,,,,,23,23,23,23',
'23,23,,,,23,23,,,,,,,23,,,23,23,23,,,23,23,521,521,521,,521,,,,521,521',
',,,521,,521,521,521,521,521,521,521,,,,,,521,521,521,521,521,521,521',
',,521,,,,,,,521,,,521,521,521,521,521,521,521,521,521,521,521,521,,521',
'521,,521,521,521,,,,,,,,,,,,,,,,,,,,521,,,521,,,521,521,,,521,,521,',
'521,,521,,,,,,,,521,,,,,521,521,521,521,521,521,,,,521,521,,,,,,,521',
',521,521,521,521,,,521,521,61,61,61,,61,,,,61,61,,,,61,,61,61,61,61',
'61,61,61,,,,,,61,61,61,61,61,61,61,,,61,,,,,,,61,,,61,61,61,61,61,61',
'61,61,,61,61,61,,61,61,,61,61,61,,,,,,,,,,,,,,,,,,,,61,,,61,,,61,61',
',,61,,,,,,61,,,,,,,,61,,,,,61,61,61,61,61,61,,,,61,61,61,,,,,,61,,,61',
'61,61,,,61,61,740,740,740,,740,,,,740,740,,,,740,,740,740,740,740,740',
'740,740,,,,,,740,740,740,740,740,740,740,,,740,,,,,,,740,,,740,740,740',
'740,740,740,740,740,,740,740,740,,740,740,,740,740,740,,,,,,,,,,,,,',
',,,,,,740,,,740,,,740,740,,,740,,740,,,,740,,,,,,,,740,,,,,740,740,740',
'740,740,740,,,,740,740,,,,,,,740,,,740,740,740,,,740,740,255,255,255',
',255,,,,255,255,,,,255,,255,255,255,255,255,255,255,,,,,,255,255,255',
'255,255,255,255,,,255,,,,,,,255,,,255,255,255,255,255,255,255,255,,255',
'255,255,,255,255,,255,255,255,,,,,,,,,,,,,,,,,,,,255,,,255,,,255,255',
',,255,,,,,,255,,,,,,,,255,,,,,255,255,255,255,255,255,,,,255,255,,,',
',,,255,,,255,255,255,,,255,255,519,519,519,,519,,,,519,519,,,,519,,519',
'519,519,519,519,519,519,,,,,,519,519,519,519,519,519,519,,,519,,,,,',
',519,,,519,519,519,519,519,519,519,519,,519,519,519,,519,519,,,,519',
',,,,,,,,,,,,,,,,,,,519,,,519,,,519,519,,,519,,,,,,,,,,,,,,,,,,,519,519',
'519,519,519,519,,,,519,519,,,,,,,519,,,519,519,519,,,519,519,62,62,62',
',62,,,,62,62,,,,62,,62,62,62,62,62,62,62,,,,,,62,62,62,62,62,62,62,',
',62,,,,,,,62,,,62,62,62,62,62,62,62,62,62,62,62,62,,62,62,,62,62,62',
',,,,,,,,,,,,,,,,,,,62,,,62,,,62,62,,,62,,62,,,,62,,,,,,,,62,,,,,62,62',
'62,62,62,62,,,,62,62,,,,,,,62,,62,62,62,62,,,62,62,752,752,752,,752',
',,,752,752,,,,752,,752,752,752,752,752,752,752,,,,,,752,752,752,752',
'752,752,752,,,752,,,,,,,752,,,752,752,752,752,752,752,752,752,752,752',
'752,752,,752,752,,752,752,752,,,,,,,,,,,,,,,,,,,,752,,,752,,,752,752',
',,752,,752,,752,,752,,,,,,,,752,,,,,752,752,752,752,752,752,,,,752,752',
',,,,,,752,,752,752,752,752,,,752,752,123,123,123,123,123,,,,123,123',
',,,123,,123,123,123,123,123,123,123,,,,,,123,123,123,123,123,123,123',
',,123,,,,,,123,123,,123,123,123,123,123,123,123,123,123,,123,123,123',
',123,123,,123,123,123,,,,,,,,,,,,,,,,,,,,123,,,123,,,123,123,,,123,',
'123,,,,123,,,,,,,,123,,,,,123,123,123,123,123,123,,,,123,123,,,,,,,123',
',,123,123,123,,,123,123,357,357,357,,357,,,,357,357,,,,357,,357,357',
'357,357,357,357,357,,,,,,357,357,357,357,357,357,357,,,357,,,,,,,357',
',,357,357,357,357,357,357,357,357,,357,357,357,,357,357,,,,357,,,,,',
',,,,,,,,,,,,,,357,,,357,,,357,357,,,357,,,,,,,,,,,,,,,,,,,357,357,357',
'357,357,357,,,,357,357,,,,,,,357,,,357,357,357,,,357,357,122,122,122',
',122,,,,122,122,,,,122,,122,122,122,122,122,122,122,,,,,,122,122,122',
'122,122,122,122,,,122,,,,,,,122,,,122,122,122,122,122,122,122,122,,122',
'122,122,,122,122,,122,122,122,,,,,,,,,,,,,,,,,,,,122,,,122,,,122,122',
',,122,,,,,,122,,,,,,,,122,,,,,122,122,122,122,122,122,,,,122,122,,,',
',,,122,,,122,122,122,,,122,122,512,512,512,512,512,,,,512,512,,,,512',
',512,512,512,512,512,512,512,,,,,,512,512,512,512,512,512,512,,,512',
',,,,,512,512,,512,512,512,512,512,512,512,512,512,,512,512,512,,512',
'512,,512,512,512,,,,,,,,,,,,,,,,,,,,512,,,512,,,512,512,,,512,,512,',
',,512,,,,,,,,512,,,,,512,512,512,512,512,512,,,,512,512,,,,,,512,512',
',,512,512,512,,,512,512,505,505,505,,505,,,,505,505,,,,505,,505,505',
'505,505,505,505,505,,,,,,505,505,505,505,505,505,505,,,505,,,,,,,505',
',,505,505,505,505,505,505,505,505,,505,505,505,,505,505,,505,505,505',
',,,,,,,,,,,,,,,,,,,505,,,505,,,505,505,,,505,,,,,,505,,,,,,,,505,,,',
',505,505,505,505,505,505,,,,505,505,,,,,,,505,,,505,505,505,,,505,505',
'503,503,503,,503,,,,503,503,,,,503,,503,503,503,503,503,503,503,,,,',
',503,503,503,503,503,503,503,,,503,,,,,,,503,,,503,503,503,503,503,503',
'503,503,503,503,503,503,,503,503,,503,503,503,,,,,,,,,,,,,,,,,,,,503',
',,503,,,503,503,,,503,,,,503,,503,,,,,,,,503,,,,,503,503,503,503,503',
'503,,,,503,503,,,,,,,503,,503,503,503,503,,,503,503,500,500,500,,500',
',,,500,500,,,,500,,500,500,500,500,500,500,500,,,,,,500,500,500,500',
'500,500,500,,,500,,,,,,,500,,,500,500,500,500,500,500,500,500,500,500',
'500,500,,500,500,,500,500,500,,,,,,,,,,,,,,,,,,,,500,,,500,,,500,500',
',,500,,500,,500,,500,,,,,,,,500,,,,,500,500,500,500,500,500,,,,500,500',
',,,,,,500,,500,500,500,500,,,500,500,121,121,121,,121,,,,121,121,,,',
'121,,121,121,121,121,121,121,121,,,,,,121,121,121,121,121,121,121,,',
'121,,,,,,,121,,,121,121,121,121,121,121,121,121,,121,121,121,,121,121',
',121,121,121,,,,,,,,,,,,,,,,,,,,121,,,121,,,121,121,,,121,,,,,,121,',
',,,,,,121,,,,,121,121,121,121,121,121,,,,121,121,,,,,,,121,,,121,121',
'121,,,121,121,120,120,120,,120,,,,120,120,,,,120,,120,120,120,120,120',
'120,120,,,,,,120,120,120,120,120,120,120,,,120,,,,,,,120,,,120,120,120',
'120,120,120,120,120,,120,120,120,,120,120,,120,120,120,,,,,,,,,,,,,',
',,,,,,120,,,120,,,120,120,,,120,,,,,,120,,,,,,,,120,,,,,120,120,120',
'120,120,120,,,,120,120,,,,,,,120,,,120,120,120,,,120,120,119,119,119',
',119,,,,119,119,,,,119,,119,119,119,119,119,119,119,,,,,,119,119,119',
'119,119,119,119,,,119,,,,,,,119,,,119,119,119,119,119,119,119,119,,119',
'119,119,,119,119,,119,119,119,,,,,,,,,,,,,,,,,,,,119,,,119,,,119,119',
',,119,,,,,,119,,,,,,,,119,,,,,119,119,119,119,119,119,,,,119,119,,,',
',,,119,,,119,119,119,,,119,119,114,114,114,114,114,,,,114,114,,,,114',
',114,114,114,114,114,114,114,,,,,,114,114,114,114,114,114,114,,,114',
',,,,,114,114,114,114,114,114,114,114,114,114,114,114,,114,114,114,,114',
'114,,114,114,114,,,,,,,,,,,,,,,,,,,,114,,,114,,,114,114,,,114,,114,',
',,114,,,,,,,,114,,,,,114,114,114,114,114,114,,,,114,114,,,,,,114,114',
',,114,114,114,,,114,114,459,459,459,,459,,,,459,459,,,,459,,459,459',
'459,459,459,459,459,,,,,,459,459,459,459,459,459,459,,,459,,,,,,,459',
',,459,459,459,459,459,459,459,459,,459,459,459,,459,459,,459,459,459',
',,,,,,,,,,,,,,,,,,,459,,,459,,,459,459,,,459,,,,,,459,,,,,,,,459,,,',
',459,459,459,459,459,459,,,,459,459,,,,,,,459,,,459,459,459,,,459,459',
'458,458,458,,458,,,,458,458,,,,458,,458,458,458,458,458,458,458,,,,',
',458,458,458,458,458,458,458,,,458,,,,,,,458,,,458,458,458,458,458,458',
'458,458,,458,458,458,,458,458,,458,458,458,,,,,,,,,,,,,,,,,,,,458,,',
'458,,,458,458,,,458,,,,,,458,,,,,,,,458,,,,,458,458,458,458,458,458',
',,,458,458,,,,,,,458,,,458,458,458,,,458,458,66,66,66,,66,,,,66,66,',
',,66,,66,66,66,66,66,66,66,,,,,,66,66,66,66,66,66,66,,,66,,,,,,,66,',
',66,66,66,66,66,66,66,66,,66,66,66,,66,66,,66,66,66,,,,,,,,,,,,,,,,',
',,,66,,,66,,,66,66,,,66,,,,,,66,,,,,,,,66,,,,,66,66,66,66,66,66,,,,66',
'66,,,,,,,66,,,66,66,66,,,66,66,457,457,457,,457,,,,457,457,,,,457,,457',
'457,457,457,457,457,457,,,,,,457,457,457,457,457,457,457,,,457,,,,,',
',457,,,457,457,457,457,457,457,457,457,,457,457,457,,457,457,,457,457',
'457,,,,,,,,,,,,,,,,,,,,457,,,457,,,457,457,,,457,,,,,,457,,,,,,,,457',
',,,,457,457,457,457,457,457,,,,457,457,,,,,,,457,,,457,457,457,,,457',
'457,67,67,67,,67,,,,67,67,,,,67,,67,67,67,67,67,67,67,,,,,,67,67,67',
'67,67,67,67,,,67,,,,,,,67,,,67,67,67,67,67,67,67,67,,67,67,67,,67,67',
',67,67,67,,,,,,,,,,,,,,,,,,,,67,,,67,,,67,67,,,67,,,,,,67,,,,,,,,67',
',,,,67,67,67,67,67,67,,,,67,67,,,,,,,67,,,67,67,67,,,67,67,455,455,455',
',455,,,,455,455,,,,455,,455,455,455,455,455,455,455,,,,,,455,455,455',
'455,455,455,455,,,455,,,,,,,455,,,455,455,455,455,455,455,455,455,455',
'455,455,455,,455,455,,455,455,455,,,,,,,,,,,,,,,,,,,,455,,,455,,,455',
'455,,,455,,455,,455,,455,,,,,,,,455,,,,,455,455,455,455,455,455,,,,455',
'455,,,,,,,455,,455,455,455,455,,,455,455,70,70,70,,70,,,,70,70,,,,70',
',70,70,70,70,70,70,70,,,,,,70,70,70,70,70,70,70,,,70,,,,,,,70,,,70,70',
'70,70,70,70,70,70,,70,70,70,,70,70,,70,70,70,,,,,,,,,,,,,,,,,,,,70,',
',70,,,70,70,,,70,,,,,,70,,,,,,,,70,,,,,70,70,70,70,70,70,,,,70,70,70',
',,,,70,70,,,70,70,70,,,70,70,71,71,71,,71,,,,71,71,,,,71,,71,71,71,71',
'71,71,71,,,,,,71,71,71,71,71,71,71,,,71,,,,,,,71,,,71,71,71,71,71,71',
'71,71,,71,71,71,,71,71,,,,71,,,,,,,,,,,,,,,,,,,,71,,,71,,,71,71,,,71',
',71,,,,,,,,,,,,,,,,,71,71,71,71,71,71,,,,71,71,,,,,,,71,,,71,71,71,',
',71,71,592,592,592,,592,,,,592,592,,,,592,,592,592,592,592,592,592,592',
',,,,,592,592,592,592,592,592,592,,,592,,,,,,,592,,,592,592,592,592,592',
'592,592,592,592,592,592,592,,592,592,,592,592,592,,,,,,,,,,,,,,,,,,',
',592,,,592,,,592,592,,,592,,592,,592,,592,,,,,,,,592,,,,,592,592,592',
'592,592,592,,,,592,592,,,,,,,592,,592,592,592,592,,,592,592,571,571',
'571,,571,,,,571,571,,,,571,,571,571,571,571,571,571,571,,,,,,571,571',
'571,571,571,571,571,,,571,,,,,,,571,,,571,571,571,571,571,571,571,571',
',571,571,571,,571,571,,571,571,571,,,,,,,,,,,,,,,,,,,,571,,,571,,,571',
'571,,,571,,,,,,571,,,,,,,,571,,,,,571,571,571,571,571,571,,,,571,571',
',,,,,,571,,,571,571,571,,,571,571,222,222,222,,222,,,,222,222,,,,222',
',222,222,222,222,222,222,222,,,,,,222,222,222,222,222,222,222,,,222',
',,,,,,222,,,222,222,222,222,222,222,222,222,,222,222,222,,222,222,,222',
'222,222,,,,,,,,,,,,,,,,,,,,222,,,222,,,222,222,,,222,,,,,,222,,,,,,',
',222,,,,,222,222,222,222,222,222,,,,222,222,222,,,,,,222,,,222,222,222',
',,222,222,221,221,221,,221,,,,221,221,,,,221,,221,221,221,221,221,221',
'221,,,,,,221,221,221,221,221,221,221,,,221,,,,,,,221,,,221,221,221,221',
'221,221,221,221,,221,221,221,,221,221,,221,221,221,,,,,,,,,,,,,,,,,',
',,221,,,221,,,221,221,,,221,,,,,,221,,,,,,,,221,,,,,221,221,221,221',
'221,221,,,,221,221,,,,,,,221,,,221,221,221,,,221,221,337,337,337,,337',
',,,337,337,,,,337,,337,337,337,337,337,337,337,,,,,,337,337,337,337',
'337,337,337,,,337,,,,,,,337,,,337,337,337,337,337,337,337,337,337,337',
'337,337,,337,337,,337,337,337,,,,,,,,,,,,,,,,,,,,337,,,337,,,337,337',
',,337,,,,,,337,,,,,,,,337,,,,,337,337,337,337,337,337,,,,337,337,,,',
',,,337,,337,337,337,337,,,337,337,220,220,220,,220,,,,220,220,,,,220',
',220,220,220,220,220,220,220,,,,,,220,220,220,220,220,220,220,,,220',
',,,,,,220,,,220,220,220,220,220,220,220,220,,220,220,220,,220,220,,220',
'220,220,,,,,,,,,,,,,,,,,,,,220,,,220,,,220,220,,,220,,,,,,220,,,,,,',
',220,,,,,220,220,220,220,220,220,,,,220,220,,,,,,,220,,,220,220,220',
',,220,220,219,219,219,,219,,,,219,219,,,,219,,219,219,219,219,219,219',
'219,,,,,,219,219,219,219,219,219,219,,,219,,,,,,,219,,,219,219,219,219',
'219,219,219,219,,219,219,219,,219,219,,219,219,219,,,,,,,,,,,,,,,,,',
',,219,,,219,,,219,219,,,219,,,,,,219,,,,,,,,219,,,,,219,219,219,219',
'219,219,,,,219,219,,,,,,,219,,,219,219,219,,,219,219,218,218,218,,218',
',,,218,218,,,,218,,218,218,218,218,218,218,218,,,,,,218,218,218,218',
'218,218,218,,,218,,,,,,,218,,,218,218,218,218,218,218,218,218,,218,218',
'218,,218,218,,218,218,218,,,,,,,,,,,,,,,,,,,,218,,,218,,,218,218,,,218',
',218,,,,218,,,,,,,,218,,,,,218,218,218,218,218,218,,,,218,218,,,,,,',
'218,,,218,218,218,,,218,218,217,217,217,,217,,,,217,217,,,,217,,217',
'217,217,217,217,217,217,,,,,,217,217,217,217,217,217,217,,,217,,,,,',
',217,,,217,217,217,217,217,217,217,217,,217,217,217,,217,217,,217,217',
'217,,,,,,,,,,,,,,,,,,,,217,,,217,,,217,217,,,217,,,,,,217,,,,,,,,217',
',,,,217,217,217,217,217,217,,,,217,217,,,,,,,217,,,217,217,217,,,217',
'217,544,544,544,,544,,,,544,544,,,,544,,544,544,544,544,544,544,544',
',,,,,544,544,544,544,544,544,544,,,544,,,,,,,544,,,544,544,544,544,544',
'544,544,544,544,544,544,544,,544,544,,544,544,544,,,,,,,,,,,,,,,,,,',
',544,,,544,,,544,544,,,544,,,,,,544,,,,,,,,544,,,,,544,544,544,544,544',
'544,,,,544,544,,,,,,,544,,544,544,544,544,,,544,544,541,541,541,,541',
',,,541,541,,,,541,,541,541,541,541,541,541,541,,,,,,541,541,541,541',
'541,541,541,,,541,,,,,,,541,,,541,541,541,541,541,541,541,541,541,541',
'541,541,,541,541,,541,541,541,,,,,,,,,,,,,,,,,,,,541,,,541,,,541,541',
',,541,,541,,,,541,,,,,,,,541,,,,,541,541,541,541,541,541,,,,541,541',
',,,,,,541,,541,541,541,541,,,541,541,212,212,212,,212,,,,212,212,,,',
'212,,212,212,212,212,212,212,212,,,,,,212,212,212,212,212,212,212,,',
'212,,,,,,,212,,,212,212,212,212,212,212,212,212,212,212,212,212,,212',
'212,,212,212,212,,,,,,,,,,,,,,,,,,,,212,,,212,,,212,212,,,212,,212,',
'212,,212,,,,,,,,212,,,,,212,212,212,212,212,212,,,,212,212,,,,,,,212',
',212,212,212,212,,,212,212,211,211,211,,211,,,,211,211,,,,211,,211,211',
'211,211,211,211,211,,,,,,211,211,211,211,211,211,211,,,211,,,,,,,211',
',,211,211,211,211,211,211,211,211,,211,211,211,,211,211,,211,211,211',
',,,,,,,,,,,,,,,,,,,211,,,211,,,211,211,,,211,,,,,,211,,,,,,,,211,,,',
',211,211,211,211,211,211,,,,211,211,,,,,,,211,,,211,211,211,,,211,211',
'210,210,210,,210,,,,210,210,,,,210,,210,210,210,210,210,210,210,,,,',
',210,210,210,210,210,210,210,,,210,,,,,,,210,,,210,210,210,210,210,210',
'210,210,,210,210,210,,210,210,,210,210,210,,,,,,,,,,,,,,,,,,,,210,,',
'210,,,210,210,,,210,,210,,,,210,,,,,,,,210,,,,,210,210,210,210,210,210',
',,,210,210,,,,,,,210,,,210,210,210,,,210,210,535,535,535,,535,,,,535',
'535,,,,535,,535,535,535,535,535,535,535,,,,,,535,535,535,535,535,535',
'535,,,535,,,,,,,535,,,535,535,535,535,535,535,535,535,,535,535,535,',
'535,535,,535,535,535,,,,,,,,,,,,,,,,,,,,535,,,535,,,535,535,,,535,,',
',,,535,,,,,,,,535,,,,,535,535,535,535,535,535,,,,535,535,,,,,,,535,',
',535,535,535,,,535,535,344,344,344,,344,,,,344,344,,,,344,,344,344,344',
'344,344,344,344,,,,,,344,344,344,344,344,344,344,,,344,,,,,,,344,,,344',
'344,344,344,344,344,344,344,,344,344,344,,344,344,,344,344,344,,,,,',
',,,,,,,,,,,,,,344,,,344,,,344,344,,,344,,,,,,344,,,,,,,,344,,,,,344',
'344,344,344,344,344,,,,344,344,,,,,,,344,,,344,344,344,,,344,344,345',
'345,345,,345,,,,345,345,,,,345,,345,345,345,345,345,345,345,,,,,,345',
'345,345,345,345,345,345,,,345,,,,,,,345,,,345,345,345,345,345,345,345',
'345,,345,345,345,,345,345,,345,345,345,,,,,,,,,,,,,,,,,,,,345,,,345',
',,345,345,,,345,,,,,,345,,,,,,,,345,,,,,345,345,345,345,345,345,,,,345',
'345,,,,,,,345,,,345,345,345,,,345,345,1013,1013,1013,,1013,,,,1013,1013',
',,,1013,,1013,1013,1013,1013,1013,1013,1013,,,,,,1013,1013,1013,1013',
'1013,1013,1013,,,1013,,,,,,,1013,,,1013,1013,1013,1013,1013,1013,1013',
'1013,1013,1013,1013,1013,,1013,1013,,1013,1013,1013,,,,,,,,,,,,,,,,',
',,,1013,,,1013,,,1013,1013,,,1013,,1013,,1013,,1013,,,,,,,,1013,,,,',
'1013,1013,1013,1013,1013,1013,,,,1013,1013,,,,,,,1013,,1013,1013,1013',
'1013,,,1013,1013,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12',
'12,12,12,12,12,12,12,,,,12,12,12,12,12,12,12,12,12,12,,,,,,12,12,12',
'12,12,12,12,12,12,,,12,,,,,,,,,12,12,,12,12,12,12,12,12,12,,,12,12,',
',,12,12,12,12,,,,,,,,,,,,,,12,12,,12,12,12,12,12,12,12,12,12,12,12,',
',12,12,,,,,,,,,,12,,,,,,,,,12,74,74,74,74,74,74,74,74,74,74,74,74,74',
'74,74,74,74,74,74,74,74,74,74,74,,,,74,74,74,74,74,74,74,74,74,74,,',
',,,74,74,74,74,74,74,74,74,74,74,74,74,,74,,,,,,,74,74,,74,74,74,74',
'74,74,74,,,74,74,,,,74,74,74,74,,,,,,74,,,,,,,,74,74,,74,74,74,74,74',
'74,74,74,74,74,74,,,74,,,,,,,,,,,,,,,,,,,,74,11,11,11,11,11,11,11,11',
'11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,,,,11,11,11,11,11,11',
'11,11,11,11,,,,,,11,11,11,11,11,11,11,11,11,11,,11,,,,,,,,,11,11,,11',
'11,11,11,11,11,11,,,11,11,,,,11,11,11,11,,,,,,,,,,,,,,11,11,,11,11,11',
'11,11,11,11,11,11,11,11,,,11,11,,,,,,,,,,11,,,,,,,,,11,91,91,91,91,91',
'91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,,,,91,91,91',
'91,91,91,91,91,91,91,,,,,,91,91,91,91,91,91,91,91,91,91,91,91,,91,,',
',,,,91,91,,91,91,91,91,91,91,91,,,91,91,,,,91,91,91,91,,,,,,,,,,,,,',
'91,91,,91,91,91,91,91,91,91,91,91,91,91,,,91,,,,,,,,,,,,,,,,,,,,91,634',
'634,634,634,634,634,634,634,634,634,634,634,634,634,634,634,634,634',
'634,634,634,634,634,634,,,,634,634,634,634,634,634,634,634,634,634,',
',,,,634,634,634,634,634,634,634,634,634,,,634,,,,,,,,,634,634,,634,634',
'634,634,634,634,634,,,634,634,,,,634,634,634,634,,,,,,,,,,,,,,634,634',
',634,634,634,634,634,634,634,634,634,634,634,,,634,634,,,,,,,,,,634',
',,,,,,,,634,408,408,408,408,408,408,408,408,408,408,408,408,408,408',
'408,408,408,408,408,408,408,408,408,408,,,,408,408,408,408,408,408,408',
'408,408,408,,,,,,408,408,408,408,408,408,408,408,408,,,408,,,,,,,,,408',
'408,,408,408,408,408,408,408,408,,,408,408,,,,408,408,408,408,,,,,,',
',,,,,,,408,408,,408,408,408,408,408,408,408,408,408,408,408,,,408,408',
',,,,,,,,,408,,,,,,,,,408,762,762,762,762,762,762,762,762,762,762,762',
'762,762,762,762,762,762,762,762,762,762,762,762,762,,,,762,762,762,762',
'762,762,762,762,762,762,,,,,,762,762,762,762,762,762,762,762,762,,,762',
',,,,,,,,762,762,,762,762,762,762,762,762,762,,,762,762,,,,762,762,762',
'762,,,,,,,,,,,,,,762,762,,762,762,762,762,762,762,762,762,762,762,762',
'487,,762,,,,,487,487,487,,,487,487,487,551,487,551,551,551,551,551,762',
',,487,487,,,,,551,,,,,487,487,,487,487,487,487,487,,,,,,,,,,551,,1002',
',1002,1002,1002,1002,1002,551,551,551,551,,,,,,1002,,,,,,,487,,,,,,',
'487,,,,,487,487,,1002,,,,,551,,,,594,594,1002,1002,594,,,,,,487,487',
',594,594,,594,594,594,594,594,594,594,,487,594,594,,,487,594,594,594',
'594,,,1002,,,594,,,,,,,,594,594,,594,594,594,594,594,594,594,594,594',
'594,594,,,594,,,,,593,593,,,593,,,,,,,,,593,593,594,593,593,593,593',
'593,593,593,,,593,593,,,,593,593,593,593,,,,,,593,,,,,,,,593,593,,593',
'593,593,593,593,593,593,593,593,593,593,,,593,,,,,965,965,,,965,,,,',
',,,,965,965,593,965,965,965,965,965,965,965,,,965,965,,,,965,965,965',
'965,,,,,,965,,,,,,,,965,965,,965,965,965,965,965,965,965,965,965,965',
'965,,,965,,,,,750,750,,,750,,,,,,,,,750,750,965,750,750,750,750,750',
'750,750,,,750,750,,,,750,750,750,750,,,,,,750,,,,,,,,750,750,,750,750',
'750,750,750,750,750,750,750,750,750,,,750,,,,,751,751,,,751,,,,,,,,',
'751,751,750,751,751,751,751,751,751,751,,,751,751,,,,751,751,751,751',
',,,,,751,,,,,,,,751,751,,751,751,751,751,751,751,751,751,751,751,751',
',,751,,,,,214,214,,,214,,,,,,,,,214,214,751,214,214,214,214,214,214',
'214,,,214,214,,,,214,214,214,214,,,,,,214,,,,,,,,214,214,,214,214,214',
'214,214,214,214,214,214,214,214,,,214,,,,,264,264,,,264,,,,,,,,,264',
'264,214,264,264,264,264,264,264,264,,,264,264,,,,264,264,264,264,,,',
',,,,,,,,,,264,264,,264,264,264,264,264,264,264,264,264,264,264,,,264',
',,,,213,213,,,213,,,,,,,,,213,213,264,213,213,213,213,213,213,213,,',
'213,213,,,,213,213,213,213,,,,,,213,,,,,,,,213,213,,213,213,213,213',
'213,213,213,213,213,213,213,,998,213,998,998,998,998,998,1004,,1004',
'1004,1004,1004,1004,,,998,,,,,213,,1004,,,,,,,,,,,,,,,998,,,,,,,1004',
',998,998,998,998,,,,533,533,1004,1004,533,,,,,,,,,533,533,,533,533,533',
'533,533,533,533,,,533,533,,,998,533,533,533,533,,,1004,,,533,,,,,,,',
'533,533,,533,533,533,533,533,533,533,533,533,533,533,,,533,,,,,532,532',
',,532,,,,,,,,,532,532,533,532,532,532,532,532,532,532,,,532,532,,,,532',
'532,532,532,,,,,,532,,,,,,,,532,532,,532,532,532,532,532,532,532,532',
'532,532,532,,,532,,,,,1014,1014,,,1014,,,,,,,,,1014,1014,532,1014,1014',
'1014,1014,1014,1014,1014,,,1014,1014,,,,1014,1014,1014,1014,,,,,,1014',
',,,,,,,1014,1014,,1014,1014,1014,1014,1014,1014,1014,1014,1014,1014',
'1014,,,1014,,,,,1015,1015,,,1015,,,,,,,,,1015,1015,1014,1015,1015,1015',
'1015,1015,1015,1015,,,1015,1015,,,,1015,1015,1015,1015,,,,,,1015,,,',
',,,,1015,1015,,1015,1015,1015,1015,1015,1015,1015,1015,1015,1015,1015',
',1017,1015,1017,1017,1017,1017,1017,,,523,523,,,523,,,1017,,,,,1015',
'523,523,,523,523,523,523,523,523,523,,,523,523,,,1017,523,523,523,523',
',,,,,523,1017,1017,,,,,,523,523,,523,523,523,523,523,523,523,523,523',
'523,523,,,523,,,,,522,522,,,522,,1017,,,,,,,522,522,523,522,522,522',
'522,522,522,522,,,522,522,,,,522,522,522,522,,,,,,522,,,,,,,,522,522',
',522,522,522,522,522,522,522,522,522,522,522,,760,522,760,760,760,760',
'760,718,,718,718,718,718,718,,,760,,,,,522,,718,716,,716,716,716,716',
'716,,,,,,,,760,,716,,,,,718,,760,760,760,760,,,,,,718,718,,,,714,716',
'714,714,714,714,714,,,,716,716,716,716,,1048,714,1048,1048,1048,1048',
'1048,760,,,,,,,718,,1048,,,,,,,714,1000,,1000,1000,1000,1000,1000,716',
'714,714,714,714,,,1048,894,1000,894,894,894,894,894,,,,1048,1048,,,',
'891,894,891,891,891,891,891,,1000,,,,,,714,,891,,,1000,1000,,,894,,',
',,,1048,,,894,894,894,894,,,891,896,,896,896,896,896,896,,891,891,891',
'891,,,1000,919,896,919,919,919,919,919,,,,,,,,894,,919,,,,,,,896,,,',
',,891,,,,,896,896,,,919,453,453,,,453,,,,919,919,919,919,,453,453,,453',
'453,453,453,453,453,453,,,453,453,,,896,453,453,453,453,,,,,,453,,,',
',919,,,453,453,,453,453,453,453,453,453,453,453,453,453,453,,,453,,',
',,454,454,,,454,,,,,,,,,454,454,453,454,454,454,454,454,454,454,,,454',
'454,,,,454,454,454,454,,,,,,454,,,,,,,,454,454,,454,454,454,454,454',
'454,454,454,454,454,454,,921,454,921,921,921,921,921,923,,923,923,923',
'923,923,,,921,,,,,454,,923,925,,925,925,925,925,925,,,,,,,,921,,925',
',,,,923,,,,921,921,,,,,,923,923,,,,,925,,,,,,,,,,,925,925,,,,,,,,,921',
',,,,,,923,,,,,,,,,,,,,,,,,925' ]
        racc_action_check = arr = ::Array.new(26465, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_action_pointer = [
   nil,  1461,  4951,    60,   nil,    42,   nil,   nil, 11535,  1267,
   nil, 24261, 23995,   -22,   nil,   -44,    34,   762,   636,    15,
   633,   nil,    72, 17695,  3259,   167,   nil,   499,   nil,   340,
   922,  1436, 15735, 15875, 16155,   nil,  4246, 17135,  5795,   nil,
   121,   421,   676,   255,   442, 10135, 10975, 11115,   200,   701,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,  1172,
   nil, 17975, 18535,   nil,    89,   nil, 20635, 20915,   nil,   nil,
 21195, 21335,   254,   nil, 24128,   nil,   nil,   nil,   nil,   nil,
   198,   nil,   nil,   nil,   nil,   nil,   nil,   228,   263,   296,
   304, 24394,   nil,   nil,   nil,   nil,   nil,   nil,   533,   nil,
   nil,     0,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil, 20215,   nil,   nil,   nil,   nil, 20075,
 19935, 19795, 19095, 18815,   355,   nil,   270,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   342,   nil,  5374,
 23295, 23155, 23015, 25432, 25296,   nil,   nil, 22595, 22455, 22315,
 22175, 21895, 21755,   nil,   nil,   541,    84,    52,   443,    96,
   378,   443,   nil, 10555,  2554,   472,  9715,  8875,  8315,  7895,
  7475,  7335,  7195,  7055,  5655, 16995, 15595, 14335, 13635, 13355,
 13215, 12375, 12095, 11955, 11815, 18255,  6215, 12515, 12935, 14615,
 14755, 14895,   nil,   nil, 25364,   nil,   nil,   471, 15035,   nil,
   533,   nil,   nil,   nil, 15175,   nil,   nil, 15315,   nil,  3118,
   nil,   504,   516,   nil, 16015,   566, 16295,   nil, 16435,   nil,
 16575, 16715,   nil,   nil,   455,   nil,   885, 16855,   514,  4387,
   577,   622,   586,  6495,  3259,   500,   894,   872,   670,   615,
   nil,   637,   603,    87,   nil,   nil,   nil,   661,   403,   626,
 10275,   nil,   527,   690,   757,   nil,   734,   nil, 11255,  3823,
   818,   nil,   734,   nil,   659,   684,   744, 22035,   nil,   nil,
  1367,   261,   160,   207, 23575, 23715,   432,   855,   748,   131,
   165,   729,   825,   166,   858,   nil,   nil, 18955,   nil, 11395,
   537,   353,   756,   715,   682,   676,   646,   633,   590,   nil,
   570,   nil,   nil,   nil,   nil,   nil,   727,   nil,   660,   nil,
   434,   nil,   763,   569,   nil,   767,   565,   nil,   809,    62,
   nil,   814,   267,   nil,   403,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,  3541, 24660,   nil,
   nil,   nil,   nil,   827,   nil,   nil,   816, 11675,   827,   nil,
   nil,  1708,   834,   nil,   nil,   839,   840,   311,   324,  1047,
   nil,   nil,   nil,   665,   408,   880,   nil,   nil,  1304,   790,
   nil,  3541,   nil,   827,   nil,   nil,  1567,   nil,   nil,   nil,
   nil,   288,   nil, 26176, 26244, 21055,   387, 20775, 20495, 20355,
  4810,  4951,   877,   978,   906,   908,   910,   911,  5374,  5515,
  5398,  4387,   995,  1120,  1254,  1386,  5092,  5233,  4528,  4669,
  3964,  1004,  1090,  4105,  4246,  2695,   267, 24905,   nil,   nil,
   nil,   nil,   nil,   nil,   360,   259,   856,   858,   nil,   nil,
 19655,   nil,   nil, 19515,   nil, 19375,   nil,   406,   nil,   nil,
   nil,   nil, 19235,   872,   859,   857,   nil,   nil,   874, 18395,
   882, 17835, 25891, 25823,   632,   919,   nil, 17555,   882,   nil,
 17415, 17275, 25616, 25548,  2977, 23435,  1007,  1009,   894,   nil,
   nil, 22875,   nil,   nil, 22735,   nil,   909,   nil,   461,   936,
   175, 24869,   nil,   907,   910,   nil,   914,   917,   921,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   908,  1013,   nil,
   nil, 21615,   nil,   nil,   nil,  1006,   nil,   nil,   nil,  1007,
   nil,   nil,  1018,  2695,  1063,   nil,  3964,   204,   205,  1064,
  1082,   nil, 21475, 25024, 24956,   212,   nil,   284,   347,   391,
   nil,   861,   nil,    62, 10835,   nil,   853,   nil, 10695,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   458,   nil,   nil,   340,   nil,   nil,   nil,   962,   nil,   nil,
   963,   nil,   982,   nil, 24527,   nil,   968,  9995,  9855,   570,
  1010,  9575,  9435,  9155,  9015,  1015,   nil,   nil,   nil,  8735,
  8455,  1016,   nil,  8175,  8035,   nil,   279,   423,   276,   138,
  1002,  1849,  1001,   nil,   nil,   596,   nil,   nil,  1106,   142,
    95,   nil,   nil,   nil,   nil,  1005,   nil,  1048,  6915,   nil,
   nil,  6775,  1254,    53,  6355,  1010,   nil,  1014,   129,   133,
  1053,    58,   798,  1055,  1018, 13495,  2413,  1082,   303,  1147,
 13075,   nil,   nil,   554,   nil,   nil,   nil,  4669,  3682,  1036,
   372,   nil,   nil,   721, 26014,   nil, 25977,   nil, 25960,   nil,
 12235,   nil,  1112,   nil,  1035,   403,  1042,   nil,   nil,   nil,
   nil,   839,   nil,  1156,   nil,   nil,   nil,   nil,  1162,   nil,
 18115,  1049,   228,   283,   167,   203,  6075,   nil,   889,   nil,
 25160, 25228, 18675,   nil,   nil,   nil,   658,   809,  4528,  2131,
 25953,   440, 24793,   284,  1269,  4105,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,  1048, 12655,  2131, 12795,   nil,  1053,   nil,
  1990,   nil,  3823,   nil,   nil,  2272,   nil,  2554,   nil,  2836,
 13775, 13915, 14055, 14195,   356, 14475,  1054,  1062,   nil,  1063,
  1068,  1073,   nil,  1096,  1080,  1076,  1072, 15455,   nil,   nil,
  4810,   nil,   nil,   nil,  5233,  1990,   nil,   nil,   nil,  1088,
    32,   nil,   nil,  1210,   nil,  3118,  1091,  1134,   nil,   nil,
   nil,  1114,  1219,  1109,  1108,   nil,   nil,   nil,  1109,  1124,
   nil,  1125,  1129,   nil,  1130,   nil,   nil,  1135,   987,  1133,
  1445,   nil,  1255,   nil,  5935,  1256,  1567,  1708,   nil,   266,
     1,   137,   411,   734,   nil,  1144,  2836,  6635,   nil,   590,
  1263,  1265,  1156,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,  1171,  1158,   nil,  3400,  7615,  7755,  3682,   497,   nil,
   nil, 26083,   nil,   nil, 26068,   nil, 26122,   nil,   nil,  1205,
  1497,  8595,   634,  1264,  1330,  5092,  1229,  1340,   nil,  5515,
   nil,   nil,   260,  9295,   nil,   nil,   nil,   nil,   nil, 26137,
   nil, 26306,   nil, 26313,   nil, 26330,   nil,   nil,   nil,   nil,
   538,  1179,  1227,   nil,   180,   nil,  1352,  1353, 10415,  2977,
   nil,   nil,  1376,   712,   nil,   nil,   nil,   nil,  1235,   nil,
  1261,   nil,   nil,  1262,  1264,  1265,  1267,   nil,  1268,   nil,
   470,   nil,   nil,   nil,   668, 25092,   nil,   nil,  1287,   nil,
   nil,   nil,  3400,   287,   268,   604,  1349,    69,   nil,  1277,
  1285,  1290,  1296,  1297,  1429,  1298,  1313,  2413,   nil,   nil,
   nil,   522,     0,   nil,   nil,  2272,  1849,   nil, 25494,   nil,
 26053,   nil, 24909,   nil, 25501,   nil,   nil,   nil,  1502,  1338,
  1339,   nil,  1431, 23855, 25684, 25752,   130, 25814,   nil,   nil,
   nil,   nil,  1297,  1310,   823,   nil,   nil,   nil,  1431,  1432,
  1433,  1317,  1322,  1325,  1326,   nil,   nil,  1332,   174,   122,
   148,   144,  1330,  1331,   nil,   nil,   nil,   nil, 26029,   nil,
   nil,   nil,   nil,   275,   nil,   -83,   nil ]

racc_action_default = [
    -1,  -627,  -626,  -627,    -2,  -613,    -4,    -5,  -627,    -8,
    -9,  -627,  -627,  -627,   -29,  -627,  -627,  -627,  -280,  -627,
   -40,   -43,  -615,  -627,   -48,   -50,   -51,   -52,   -57,  -257,
  -257,  -257,  -293,  -332,  -333,   -69,  -626,   -73,   -81,   -83,
  -627,  -515,  -516,  -627,  -627,  -627,  -627,  -627,  -615,  -238,
  -271,  -272,  -273,  -274,  -275,  -276,  -277,  -278,  -279,  -601,
  -282,  -615,  -626,  -291,  -301,  -404,  -627,  -627,  -306,  -309,
  -613,  -627,  -317,  -324,  -627,  -334,  -335,  -446,  -447,  -448,
  -449,  -450,  -451,  -626,  -454,  -626,  -626,  -626,  -626,  -626,
  -626,  -626,  -491,  -497,  -499,  -500,  -501,  -502,  -599,  -504,
  -505,  -600,  -507,  -508,  -509,  -510,  -511,  -512,  -513,  -514,
  -519,  -520,  1057,    -3,  -614,  -622,  -623,  -624,    -7,  -627,
  -627,  -627,  -627,  -627,  -627,   -17,  -627,  -112,  -113,  -114,
  -115,  -116,  -117,  -118,  -119,  -120,  -124,  -125,  -126,  -127,
  -128,  -129,  -130,  -131,  -132,  -133,  -134,  -135,  -136,  -137,
  -138,  -139,  -140,  -141,  -142,  -143,  -144,  -145,  -146,  -147,
  -148,  -149,  -150,  -151,  -152,  -153,  -154,  -155,  -156,  -157,
  -158,  -159,  -160,  -161,  -162,  -163,  -164,  -165,  -166,  -167,
  -168,  -169,  -170,  -171,  -172,  -173,  -174,  -175,  -176,  -177,
  -178,  -179,  -180,  -181,  -182,  -183,  -184,  -185,  -186,  -187,
  -188,  -189,  -190,  -191,  -192,  -193,  -194,   -22,  -121,  -626,
  -627,  -627,  -626,  -627,  -627,  -611,  -612,  -627,  -627,  -627,
  -627,  -627,  -615,  -616,   -47,  -627,  -515,  -516,  -627,  -280,
  -627,  -627,  -230,  -627,  -626,  -627,  -627,  -627,  -627,  -627,
  -627,  -627,  -627,  -627,  -627,  -627,  -627,  -627,  -627,  -627,
  -627,  -627,  -627,  -627,  -627,  -627,  -627,  -627,  -627,  -627,
  -627,  -627,  -410,  -413,  -627,  -609,  -610,   -58,  -627,  -300,
  -627,  -427,  -430,   -64,  -626,  -424,   -65,  -615,   -66,  -239,
  -252,  -626,  -626,  -256,  -627,  -262,  -627,  -626,  -491,  -592,
  -627,  -627,   -67,   -68,  -613,   -13,   -14,  -627,   -71,  -626,
  -615,  -627,   -74,   -77,  -626,   -89,   -90,  -627,  -627,   -97,
  -293,  -296,  -615,  -417,  -332,  -333,  -336,  -425,  -627,   -79,
  -627,   -85,  -289,  -498,  -627,  -215,  -216,  -231,  -627,  -626,
  -285,  -284,  -627,  -240,  -619,  -619,  -627,  -626,  -302,  -303,
  -547,   -49,  -627,  -627,  -627,  -627,  -613,  -627,  -614,  -515,
  -516,  -627,  -627,  -280,  -627,  -357,  -358,  -627,  -320,  -627,
  -112,  -113,  -154,  -155,  -156,  -172,  -177,  -184,  -187,  -327,
  -627,  -515,  -516,  -587,  -588,  -452,  -627,  -475,  -627,  -477,
  -627,  -479,  -627,  -627,  -459,  -627,  -627,  -465,  -627,  -627,
  -471,  -627,  -627,  -473,  -627,  -490,  -492,  -493,  -494,  -495,
    -6,  -625,   -23,   -24,   -25,   -26,   -27,  -626,  -627,   -19,
   -20,   -21,  -122,  -627,   -30,   -39,  -267,  -627,  -627,  -266,
   -31,  -197,  -615,  -247,  -248,  -626,  -626,  -602,  -603,  -257,
  -422,  -604,  -605,  -603,  -602,  -257,  -421,  -423,  -604,  -605,
   -37,  -205,   -38,  -627,   -41,   -42,  -195,  -262,   -44,   -45,
   -46,  -615,  -299,  -627,  -627,  -626,  -289,  -627,  -627,  -627,
  -206,  -207,  -208,  -209,  -210,  -211,  -212,  -213,  -217,  -218,
  -219,  -220,  -221,  -222,  -223,  -224,  -225,  -226,  -227,  -228,
  -229,  -232,  -233,  -234,  -235,  -615,  -626,  -257,  -602,  -603,
   -54,   -59,  -258,  -418,  -626,  -626,  -615,  -615,  -295,  -253,
  -627,  -261,  -254,  -627,  -259,  -627,  -263,  -627,  -597,  -595,
  -598,   -12,  -614,   -16,  -615,   -70,  -287,   -86,   -75,  -627,
  -615,  -626,  -627,  -627,   -96,  -627,  -498,  -627,   -82,   -87,
  -627,  -627,  -627,  -627,  -236,  -627,  -438,  -627,  -615,  -617,
  -241,  -621,  -620,  -243,  -621,  -290,  -627,  -590,  -619,  -627,
  -627,  -547,  -407,  -586,  -586,  -530,  -532,  -532,  -532,  -546,
  -548,  -549,  -550,  -551,  -552,  -553,  -554,  -555,  -627,  -557,
  -559,  -561,  -566,  -568,  -569,  -571,  -576,  -578,  -579,  -581,
  -582,  -583,  -627,  -626,  -348,  -349,  -626,  -627,  -627,  -627,
  -627,  -433,  -626,  -627,  -627,  -289,  -314,  -107,  -108,  -627,
  -110,  -627,  -280,  -627,  -627,  -325,  -547,  -329,  -627,  -453,
  -476,  -481,  -482,  -484,  -455,  -478,  -456,  -480,  -457,  -458,
  -627,  -461,  -463,  -627,  -464,  -467,  -468,  -627,  -469,  -470,
  -627,  -496,  -627,   -18,  -627,   -28,  -270,  -627,  -627,  -426,
  -627,  -249,  -251,  -627,  -627,   -60,  -245,  -246,  -419,  -627,
  -627,   -62,  -420,  -627,  -627,  -298,  -602,  -603,  -602,  -603,
  -615,  -195,  -627,  -393,  -394,  -615,  -396,  -411,   -53,  -414,
  -626,  -428,  -431,  -244,  -294,  -626,  -260,  -264,  -627,  -593,
  -594,  -627,   -15,   -72,  -627,   -78,   -84,  -615,  -602,  -603,
  -626,  -606,   -95,  -627,   -80,  -627,  -204,  -214,  -615,  -626,
  -626,  -283,  -286,  -619,  -292,  -591,  -405,  -626,  -626,  -615,
  -627,  -528,  -529,  -627,  -627,  -539,  -627,  -542,  -627,  -544,
  -627,  -359,  -627,  -361,  -363,  -370,  -615,  -560,  -570,  -580,
  -584,  -626,  -350,  -626,  -307,  -351,  -352,  -310,  -627,  -313,
  -627,  -615,  -602,  -603,  -606,  -288,  -627,  -107,  -108,  -109,
  -627,  -627,  -626,  -318,  -521,  -522,  -627,  -321,  -626,  -626,
  -547,  -627,  -627,  -615,  -627,  -626,  -460,  -462,  -466,  -472,
  -474,   -10,  -123,  -268,  -627,  -198,  -627,  -618,  -626,   -33,
  -200,   -34,  -201,   -61,   -35,  -203,   -36,  -202,   -63,  -196,
  -627,  -627,  -627,  -627,  -426,  -627,  -586,  -586,  -375,  -626,
  -626,  -626,  -392,  -627,  -615,  -398,  -555,  -563,  -564,  -574,
  -626,  -416,  -415,   -55,  -626,  -626,  -255,  -265,  -596,   -76,
  -426,   -88,  -297,  -626,  -355,  -626,  -439,  -626,  -440,  -441,
  -242,  -627,  -627,  -615,  -586,  -567,  -585,  -531,  -532,  -532,
  -558,  -532,  -532,  -577,  -532,  -555,  -572,  -615,  -627,  -368,
  -627,  -556,  -627,  -353,  -627,  -627,  -626,  -626,  -312,  -627,
  -426,  -627,  -107,  -108,  -111,  -615,  -626,  -627,  -524,  -627,
  -627,  -627,  -615,  -526,  -330,  -589,  -483,  -486,  -487,  -488,
  -489,  -627,  -269,   -32,  -199,  -250,  -627,  -237,  -627,  -373,
  -374,  -383,  -377,  -385,  -627,  -388,  -627,  -390,  -395,  -627,
  -627,  -627,  -562,  -627,  -627,  -626,  -627,  -627,   -11,  -626,
  -445,  -356,  -627,  -627,  -443,  -408,  -409,  -406,  -527,  -627,
  -535,  -627,  -537,  -627,  -540,  -627,  -543,  -545,  -360,  -362,
  -366,  -627,  -371,  -304,  -627,  -305,  -627,  -627,  -627,  -626,
  -315,  -426,  -627,  -627,  -322,  -326,  -328,  -525,  -547,  -485,
  -586,  -565,  -376,  -626,  -626,  -626,  -626,  -575,  -626,  -397,
  -615,  -400,  -402,  -403,  -573,  -627,  -289,  -412,  -627,  -429,
  -432,  -444,  -626,  -515,  -516,  -627,  -627,  -280,  -442,  -532,
  -532,  -532,  -532,  -364,  -627,  -369,  -627,  -626,  -308,  -311,
  -264,  -626,  -626,  -319,  -523,  -626,  -626,  -372,  -627,  -380,
  -627,  -382,  -627,  -386,  -627,  -389,  -391,  -399,  -627,  -288,
  -606,   -56,  -438,  -626,  -627,  -627,  -289,  -627,  -533,  -536,
  -538,  -541,  -627,  -367,  -626,  -434,  -435,  -436,  -627,  -627,
  -627,  -626,  -626,  -626,  -626,  -401,  -437,  -615,  -602,  -603,
  -606,  -288,  -532,  -365,  -354,  -316,  -323,  -331,  -627,  -378,
  -381,  -384,  -387,  -426,  -534,  -626,  -379 ]

clist = [
'6,338,221,502,117,280,280,280,316,316,537,275,130,130,590,445,263,224',
'559,369,213,699,302,583,586,552,419,4,328,133,133,281,281,281,442,422',
'396,759,852,416,342,343,316,264,346,676,9,447,676,135,135,800,9,491',
'528,319,429,435,840,323,333,334,125,208,823,843,113,376,726,117,114',
'639,540,543,803,130,929,267,273,276,957,377,679,379,381,384,387,390',
'393,379,734,737,130,402,403,404,405,496,855,711,712,331,620,298,749',
'623,29,487,963,932,378,961,29,504,300,506,394,508,833,509,510,357,866',
'679,282,282,282,29,118,604,603,347,605,869,995,359,29,29,29,758,29,606',
'762,948,336,802,634,502,278,292,293,905,804,667,335,670,960,550,9,706',
'340,671,672,408,415,29,549,406,486,810,29,29,494,814,29,495,815,1025',
'740,827,912,375,380,383,957,280,676,676,801,1,985,386,389,392,430,876',
'764,765,395,867,356,207,838,908,414,420,124,835,567,418,423,440,444',
'899,929,439,963,418,29,1035,951,679,847,29,29,29,29,29,453,559,608,807',
'339,2,400,840,709,839,721,841,546,280,354,1023,753,373,636,280,669,370',
'280,493,329,685,538,864,738,337,344,856,345,694,452,857,746,992,,281',
'843,840,,507,423,,316,,281,953,660,501,501,1043,,,559,377,705,,,,,316',
'525,117,,,429,435,275,799,,,,,,529,,,301,794,522,,,29,29,29,29,498,587',
'588,518,29,29,29,29,29,29,532,316,677,316,1044,549,526,680,547,820,813',
'29,,515,513,889,890,687,117,,,840,,842,16,844,,593,511,1026,16,,512',
'282,,,,940,690,298,,,282,677,298,29,549,,690,,514,29,996,918,29,520',
',492,16,607,,,,860,,721,497,,849,816,,,,727,29,640,29,,6,,589,29,130',
'647,,,,954,741,652,955,819,567,,,,501,501,,133,646,280,548,676,783,632',
'29,430,,690,788,559,870,871,830,979,,,872,135,,29,29,445,9,,423,807',
'439,,807,,633,807,,807,16,679,662,773,,647,,677,549,16,,567,,,645,,',
',413,,651,663,646,,797,,,316,655,663,663,280,,997,1036,316,816,,,,430',
'529,,301,817,,,818,29,529,430,941,,828,,721,423,721,1031,,,439,,,,956',
'826,958,,834,806,439,668,673,674,,,939,,,,,,,942,,846,,,,980,683,981',
'682,982,16,29,686,,,,807,280,807,,807,447,807,301,,,430,865,301,,702',
',,,567,16,567,,735,735,,,423,,675,972,690,439,,,,,983,721,754,882,,',
'812,,,,,,,,807,987,29,,,,,,,,,29,559,,567,,,,1032,703,1033,130,1034',
'779,781,29,640,,,784,786,805,16,444,16,,,1042,133,16,721,316,721,,1027',
'811,,,,,,,316,640,663,529,,647,135,501,652,,1029,1030,16,,821,,1055',
',,772,1053,29,646,805,29,,721,,,,29,824,829,418,,,,,,,,874,29,,950,',
'29,797,549,,797,,797,,861,640,,,,280,,,,824,,824,430,778,,,,,822,859',
',,,,,,,29,29,,423,439,,29,29,868,16,29,,806,873,,806,130,,,851,990,',
',883,,,,,,501,,316,,,,,17,805,,,567,,17,,893,895,897,,,,892,892,892',
',,,875,225,,,,,,,29,29,225,225,225,567,17,307,307,797,910,797,,797,914',
'797,,934,,615,,617,,,621,1037,,621,,,943,225,,,640,615,225,225,,29,225',
'351,,,731,29,690,733,,735,16,29,29,,,806,,944,29,797,,316,917,,,,,,',
'29,,,,316,,,928,,,,,,,,17,,,,,225,225,225,225,17,,,,,,,,947,,29,,,,29',
'29,,,,,,,,,,29,,,16,,,16,,,,798,1007,,994,,,999,1001,1003,1005,,1006',
'892,892,892,892,,892,,29,,29,29,,,,,439,,,,29,29,,,,,,,1014,831,832',
',,,836,,280,836,,824,17,225,225,225,,430,,,225,225,225,225,225,225,',
',,,,29,,423,,29,,17,439,640,,,,,824,1049,1050,1051,1052,,,892,892,892',
'892,41,,,,881,,41,,,,29,,,,1056,,225,,,,892,,225,16,16,225,,,,,,,,,41',
'305,305,,,767,,,767,29,,17,,17,,904,,307,17,906,907,,,,29,,715,717,719',
'29,911,,29,29,307,349,,,371,,16,16,,17,,,,16,,,29,,,,,,,,225,225,,936',
'937,,,,,,,,,601,,601,,,,,41,,,,,,,,,41,,,,,16,,,836,16,16,798,330,,798',
',798,341,341,,16,341,,968,,,,971,,,,,,,17,,,,,,,,,42,,,,,,42,,16,16',
',,,,991,,,,16,,,,,,,,,341,341,341,341,,,,42,306,306,,,225,,,,41,,,,1012',
',,,,,,,,,16,,,,16,1024,,,,,1028,41,350,,,372,,,798,,798,,798,,798,,',
',,,,,,,16,,,,,17,,,,,,,307,,225,,,,,,307,42,,,,,,,225,,42,,,16,798,',
'448,449,450,451,41,,41,,,,305,41,16,,,,,16,,,16,16,,,,19,,305,,,,19',
',,,,41,,,,17,,18,17,,,,,18,225,,920,922,,924,926,,927,,19,,225,,,371',
'225,371,,,,,,,,,,18,309,309,,42,,,,,,,,,,,,,,355,,,,,,225,225,,,,42',
'225,225,,,225,353,,,41,,,,,,,,,,,341,341,,,,,,,,,,,19,,,,307,,,,,19',
',,,,,307,,18,,,,,,,,,18,17,17,,,42,,42,,,,306,42,,,,,,,,,,,,,,,,306',
'1018,1019,1020,1021,,,,,42,,,225,,,,,,225,,,,,,17,17,,,41,,,17,,,,305',
',372,,372,,19,225,305,,,,,,,443,,,,,,,,18,,,,,,1054,,19,,,,,,,902,,',
'17,,,,17,17,,18,,,,42,,,,17,,,,,,,,41,,,41,,,,,,,,,,,,,,,,,,225,,17',
'17,,698,,,,19,,19,17,225,,,19,,,,,,,,,,18,,18,,,,309,18,,,,,,,,19,,',
',,,964,,309,,17,,,,17,,,18,975,,,,,,,,,,,,,42,,757,,,,763,306,305,,',
',,17,602,306,602,,,305,,,,,,,,,,,,41,41,,,,,,,,,,,,,,17,19,,,,,,,,,',
',,,,17,,,18,,17,,,17,17,42,,,42,,,,,,,,41,41,,,,225,,41,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,371,,,41,,,,41,41,,,,,341,,,,,41,,,19,',
',,,,,,,,,,,,,,,18,,,306,,,,309,,,,41,41,,306,309,,,,,,41,,,,,42,42,',
',,,,,,,,,,,,,,,,,,,,,,,,,19,,371,19,,,41,,,,41,,,,973,,,18,,,18,,,42',
'42,,,,,341,42,,,,,,,,,,41,,341,,,,,,,,,,,,,,,,,,,,,,,,,,,,443,,372,41',
',42,,,,42,42,,,,,,,,41,,42,,,41,,,41,41,,,,,,,,,,,,,,,,,,,,,309,,,42',
'42,,19,19,,,,309,,42,,,,,,,,,,18,18,,,,,,,,,,,,,,,,,,,,,,,,372,,,,42',
',,,42,19,19,,974,,,,19,,,,,,,,,,18,18,,,,,880,18,,,,,42,,,,,,,,,,,,',
',,,,,,,,,,19,,,,19,19,,,,,42,,,,602,19,,18,232,,,18,18,,,42,,279,279',
'279,42,,18,42,42,,,,,,325,326,327,,,,19,19,,,,,,,,,19,279,,,,,,18,18',
',,,,,,,,18,,,,,,,,,,,,,,,,,,,,,,19,,,,19,,,,978,,,,,602,,,,18,,,,18',
',,,977,,,,,,,,,19,,,,,,,,,,,,,,,,,18,,,,,,,,,,,,,,,,19,,,,,,,,,,,,,',
',19,,18,,,19,,,19,19,,,,,,,,18,,,,,18,,,18,18,,279,421,279,,,,,441,446',
',,,,,,,,,,,,,,232,,,460,461,462,463,464,465,466,467,468,469,470,471',
'472,473,474,475,476,477,478,479,480,481,482,483,484,485,,,,,,,279,,',
',,,279,,,279,,,,,,,279,,279,,279,,279,279,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,534,,,,,,,,,279,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,279,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,279,,441,661,421,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,279',
',,279,,279,,,,,,,,,,,,,,,,279,,,,,,,,,696,697,,,,,,,,,,279,,,279,,,',
',,,,,,,,,,,,,,,,,,,,,,,279,,,,,,,,,,,,,,,,,,,,,279,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,279,775,,,279,279,780,782,,,,,785,787,,,661',
'789,,,,,,,,,,,,,,,,,,,,,,,,279,,,279,,,,,,,,,,,,,,,,,,,279,,,,,,,,,',
',,,,,,,,,,279,,,,,,,,,,,,,,,,,,,,279,,,,,,,,,,,,279,,,,,,,,,,,,,,,,',
',,,,,279,,884,,,,,,,,,,,,,,780,782,787,785,,887,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',279,884,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,279,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,279' ]
        racc_goto_table = arr = ::Array.new(3166, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'6,89,34,76,98,36,36,36,68,68,10,74,61,61,95,20,154,22,184,60,27,13,53',
'92,92,153,30,2,34,64,64,71,71,71,30,25,60,99,93,69,19,19,68,39,19,77',
'9,69,77,65,65,143,9,42,55,54,40,40,189,67,6,71,17,17,14,194,5,170,133',
'98,8,26,72,72,146,61,131,41,41,41,195,6,199,6,6,6,6,6,6,6,94,94,61,19',
'19,19,19,25,14,138,138,51,174,49,58,174,44,40,149,134,171,148,44,69',
'50,69,171,69,146,69,69,110,111,199,73,73,73,44,7,112,59,5,59,113,114',
'115,44,44,44,116,44,117,118,119,70,135,66,76,48,48,48,46,141,43,73,45',
'147,150,9,151,152,43,43,33,31,44,69,9,155,156,44,44,159,160,44,161,162',
'163,164,165,166,169,172,173,195,36,77,77,144,1,134,176,177,178,74,179',
'180,181,182,183,21,18,187,15,22,22,11,191,188,71,6,22,22,146,131,61',
'149,71,44,148,192,199,133,44,44,44,44,44,27,184,198,190,91,3,7,189,153',
'144,132,144,88,36,96,134,97,87,69,36,75,100,36,74,101,55,102,58,95,103',
'104,105,106,55,51,107,108,109,,71,194,189,,170,6,,68,,71,143,25,6,6',
'134,,,184,6,72,,,,,68,34,98,,,40,40,74,142,,,,,,53,,,12,26,27,,,44,44',
'44,44,51,19,19,54,44,44,44,44,44,44,27,68,69,68,93,69,67,69,6,26,43',
'44,,51,9,138,138,25,98,,,189,,142,23,142,,27,5,14,23,,8,73,,,,94,40',
'49,,,73,69,49,44,69,,40,,50,44,99,138,44,50,,48,23,39,,,,26,,132,48',
',132,76,,,,69,44,34,44,,6,,5,44,61,74,,,,144,25,74,144,55,188,,,,6,6',
',64,6,36,73,77,42,2,44,74,,40,42,184,10,10,72,144,,,153,65,,44,44,20',
'9,,6,190,61,,190,,17,190,,190,23,199,34,69,,74,,69,69,23,,188,,,41,',
',,12,,41,6,6,,137,,,68,51,6,6,36,,138,13,68,76,,,,74,53,,12,69,,,69',
'44,53,74,26,,30,,132,6,132,144,,,61,,,,142,69,142,,137,188,61,41,51',
'51,,,92,,,,,,,10,,69,,,,142,51,142,9,142,23,44,51,,,,190,36,190,,190',
'69,190,12,,,74,25,12,,51,,,,188,23,188,,98,98,,,6,,73,92,40,61,,,,,132',
'132,98,69,,,89,,,,,,,,190,92,44,,,,,,,,,44,184,,188,,,,142,73,142,61',
'142,22,22,44,34,,,22,22,34,23,22,23,,,142,64,23,132,68,132,,95,154,',
',,,,,68,34,6,53,,74,65,6,74,,10,10,23,,53,,142,,,17,26,44,6,34,44,,132',
',,,44,6,6,71,,,,,,,,60,44,,137,,44,137,69,,137,,137,,19,34,,,,36,,,',
'6,,6,74,73,,,,,51,71,,,,,,,,44,44,,6,61,,44,44,98,23,44,,188,98,,188',
'61,,,51,69,,,22,,,,,,6,,68,,,,,24,34,,,188,,24,,140,140,140,,,,6,6,6',
',,,51,24,,,,,,,44,44,24,24,24,188,24,24,24,137,6,137,,137,6,137,,19',
',175,,175,,,175,25,,175,,,19,24,,,34,175,24,24,,44,24,24,,,12,44,40',
'12,,98,23,44,44,,,188,,98,44,137,,68,51,,,,,,,44,,,,68,,,51,,,,,,,,24',
',,,,24,24,24,24,24,,,,,,,,51,,44,,,,44,44,,,,,,,,,,44,,,23,,,23,,,,139',
'34,,98,,,140,140,140,140,,140,6,6,6,6,,6,,44,,44,44,,,,,61,,,,44,44',
',,,,,,27,12,12,,,,139,,36,139,,6,24,24,24,24,,74,,,24,24,24,24,24,24',
',,,,,44,,6,,44,,24,61,34,,,,,6,140,140,140,140,,,6,6,6,6,56,,,,12,,56',
',,,44,,,,140,,24,,,,6,,24,23,23,24,,,,,,,,,56,56,56,,,175,,,175,44,',
'24,,24,,12,,24,24,12,12,,,,44,,186,186,186,44,12,,44,44,24,56,,,56,',
'23,23,,24,,,,23,,,44,,,,,,,,24,24,,12,12,,,,,,,,,24,,24,,,,,56,,,,,',
',,,56,,,,,23,,,139,23,23,139,32,,139,,139,32,32,,23,32,,12,,,,12,,,',
',,,24,,,,,,,,,57,,,,,,57,,23,23,,,,,12,,,,23,,,,,,,,,32,32,32,32,,,',
'57,57,57,,,24,,,,56,,,,12,,,,,,,,,,23,,,,23,12,,,,,12,56,57,,,57,,,139',
',139,,139,,139,,,,,,,,,,23,,,,,24,,,,,,,24,,24,,,,,,24,57,,,,,,,24,',
'57,,,23,139,,32,32,32,32,56,,56,,,,56,56,23,,,,,23,,,23,23,,,,29,,56',
',,,29,,,,,56,,,,24,,28,24,,,,,28,24,,186,186,,186,186,,186,,29,,24,',
',56,24,56,,,,,,,,,,28,28,28,,57,,,,,,,,,,,,,,29,,,,,,24,24,,,,57,24',
'24,,,24,28,,,56,,,,,,,,,,,32,32,,,,,,,,,,,29,,,,24,,,,,29,,,,,,24,,28',
',,,,,,,,28,24,24,,,57,,57,,,,57,57,,,,,,,,,,,,,,,,57,186,186,186,186',
',,,,57,,,24,,,,,,24,,,,,,24,24,,,56,,,24,,,,56,,57,,57,,29,24,56,,,',
',,,29,,,,,,,,28,,,,,,186,,29,,,,,,,24,,,24,,,,24,24,,28,,,,57,,,,24',
',,,,,,,56,,,56,,,,,,,,,,,,,,,,,,24,,24,24,,32,,,,29,,29,24,24,,,29,',
',,,,,,,,28,,28,,,,28,28,,,,,,,,29,,,,,,24,,28,,24,,,,24,,,28,24,,,,',
',,,,,,,,57,,32,,,,32,57,56,,,,,24,28,57,28,,,56,,,,,,,,,,,,56,56,,,',
',,,,,,,,,,24,29,,,,,,,,,,,,,,24,,,28,,24,,,24,24,57,,,57,,,,,,,,56,56',
',,,24,,56,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,56,,,56,,,,56,56',
',,,,32,,,,,56,,,29,,,,,,,,,,,,,,,,,28,,,57,,,,28,,,,56,56,,57,28,,,',
',,56,,,,,57,57,,,,,,,,,,,,,,,,,,,,,,,,,,,29,,56,29,,,56,,,,56,,,,56',
',,28,,,28,,,57,57,,,,,32,57,,,,,,,,,,56,,32,,,,,,,,,,,,,,,,,,,,,,,,',
',,,29,,57,56,,57,,,,57,57,,,,,,,,56,,57,,,56,,,56,56,,,,,,,,,,,,,,,',
',,,,,28,,,57,57,,29,29,,,,28,,57,,,,,,,,,,28,28,,,,,,,,,,,,,,,,,,,,',
',,,57,,,,57,,,,57,29,29,,57,,,,29,,,,,,,,,,28,28,,,,,28,28,,,,,57,,',
',,,,,,,,,,,,,,,,,,,,29,,,,29,29,,,,,57,,,,28,29,,28,35,,,28,28,,,57',
',35,35,35,57,,28,57,57,,,,,,35,35,35,,,,29,29,,,,,,,,,29,35,,,,,,28',
'28,,,,,,,,,28,,,,,,,,,,,,,,,,,,,,,,29,,,,29,,,,29,,,,,28,,,,28,,,,28',
',,,28,,,,,,,,,29,,,,,,,,,,,,,,,,,28,,,,,,,,,,,,,,,,29,,,,,,,,,,,,,,',
'29,,28,,,29,,,29,29,,,,,,,,28,,,,,28,,,28,28,,35,35,35,,,,,35,35,,,',
',,,,,,,,,,,35,,,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35',
'35,35,35,35,35,35,35,35,,,,,,,35,,,,,,35,,,35,,,,,,,35,,35,,35,,35,35',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,35,,,,,,,,,35,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,35,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,35,,35,35,35,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,35,,,35,,35,,,,,,,,,,,,,,,,35,,,,,,,,,35,35,,,,,,',
',,,35,,,35,,,,,,,,,,,,,,,,,,,,,,,,,,,35,,,,,,,,,,,,,,,,,,,,,35,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,35,35,,,35,35,35,35,,,,,35,35',
',,35,35,,,,,,,,,,,,,,,,,,,,,,,,35,,,35,,,,,,,,,,,,,,,,,,,35,,,,,,,,',
',,,,,,,,,,,35,,,,,,,,,,,,,,,,,,,,35,,,,,,,,,,,,35,,,,,,,,,,,,,,,,,,',
',,,35,,35,,,,,,,,,,,,,,35,35,35,35,,35,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,35,35,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,35,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,35' ]
        racc_goto_check = arr = ::Array.new(3166, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_goto_pointer = [
   nil,   189,    25,   233,   nil,    61,    -2,   120,    65,    44,
  -319,   196,   272,  -515,  -635,  -620,   nil,    51,   189,   -26,
  -203,   129,    -6,   349,   781,  -177,  -351,     3,  1364,  1347,
  -184,   -46,  1105,    38,   -20,  2152,   -27,   nil,   nil,    16,
  -157,    48,  -214,  -333,   104,  -335,  -662,   nil,   116,    67,
    78,    40,   nil,   -15,    17,  -266,  1031,  1195,  -495,  -227,
   -55,     1,   nil,   nil,    18,    38,  -266,    15,   -29,  -171,
    82,    -1,  -262,    92,   -19,  -239,  -279,  -455,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   171,   -97,   -63,
   nil,   167,  -319,  -693,  -497,  -333,   171,  -359,    -1,  -569,
   175,   192,   -76,   194,   190,  -475,   191,  -474,  -332,  -675,
    49,  -631,  -229,  -624,  -810,    62,  -466,  -228,  -465,  -731,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,  -772,  -330,  -500,  -741,  -520,   nil,  -178,  -454,   274,
    -8,  -513,  -366,  -614,  -477,   nil,  -591,  -744,  -789,  -792,
  -183,  -391,    95,  -315,    -9,   -94,  -498,   nil,   nil,   -99,
  -498,   -97,  -496,  -814,  -413,  -521,  -647,   nil,   nil,   101,
   -16,    25,    96,    96,  -281,   452,   103,   103,   103,  -569,
  -416,  -416,   107,  -556,  -322,   nil,   537,  -512,  -132,  -656,
  -434,  -503,  -668,   nil,  -651,  -814,   nil,   nil,  -144,  -421 ]

racc_goto_default = [
   nil,   nil,   nil,   nil,     5,   nil,   295,     7,   348,   296,
   nil,   nil,   536,   nil,   853,   nil,   294,   nil,   nil,   nil,
    14,    15,    21,   231,   324,   nil,   nil,   751,   229,   230,
   nil,   nil,    20,   nil,   332,    24,    25,    26,    27,   nil,
   693,   nil,   nil,   nil,   313,   nil,   nil,    28,   424,    35,
   nil,   nil,    37,    40,    39,   nil,   226,   227,   600,   nil,
   132,   432,   131,   134,    78,    79,   nil,    93,    49,   285,
   nil,   425,   nil,   426,   437,   648,   499,   283,   268,    50,
    51,    52,    53,    54,    55,    56,    57,    58,   nil,   269,
    64,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   584,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   723,   566,   nil,   724,   952,   796,   554,   nil,   555,
   nil,   nil,   556,   nil,   558,   664,   nil,   nil,   nil,   564,
   nil,   nil,   nil,   761,   nil,   nil,   nil,   436,   270,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    77,    80,    82,
   nil,   nil,   nil,   nil,   nil,   610,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   837,   553,   nil,   557,   845,   569,
   571,   572,   808,   575,   576,   809,   579,   582,   nil,   289 ]

racc_reduce_table = [
  0, 0, :racc_error,
  0, 149, :_reduce_1,
  2, 147, :_reduce_2,
  2, 148, :_reduce_3,
  1, 150, :_reduce_none,
  1, 150, :_reduce_none,
  3, 150, :_reduce_6,
  2, 150, :_reduce_none,
  1, 153, :_reduce_8,
  0, 157, :_reduce_9,
  5, 153, :_reduce_10,
  4, 156, :_reduce_11,
  2, 158, :_reduce_12,
  1, 162, :_reduce_none,
  1, 162, :_reduce_none,
  3, 162, :_reduce_15,
  2, 162, :_reduce_16,
  0, 179, :_reduce_17,
  4, 155, :_reduce_18,
  3, 155, :_reduce_19,
  3, 155, :_reduce_20,
  3, 155, :_reduce_21,
  2, 155, :_reduce_22,
  3, 155, :_reduce_23,
  3, 155, :_reduce_24,
  3, 155, :_reduce_25,
  3, 155, :_reduce_26,
  3, 155, :_reduce_27,
  4, 155, :_reduce_28,
  1, 155, :_reduce_none,
  3, 155, :_reduce_30,
  3, 155, :_reduce_31,
  6, 155, :_reduce_32,
  5, 155, :_reduce_33,
  5, 155, :_reduce_34,
  5, 155, :_reduce_35,
  5, 155, :_reduce_36,
  3, 155, :_reduce_37,
  3, 155, :_reduce_38,
  3, 155, :_reduce_39,
  1, 155, :_reduce_none,
  3, 166, :_reduce_41,
  3, 166, :_reduce_42,
  1, 178, :_reduce_none,
  3, 178, :_reduce_44,
  3, 178, :_reduce_45,
  3, 178, :_reduce_46,
  2, 178, :_reduce_47,
  1, 178, :_reduce_none,
  1, 165, :_reduce_49,
  1, 168, :_reduce_none,
  1, 168, :_reduce_none,
  1, 183, :_reduce_none,
  4, 183, :_reduce_53,
  0, 191, :_reduce_54,
  0, 192, :_reduce_55,
  6, 188, :_reduce_56,
  1, 190, :_reduce_57,
  2, 182, :_reduce_58,
  3, 182, :_reduce_59,
  4, 182, :_reduce_60,
  5, 182, :_reduce_61,
  4, 182, :_reduce_62,
  5, 182, :_reduce_63,
  2, 182, :_reduce_64,
  2, 182, :_reduce_65,
  2, 182, :_reduce_66,
  2, 182, :_reduce_67,
  2, 182, :_reduce_68,
  1, 167, :_reduce_none,
  3, 167, :_reduce_70,
  1, 196, :_reduce_none,
  3, 196, :_reduce_72,
  1, 195, :_reduce_73,
  2, 195, :_reduce_74,
  3, 195, :_reduce_75,
  5, 195, :_reduce_76,
  2, 195, :_reduce_77,
  4, 195, :_reduce_78,
  2, 195, :_reduce_79,
  4, 195, :_reduce_80,
  1, 195, :_reduce_81,
  3, 195, :_reduce_82,
  1, 199, :_reduce_none,
  3, 199, :_reduce_84,
  2, 198, :_reduce_85,
  3, 198, :_reduce_86,
  1, 201, :_reduce_87,
  3, 201, :_reduce_88,
  1, 200, :_reduce_89,
  1, 200, :_reduce_90,
  4, 200, :_reduce_91,
  3, 200, :_reduce_92,
  3, 200, :_reduce_93,
  3, 200, :_reduce_94,
  3, 200, :_reduce_95,
  2, 200, :_reduce_96,
  1, 200, :_reduce_97,
  1, 175, :_reduce_98,
  1, 175, :_reduce_99,
  4, 175, :_reduce_100,
  3, 175, :_reduce_101,
  3, 175, :_reduce_102,
  3, 175, :_reduce_103,
  3, 175, :_reduce_104,
  2, 175, :_reduce_105,
  1, 175, :_reduce_106,
  1, 204, :_reduce_107,
  1, 204, :_reduce_none,
  2, 205, :_reduce_109,
  1, 205, :_reduce_110,
  3, 205, :_reduce_111,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_115,
  1, 206, :_reduce_116,
  1, 209, :_reduce_none,
  1, 209, :_reduce_none,
  1, 163, :_reduce_119,
  1, 163, :_reduce_none,
  1, 164, :_reduce_121,
  0, 212, :_reduce_122,
  4, 164, :_reduce_123,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 208, :_reduce_none,
  1, 208, :_reduce_none,
  1, 208, :_reduce_none,
  1, 208, :_reduce_none,
  1, 208, :_reduce_none,
  1, 208, :_reduce_none,
  1, 208, :_reduce_none,
  1, 208, :_reduce_none,
  1, 208, :_reduce_none,
  1, 208, :_reduce_none,
  1, 208, :_reduce_none,
  1, 208, :_reduce_none,
  1, 208, :_reduce_none,
  1, 208, :_reduce_none,
  1, 208, :_reduce_none,
  1, 208, :_reduce_none,
  1, 208, :_reduce_none,
  1, 208, :_reduce_none,
  1, 208, :_reduce_none,
  1, 208, :_reduce_none,
  1, 208, :_reduce_none,
  1, 208, :_reduce_none,
  1, 208, :_reduce_none,
  1, 208, :_reduce_none,
  1, 208, :_reduce_none,
  1, 208, :_reduce_none,
  1, 208, :_reduce_none,
  1, 208, :_reduce_none,
  1, 208, :_reduce_none,
  1, 208, :_reduce_none,
  1, 208, :_reduce_none,
  1, 208, :_reduce_none,
  1, 208, :_reduce_none,
  1, 208, :_reduce_none,
  1, 208, :_reduce_none,
  1, 208, :_reduce_none,
  1, 208, :_reduce_none,
  1, 208, :_reduce_none,
  1, 208, :_reduce_none,
  1, 208, :_reduce_none,
  1, 208, :_reduce_none,
  3, 181, :_reduce_195,
  5, 181, :_reduce_196,
  3, 181, :_reduce_197,
  5, 181, :_reduce_198,
  6, 181, :_reduce_199,
  5, 181, :_reduce_200,
  5, 181, :_reduce_201,
  5, 181, :_reduce_202,
  5, 181, :_reduce_203,
  4, 181, :_reduce_204,
  3, 181, :_reduce_205,
  3, 181, :_reduce_206,
  3, 181, :_reduce_207,
  3, 181, :_reduce_208,
  3, 181, :_reduce_209,
  3, 181, :_reduce_210,
  3, 181, :_reduce_211,
  3, 181, :_reduce_212,
  3, 181, :_reduce_213,
  4, 181, :_reduce_214,
  2, 181, :_reduce_215,
  2, 181, :_reduce_216,
  3, 181, :_reduce_217,
  3, 181, :_reduce_218,
  3, 181, :_reduce_219,
  3, 181, :_reduce_220,
  3, 181, :_reduce_221,
  3, 181, :_reduce_222,
  3, 181, :_reduce_223,
  3, 181, :_reduce_224,
  3, 181, :_reduce_225,
  3, 181, :_reduce_226,
  3, 181, :_reduce_227,
  3, 181, :_reduce_228,
  3, 181, :_reduce_229,
  2, 181, :_reduce_230,
  2, 181, :_reduce_231,
  3, 181, :_reduce_232,
  3, 181, :_reduce_233,
  3, 181, :_reduce_234,
  3, 181, :_reduce_235,
  3, 181, :_reduce_236,
  6, 181, :_reduce_237,
  1, 181, :_reduce_none,
  1, 215, :_reduce_239,
  1, 216, :_reduce_none,
  2, 216, :_reduce_241,
  4, 216, :_reduce_242,
  2, 216, :_reduce_243,
  3, 220, :_reduce_244,
  1, 221, :_reduce_none,
  1, 221, :_reduce_none,
  1, 171, :_reduce_247,
  1, 171, :_reduce_248,
  2, 171, :_reduce_249,
  4, 171, :_reduce_250,
  2, 171, :_reduce_251,
  1, 194, :_reduce_252,
  2, 194, :_reduce_253,
  2, 194, :_reduce_254,
  4, 194, :_reduce_255,
  1, 194, :_reduce_256,
  0, 224, :_reduce_257,
  2, 187, :_reduce_258,
  2, 223, :_reduce_259,
  2, 222, :_reduce_260,
  1, 222, :_reduce_none,
  1, 217, :_reduce_262,
  2, 217, :_reduce_263,
  3, 217, :_reduce_264,
  4, 217, :_reduce_265,
  1, 177, :_reduce_266,
  1, 177, :_reduce_267,
  3, 176, :_reduce_268,
  4, 176, :_reduce_269,
  2, 176, :_reduce_270,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_281,
  0, 247, :_reduce_282,
  4, 214, :_reduce_283,
  2, 214, :_reduce_284,
  0, 248, :_reduce_285,
  4, 214, :_reduce_286,
  3, 214, :_reduce_287,
  3, 214, :_reduce_288,
  2, 214, :_reduce_289,
  3, 214, :_reduce_290,
  0, 249, :_reduce_291,
  4, 214, :_reduce_292,
  1, 214, :_reduce_293,
  4, 214, :_reduce_294,
  3, 214, :_reduce_295,
  1, 214, :_reduce_296,
  5, 214, :_reduce_297,
  4, 214, :_reduce_298,
  3, 214, :_reduce_299,
  2, 214, :_reduce_300,
  1, 214, :_reduce_none,
  2, 214, :_reduce_302,
  2, 214, :_reduce_303,
  6, 214, :_reduce_304,
  6, 214, :_reduce_305,
  0, 250, :_reduce_306,
  0, 251, :_reduce_307,
  7, 214, :_reduce_308,
  0, 252, :_reduce_309,
  0, 253, :_reduce_310,
  7, 214, :_reduce_311,
  5, 214, :_reduce_312,
  4, 214, :_reduce_313,
  0, 254, :_reduce_314,
  0, 255, :_reduce_315,
  9, 214, :_reduce_316,
  0, 256, :_reduce_317,
  0, 257, :_reduce_318,
  7, 214, :_reduce_319,
  0, 258, :_reduce_320,
  0, 259, :_reduce_321,
  0, 260, :_reduce_322,
  9, 214, :_reduce_323,
  0, 261, :_reduce_324,
  0, 262, :_reduce_325,
  6, 214, :_reduce_326,
  0, 263, :_reduce_327,
  6, 214, :_reduce_328,
  0, 264, :_reduce_329,
  0, 265, :_reduce_330,
  9, 214, :_reduce_331,
  1, 214, :_reduce_332,
  1, 214, :_reduce_333,
  1, 214, :_reduce_334,
  1, 214, :_reduce_335,
  1, 170, :_reduce_336,
  1, 266, :_reduce_none,
  1, 267, :_reduce_none,
  1, 268, :_reduce_none,
  1, 269, :_reduce_none,
  1, 270, :_reduce_none,
  1, 271, :_reduce_none,
  1, 272, :_reduce_none,
  1, 273, :_reduce_none,
  1, 274, :_reduce_none,
  1, 275, :_reduce_none,
  1, 276, :_reduce_none,
  1, 238, :_reduce_none,
  1, 238, :_reduce_none,
  2, 238, :_reduce_none,
  1, 240, :_reduce_none,
  1, 240, :_reduce_none,
  1, 239, :_reduce_none,
  5, 239, :_reduce_354,
  1, 160, :_reduce_none,
  2, 160, :_reduce_356,
  1, 242, :_reduce_none,
  1, 242, :_reduce_358,
  1, 277, :_reduce_none,
  3, 277, :_reduce_360,
  1, 280, :_reduce_361,
  3, 280, :_reduce_362,
  1, 279, :_reduce_363,
  4, 279, :_reduce_364,
  6, 279, :_reduce_365,
  3, 279, :_reduce_366,
  5, 279, :_reduce_367,
  2, 279, :_reduce_368,
  4, 279, :_reduce_369,
  1, 279, :_reduce_370,
  3, 279, :_reduce_371,
  4, 281, :_reduce_372,
  2, 281, :_reduce_373,
  2, 281, :_reduce_374,
  1, 281, :_reduce_375,
  2, 286, :_reduce_376,
  1, 286, :_reduce_none,
  6, 287, :_reduce_378,
  8, 287, :_reduce_379,
  4, 287, :_reduce_380,
  6, 287, :_reduce_381,
  4, 287, :_reduce_382,
  2, 287, :_reduce_383,
  6, 287, :_reduce_384,
  2, 287, :_reduce_385,
  4, 287, :_reduce_386,
  6, 287, :_reduce_387,
  2, 287, :_reduce_388,
  4, 287, :_reduce_389,
  2, 287, :_reduce_390,
  4, 287, :_reduce_391,
  1, 287, :_reduce_392,
  1, 189, :_reduce_393,
  1, 189, :_reduce_none,
  3, 291, :_reduce_395,
  1, 291, :_reduce_396,
  4, 291, :_reduce_397,
  1, 292, :_reduce_none,
  4, 292, :_reduce_399,
  1, 293, :_reduce_400,
  3, 293, :_reduce_401,
  1, 294, :_reduce_402,
  1, 294, :_reduce_none,
  0, 298, :_reduce_404,
  3, 237, :_reduce_405,
  4, 296, :_reduce_406,
  1, 296, :_reduce_407,
  3, 297, :_reduce_408,
  3, 297, :_reduce_409,
  0, 301, :_reduce_410,
  0, 302, :_reduce_411,
  6, 300, :_reduce_412,
  2, 184, :_reduce_413,
  4, 184, :_reduce_414,
  5, 184, :_reduce_415,
  5, 184, :_reduce_416,
  0, 304, :_reduce_417,
  3, 236, :_reduce_418,
  4, 236, :_reduce_419,
  4, 236, :_reduce_420,
  3, 236, :_reduce_421,
  3, 236, :_reduce_422,
  3, 236, :_reduce_423,
  2, 236, :_reduce_424,
  1, 236, :_reduce_425,
  4, 236, :_reduce_426,
  0, 305, :_reduce_427,
  0, 306, :_reduce_428,
  6, 235, :_reduce_429,
  0, 307, :_reduce_430,
  0, 308, :_reduce_431,
  6, 235, :_reduce_432,
  0, 310, :_reduce_433,
  6, 241, :_reduce_434,
  1, 309, :_reduce_none,
  1, 309, :_reduce_none,
  6, 159, :_reduce_437,
  0, 159, :_reduce_438,
  1, 311, :_reduce_439,
  1, 311, :_reduce_none,
  1, 311, :_reduce_none,
  2, 312, :_reduce_442,
  1, 312, :_reduce_none,
  2, 161, :_reduce_444,
  1, 161, :_reduce_none,
  1, 225, :_reduce_446,
  1, 225, :_reduce_447,
  1, 225, :_reduce_none,
  1, 226, :_reduce_449,
  1, 314, :_reduce_450,
  1, 314, :_reduce_none,
  2, 314, :_reduce_452,
  3, 315, :_reduce_453,
  1, 315, :_reduce_454,
  3, 227, :_reduce_455,
  3, 228, :_reduce_456,
  3, 229, :_reduce_457,
  3, 229, :_reduce_458,
  1, 319, :_reduce_459,
  3, 319, :_reduce_460,
  1, 320, :_reduce_none,
  2, 320, :_reduce_462,
  3, 231, :_reduce_463,
  3, 231, :_reduce_464,
  1, 322, :_reduce_465,
  3, 322, :_reduce_466,
  3, 230, :_reduce_467,
  3, 230, :_reduce_468,
  3, 232, :_reduce_469,
  3, 232, :_reduce_470,
  1, 323, :_reduce_471,
  3, 323, :_reduce_472,
  1, 324, :_reduce_473,
  3, 324, :_reduce_474,
  1, 316, :_reduce_475,
  2, 316, :_reduce_476,
  1, 317, :_reduce_477,
  2, 317, :_reduce_478,
  1, 318, :_reduce_479,
  2, 318, :_reduce_480,
  1, 321, :_reduce_481,
  0, 326, :_reduce_482,
  3, 321, :_reduce_483,
  0, 327, :_reduce_484,
  4, 321, :_reduce_485,
  1, 325, :_reduce_486,
  1, 325, :_reduce_487,
  1, 325, :_reduce_488,
  1, 325, :_reduce_none,
  2, 210, :_reduce_490,
  1, 210, :_reduce_491,
  1, 328, :_reduce_none,
  1, 328, :_reduce_none,
  1, 328, :_reduce_none,
  1, 328, :_reduce_none,
  3, 211, :_reduce_496,
  1, 313, :_reduce_none,
  2, 313, :_reduce_498,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 202, :_reduce_none,
  1, 202, :_reduce_none,
  1, 202, :_reduce_none,
  1, 202, :_reduce_none,
  1, 202, :_reduce_none,
  1, 203, :_reduce_508,
  1, 203, :_reduce_509,
  1, 203, :_reduce_510,
  1, 203, :_reduce_511,
  1, 203, :_reduce_512,
  1, 203, :_reduce_513,
  1, 203, :_reduce_514,
  1, 233, :_reduce_515,
  1, 233, :_reduce_516,
  1, 169, :_reduce_517,
  1, 169, :_reduce_518,
  1, 174, :_reduce_519,
  1, 174, :_reduce_520,
  1, 243, :_reduce_521,
  0, 329, :_reduce_522,
  4, 243, :_reduce_523,
  2, 243, :_reduce_524,
  3, 245, :_reduce_525,
  2, 245, :_reduce_526,
  4, 330, :_reduce_527,
  2, 330, :_reduce_528,
  2, 330, :_reduce_529,
  1, 330, :_reduce_none,
  2, 332, :_reduce_531,
  0, 332, :_reduce_532,
  6, 299, :_reduce_533,
  8, 299, :_reduce_534,
  4, 299, :_reduce_535,
  6, 299, :_reduce_536,
  4, 299, :_reduce_537,
  6, 299, :_reduce_538,
  2, 299, :_reduce_539,
  4, 299, :_reduce_540,
  6, 299, :_reduce_541,
  2, 299, :_reduce_542,
  4, 299, :_reduce_543,
  2, 299, :_reduce_544,
  4, 299, :_reduce_545,
  1, 299, :_reduce_546,
  0, 299, :_reduce_547,
  1, 295, :_reduce_548,
  1, 295, :_reduce_549,
  1, 295, :_reduce_550,
  1, 295, :_reduce_551,
  1, 278, :_reduce_none,
  1, 278, :_reduce_553,
  1, 334, :_reduce_none,
  1, 335, :_reduce_none,
  3, 335, :_reduce_556,
  1, 288, :_reduce_557,
  3, 288, :_reduce_558,
  1, 336, :_reduce_none,
  2, 337, :_reduce_560,
  1, 337, :_reduce_561,
  2, 338, :_reduce_562,
  1, 338, :_reduce_563,
  1, 282, :_reduce_none,
  3, 282, :_reduce_565,
  1, 331, :_reduce_none,
  3, 331, :_reduce_567,
  1, 339, :_reduce_none,
  1, 339, :_reduce_none,
  2, 283, :_reduce_570,
  1, 283, :_reduce_571,
  3, 340, :_reduce_572,
  3, 341, :_reduce_573,
  1, 289, :_reduce_574,
  3, 289, :_reduce_575,
  1, 333, :_reduce_576,
  3, 333, :_reduce_577,
  1, 342, :_reduce_none,
  1, 342, :_reduce_none,
  2, 290, :_reduce_580,
  1, 290, :_reduce_581,
  1, 343, :_reduce_none,
  1, 343, :_reduce_none,
  2, 285, :_reduce_584,
  2, 284, :_reduce_585,
  0, 284, :_reduce_586,
  1, 246, :_reduce_none,
  0, 344, :_reduce_588,
  4, 246, :_reduce_589,
  1, 234, :_reduce_590,
  2, 234, :_reduce_591,
  1, 219, :_reduce_none,
  3, 219, :_reduce_593,
  3, 345, :_reduce_594,
  2, 345, :_reduce_595,
  4, 345, :_reduce_596,
  2, 345, :_reduce_597,
  2, 345, :_reduce_598,
  1, 193, :_reduce_none,
  1, 193, :_reduce_none,
  1, 193, :_reduce_none,
  1, 186, :_reduce_none,
  1, 186, :_reduce_none,
  1, 186, :_reduce_none,
  1, 186, :_reduce_none,
  1, 303, :_reduce_none,
  1, 303, :_reduce_none,
  1, 303, :_reduce_none,
  1, 185, :_reduce_none,
  1, 185, :_reduce_none,
  1, 173, :_reduce_none,
  1, 173, :_reduce_none,
  0, 151, :_reduce_none,
  1, 151, :_reduce_none,
  0, 180, :_reduce_none,
  1, 180, :_reduce_none,
  2, 197, :_reduce_none,
  2, 172, :_reduce_none,
  0, 218, :_reduce_none,
  1, 218, :_reduce_none,
  1, 218, :_reduce_none,
  1, 244, :_reduce_622,
  1, 244, :_reduce_none,
  1, 154, :_reduce_none,
  2, 154, :_reduce_625,
  0, 152, :_reduce_626 ]

racc_reduce_n = 627

racc_shift_n = 1057

racc_token_table = {
  false => 0,
  :error => 1,
  :kCLASS => 2,
  :kMODULE => 3,
  :kDEF => 4,
  :kUNDEF => 5,
  :kBEGIN => 6,
  :kRESCUE => 7,
  :kENSURE => 8,
  :kEND => 9,
  :kIF => 10,
  :kUNLESS => 11,
  :kTHEN => 12,
  :kELSIF => 13,
  :kELSE => 14,
  :kCASE => 15,
  :kWHEN => 16,
  :kWHILE => 17,
  :kUNTIL => 18,
  :kFOR => 19,
  :kBREAK => 20,
  :kNEXT => 21,
  :kREDO => 22,
  :kRETRY => 23,
  :kIN => 24,
  :kDO => 25,
  :kDO_COND => 26,
  :kDO_BLOCK => 27,
  :kDO_LAMBDA => 28,
  :kRETURN => 29,
  :kYIELD => 30,
  :kSUPER => 31,
  :kSELF => 32,
  :kNIL => 33,
  :kTRUE => 34,
  :kFALSE => 35,
  :kAND => 36,
  :kOR => 37,
  :kNOT => 38,
  :kIF_MOD => 39,
  :kUNLESS_MOD => 40,
  :kWHILE_MOD => 41,
  :kUNTIL_MOD => 42,
  :kRESCUE_MOD => 43,
  :kALIAS => 44,
  :kDEFINED => 45,
  :klBEGIN => 46,
  :klEND => 47,
  :k__LINE__ => 48,
  :k__FILE__ => 49,
  :k__ENCODING__ => 50,
  :tIDENTIFIER => 51,
  :tFID => 52,
  :tGVAR => 53,
  :tIVAR => 54,
  :tCONSTANT => 55,
  :tLABEL => 56,
  :tCVAR => 57,
  :tNTH_REF => 58,
  :tBACK_REF => 59,
  :tSTRING_CONTENT => 60,
  :tINTEGER => 61,
  :tFLOAT => 62,
  :tREGEXP_END => 63,
  :tUPLUS => 64,
  :tUMINUS => 65,
  :tUMINUS_NUM => 66,
  :tPOW => 67,
  :tCMP => 68,
  :tEQ => 69,
  :tEQQ => 70,
  :tNEQ => 71,
  :tGEQ => 72,
  :tLEQ => 73,
  :tANDOP => 74,
  :tOROP => 75,
  :tMATCH => 76,
  :tNMATCH => 77,
  :tDOT => 78,
  :tDOT2 => 79,
  :tDOT3 => 80,
  :tAREF => 81,
  :tASET => 82,
  :tLSHFT => 83,
  :tRSHFT => 84,
  :tCOLON2 => 85,
  :tCOLON3 => 86,
  :tOP_ASGN => 87,
  :tASSOC => 88,
  :tLPAREN => 89,
  :tLPAREN2 => 90,
  :tRPAREN => 91,
  :tLPAREN_ARG => 92,
  :tLBRACK => 93,
  :tLBRACK2 => 94,
  :tRBRACK => 95,
  :tLBRACE => 96,
  :tLBRACE_ARG => 97,
  :tSTAR => 98,
  :tSTAR2 => 99,
  :tAMPER => 100,
  :tAMPER2 => 101,
  :tTILDE => 102,
  :tPERCENT => 103,
  :tDIVIDE => 104,
  :tPLUS => 105,
  :tMINUS => 106,
  :tLT => 107,
  :tGT => 108,
  :tPIPE => 109,
  :tBANG => 110,
  :tCARET => 111,
  :tLCURLY => 112,
  :tRCURLY => 113,
  :tBACK_REF2 => 114,
  :tSYMBEG => 115,
  :tSTRING_BEG => 116,
  :tXSTRING_BEG => 117,
  :tREGEXP_BEG => 118,
  :tWORDS_BEG => 119,
  :tQWORDS_BEG => 120,
  :tSTRING_DBEG => 121,
  :tSTRING_DVAR => 122,
  :tSTRING_END => 123,
  :tSTRING => 124,
  :tSYMBOL => 125,
  :tNL => 126,
  :tEH => 127,
  :tCOLON => 128,
  :tCOMMA => 129,
  :tSPACE => 130,
  :tSEMI => 131,
  :tLAMBDA => 132,
  :tLAMBEG => 133,
  :tDSTAR => 134,
  :tCHAR => 135,
  :tSYMBOLS_BEG => 136,
  :tQSYMBOLS_BEG => 137,
  :tSTRING_DEND => 138,
  :tUBANG => 139,
  :tRATIONAL => 140,
  :tIMAGINARY => 141,
  :tLABEL_END => 142,
  :tLONELY => 143,
  :tEQL => 144,
  :tLOWEST => 145 }

racc_nt_base = 146

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "kCLASS",
  "kMODULE",
  "kDEF",
  "kUNDEF",
  "kBEGIN",
  "kRESCUE",
  "kENSURE",
  "kEND",
  "kIF",
  "kUNLESS",
  "kTHEN",
  "kELSIF",
  "kELSE",
  "kCASE",
  "kWHEN",
  "kWHILE",
  "kUNTIL",
  "kFOR",
  "kBREAK",
  "kNEXT",
  "kREDO",
  "kRETRY",
  "kIN",
  "kDO",
  "kDO_COND",
  "kDO_BLOCK",
  "kDO_LAMBDA",
  "kRETURN",
  "kYIELD",
  "kSUPER",
  "kSELF",
  "kNIL",
  "kTRUE",
  "kFALSE",
  "kAND",
  "kOR",
  "kNOT",
  "kIF_MOD",
  "kUNLESS_MOD",
  "kWHILE_MOD",
  "kUNTIL_MOD",
  "kRESCUE_MOD",
  "kALIAS",
  "kDEFINED",
  "klBEGIN",
  "klEND",
  "k__LINE__",
  "k__FILE__",
  "k__ENCODING__",
  "tIDENTIFIER",
  "tFID",
  "tGVAR",
  "tIVAR",
  "tCONSTANT",
  "tLABEL",
  "tCVAR",
  "tNTH_REF",
  "tBACK_REF",
  "tSTRING_CONTENT",
  "tINTEGER",
  "tFLOAT",
  "tREGEXP_END",
  "tUPLUS",
  "tUMINUS",
  "tUMINUS_NUM",
  "tPOW",
  "tCMP",
  "tEQ",
  "tEQQ",
  "tNEQ",
  "tGEQ",
  "tLEQ",
  "tANDOP",
  "tOROP",
  "tMATCH",
  "tNMATCH",
  "tDOT",
  "tDOT2",
  "tDOT3",
  "tAREF",
  "tASET",
  "tLSHFT",
  "tRSHFT",
  "tCOLON2",
  "tCOLON3",
  "tOP_ASGN",
  "tASSOC",
  "tLPAREN",
  "tLPAREN2",
  "tRPAREN",
  "tLPAREN_ARG",
  "tLBRACK",
  "tLBRACK2",
  "tRBRACK",
  "tLBRACE",
  "tLBRACE_ARG",
  "tSTAR",
  "tSTAR2",
  "tAMPER",
  "tAMPER2",
  "tTILDE",
  "tPERCENT",
  "tDIVIDE",
  "tPLUS",
  "tMINUS",
  "tLT",
  "tGT",
  "tPIPE",
  "tBANG",
  "tCARET",
  "tLCURLY",
  "tRCURLY",
  "tBACK_REF2",
  "tSYMBEG",
  "tSTRING_BEG",
  "tXSTRING_BEG",
  "tREGEXP_BEG",
  "tWORDS_BEG",
  "tQWORDS_BEG",
  "tSTRING_DBEG",
  "tSTRING_DVAR",
  "tSTRING_END",
  "tSTRING",
  "tSYMBOL",
  "tNL",
  "tEH",
  "tCOLON",
  "tCOMMA",
  "tSPACE",
  "tSEMI",
  "tLAMBDA",
  "tLAMBEG",
  "tDSTAR",
  "tCHAR",
  "tSYMBOLS_BEG",
  "tQSYMBOLS_BEG",
  "tSTRING_DEND",
  "tUBANG",
  "tRATIONAL",
  "tIMAGINARY",
  "tLABEL_END",
  "tLONELY",
  "tEQL",
  "tLOWEST",
  "$start",
  "program",
  "top_compstmt",
  "@1",
  "top_stmts",
  "opt_terms",
  "none",
  "top_stmt",
  "terms",
  "stmt",
  "bodystmt",
  "@2",
  "compstmt",
  "opt_rescue",
  "opt_else",
  "opt_ensure",
  "stmts",
  "fitem",
  "undef_list",
  "expr_value",
  "command_asgn",
  "mlhs",
  "command_call",
  "var_lhs",
  "primary_value",
  "opt_call_args",
  "rbracket",
  "call_op",
  "backref",
  "lhs",
  "mrhs",
  "mrhs_arg",
  "expr",
  "@3",
  "opt_nl",
  "arg",
  "command",
  "block_command",
  "block_call",
  "dot_or_colon",
  "operation2",
  "command_args",
  "cmd_brace_block",
  "opt_block_param",
  "fcall",
  "@4",
  "@5",
  "operation",
  "call_args",
  "mlhs_basic",
  "mlhs_inner",
  "rparen",
  "mlhs_head",
  "mlhs_item",
  "mlhs_node",
  "mlhs_post",
  "user_variable",
  "keyword_variable",
  "cname",
  "cpath",
  "fname",
  "op",
  "reswords",
  "fsym",
  "symbol",
  "dsym",
  "@6",
  "simple_numeric",
  "primary",
  "arg_value",
  "aref_args",
  "args",
  "trailer",
  "assocs",
  "paren_args",
  "opt_paren_args",
  "opt_block_arg",
  "block_arg",
  "@7",
  "literal",
  "strings",
  "xstring",
  "regexp",
  "words",
  "qwords",
  "symbols",
  "qsymbols",
  "var_ref",
  "assoc_list",
  "brace_block",
  "method_call",
  "lambda",
  "then",
  "if_tail",
  "do",
  "case_body",
  "for_var",
  "superclass",
  "term",
  "f_arglist",
  "singleton",
  "@8",
  "@9",
  "@10",
  "@11",
  "@12",
  "@13",
  "@14",
  "@15",
  "@16",
  "@17",
  "@18",
  "@19",
  "@20",
  "@21",
  "@22",
  "@23",
  "@24",
  "@25",
  "@26",
  "k_begin",
  "k_if",
  "k_unless",
  "k_while",
  "k_until",
  "k_case",
  "k_for",
  "k_class",
  "k_module",
  "k_def",
  "k_end",
  "f_marg",
  "f_norm_arg",
  "f_margs",
  "f_marg_list",
  "block_args_tail",
  "f_block_kwarg",
  "f_kwrest",
  "opt_f_block_arg",
  "f_block_arg",
  "opt_block_args_tail",
  "block_param",
  "f_arg",
  "f_block_optarg",
  "f_rest_arg",
  "block_param_def",
  "opt_bv_decl",
  "bv_decls",
  "bvar",
  "f_bad_arg",
  "f_larglist",
  "lambda_body",
  "@27",
  "f_args",
  "do_block",
  "@28",
  "@29",
  "operation3",
  "@30",
  "@31",
  "@32",
  "@33",
  "@34",
  "cases",
  "@35",
  "exc_list",
  "exc_var",
  "numeric",
  "string",
  "string1",
  "string_contents",
  "xstring_contents",
  "regexp_contents",
  "word_list",
  "word",
  "string_content",
  "symbol_list",
  "qword_list",
  "qsym_list",
  "string_dvar",
  "@36",
  "@37",
  "sym",
  "@38",
  "args_tail",
  "f_kwarg",
  "opt_args_tail",
  "f_optarg",
  "f_arg_asgn",
  "f_arg_item",
  "f_label",
  "f_kw",
  "f_block_kw",
  "kwrest_mark",
  "f_opt",
  "f_block_opt",
  "restarg_mark",
  "blkarg_mark",
  "@39",
  "assoc" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

def _reduce_1(val, _values, result)
                      self.lexer.lex_state = :expr_beg
                    
    result
end

def _reduce_2(val, _values, result)
                      result = new_compstmt val
                    
    result
end

def _reduce_3(val, _values, result)
                      result = val[0]
                    
    result
end

# reduce 4 omitted

# reduce 5 omitted

def _reduce_6(val, _values, result)
                      result = self.block_append val[0], val[2]
                    
    result
end

# reduce 7 omitted

def _reduce_8(val, _values, result)
                      result = val[0]

                      # TODO: remove once I have more confidence this is fixed
                      # result.each_of_type :call_args do |s|
                      #   debug20 666, s, result
                      # end
                    
    result
end

def _reduce_9(val, _values, result)
                      if (self.in_def || self.in_single > 0) then
                        debug20 1
                        yyerror "BEGIN in method"
                      end
                      self.env.extend
                    
    result
end

def _reduce_10(val, _values, result)
                      result = new_iter s(:preexe), nil, val[3]
                    
    result
end

def _reduce_11(val, _values, result)
                      result = new_body val
                    
    result
end

def _reduce_12(val, _values, result)
                      result = new_compstmt val
                    
    result
end

# reduce 13 omitted

# reduce 14 omitted

def _reduce_15(val, _values, result)
                      result = self.block_append val[0], val[2]
                    
    result
end

def _reduce_16(val, _values, result)
                      result = val[1]
                      debug20 2, val, result
                    
    result
end

def _reduce_17(val, _values, result)
                      lexer.lex_state = :expr_fname
                      result = self.lexer.lineno
                    
    result
end

def _reduce_18(val, _values, result)
                      result = s(:alias, val[1], val[3]).line(val[2])
                    
    result
end

def _reduce_19(val, _values, result)
                      result = s(:valias, val[1].to_sym, val[2].to_sym)
                    
    result
end

def _reduce_20(val, _values, result)
                      result = s(:valias, val[1].to_sym, :"$#{val[2]}")
                    
    result
end

def _reduce_21(val, _values, result)
                      yyerror "can't make alias for the number variables"
                    
    result
end

def _reduce_22(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_23(val, _values, result)
                      result = new_if val[2], val[0], nil
                    
    result
end

def _reduce_24(val, _values, result)
                      result = new_if val[2], nil, val[0]
                    
    result
end

def _reduce_25(val, _values, result)
                      result = new_while val[0], val[2], true
                    
    result
end

def _reduce_26(val, _values, result)
                      result = new_until val[0], val[2], true
                    
    result
end

def _reduce_27(val, _values, result)
                      result = s(:rescue, val[0], new_resbody(s(:array), val[2]))
                    
    result
end

def _reduce_28(val, _values, result)
                      if (self.in_def || self.in_single > 0) then
                        debug20 3
                        yyerror "END in method; use at_exit"
                      end
                      result = new_iter s(:postexe), 0, val[2]
                    
    result
end

# reduce 29 omitted

def _reduce_30(val, _values, result)
                      result = new_masgn val[0], val[2], :wrap
                    
    result
end

def _reduce_31(val, _values, result)
                      result = new_op_asgn val
                    
    result
end

def _reduce_32(val, _values, result)
                      result = s(:op_asgn1, val[0], val[2], val[4].to_sym, val[5])
                    
    result
end

def _reduce_33(val, _values, result)
                      result = s(:op_asgn, val[0], val[4], val[2].to_sym, val[3].to_sym)
                      if val[1] == '&.'
                        result[0] = :safe_op_asgn
                      end
                      result.line = val[0].line
                    
    result
end

def _reduce_34(val, _values, result)
                      result = s(:op_asgn, val[0], val[4], val[2].to_sym, val[3].to_sym)
                      if val[1] == '&.'
                        result[0] = :safe_op_asgn
                      end
                      result.line = val[0].line
                    
    result
end

def _reduce_35(val, _values, result)
                      result = s(:op_asgn, val[0], val[4], val[2], val[3])
                      debug20 4, val, result
                    
    result
end

def _reduce_36(val, _values, result)
                      result = s(:op_asgn, val[0], val[4], val[2], val[3])
                      debug20 5, val, result
                    
    result
end

def _reduce_37(val, _values, result)
                      self.backref_assign_error val[0]
                    
    result
end

def _reduce_38(val, _values, result)
                      result = new_assign val[0], s(:svalue, val[2])
                    
    result
end

def _reduce_39(val, _values, result)
                      result = new_masgn val[0], val[2]
                    
    result
end

# reduce 40 omitted

def _reduce_41(val, _values, result)
                      result = new_assign val[0], val[2]
                    
    result
end

def _reduce_42(val, _values, result)
                      result = new_assign val[0], val[2]
                    
    result
end

# reduce 43 omitted

def _reduce_44(val, _values, result)
                      result = logical_op :and, val[0], val[2]
                    
    result
end

def _reduce_45(val, _values, result)
                      result = logical_op :or, val[0], val[2]
                    
    result
end

def _reduce_46(val, _values, result)
                      result = s(:call, val[2], :"!")
                    
    result
end

def _reduce_47(val, _values, result)
                      result = s(:call, val[1], :"!")
                    
    result
end

# reduce 48 omitted

def _reduce_49(val, _values, result)
                      result = value_expr(val[0])
                    
    result
end

# reduce 50 omitted

# reduce 51 omitted

# reduce 52 omitted

def _reduce_53(val, _values, result)
                      result = new_call val[0], val[2].to_sym, val[3]
                    
    result
end

def _reduce_54(val, _values, result)
                      self.env.extend(:dynamic)
                      result = self.lexer.lineno
                    
    result
end

def _reduce_55(val, _values, result)
                      result = nil # self.env.dynamic.keys
                    
    result
end

def _reduce_56(val, _values, result)
                      result = new_iter nil, val[2], val[4]
                      result.line = val[1]

                      self.env.unextend
                    
    result
end

def _reduce_57(val, _values, result)
                      result = new_call nil, val[0].to_sym
                    
    result
end

def _reduce_58(val, _values, result)
                      result = val[0].concat val[1][1..-1] # REFACTOR pattern
                    
    result
end

def _reduce_59(val, _values, result)
                      result = val[0].concat val[1][1..-1]
                      if val[2] then
                        block_dup_check result, val[2]

                        result, operation = val[2], result
                        result.insert 1, operation
                      end
                    
    result
end

def _reduce_60(val, _values, result)
                      result = new_call val[0], val[2].to_sym, val[3], val[1]
                    
    result
end

def _reduce_61(val, _values, result)
                      recv, _, msg, args, block = val
                      call = new_call recv, msg.to_sym, args, val[1]

                      block_dup_check call, block

                      block.insert 1, call
                      result = block
                    
    result
end

def _reduce_62(val, _values, result)
                      result = new_call val[0], val[2].to_sym, val[3]
                    
    result
end

def _reduce_63(val, _values, result)
                      recv, _, msg, args, block = val
                      call = new_call recv, msg.to_sym, args

                      block_dup_check call, block

                      block.insert 1, call
                      result = block
                    
    result
end

def _reduce_64(val, _values, result)
                      result = new_super val[1]
                    
    result
end

def _reduce_65(val, _values, result)
                      result = new_yield val[1]
                    
    result
end

def _reduce_66(val, _values, result)
                      line = val[0].last
                      result = s(:return, ret_args(val[1])).line(line)
                    
    result
end

def _reduce_67(val, _values, result)
                      line = val[0].last
                      result = s(:break, ret_args(val[1])).line(line)
                    
    result
end

def _reduce_68(val, _values, result)
                      line = val[0].last
                      result = s(:next, ret_args(val[1])).line(line)
                    
    result
end

# reduce 69 omitted

def _reduce_70(val, _values, result)
                      result = val[1]
                    
    result
end

# reduce 71 omitted

def _reduce_72(val, _values, result)
                      result = s(:masgn, s(:array, val[1]))
                    
    result
end

def _reduce_73(val, _values, result)
                      result = s(:masgn, val[0])
                    
    result
end

def _reduce_74(val, _values, result)
                      result = s(:masgn, val[0] << val[1].compact)
                    
    result
end

def _reduce_75(val, _values, result)
                      result = s(:masgn, val[0] << s(:splat, val[2]))
                    
    result
end

def _reduce_76(val, _values, result)
                      ary1, _, splat, _, ary2 = val

                      result = list_append ary1, s(:splat, splat)
                      result.concat ary2[1..-1]
                      result = s(:masgn, result)
                    
    result
end

def _reduce_77(val, _values, result)
                      result = s(:masgn, val[0] << s(:splat))
                    
    result
end

def _reduce_78(val, _values, result)
                      ary = list_append val[0], s(:splat)
                      ary.concat val[3][1..-1]
                      result = s(:masgn, ary)
                    
    result
end

def _reduce_79(val, _values, result)
                      result = s(:masgn, s(:array, s(:splat, val[1])))
                    
    result
end

def _reduce_80(val, _values, result)
                      ary = s(:array, s(:splat, val[1]))
                      ary.concat val[3][1..-1]
                      result = s(:masgn, ary)
                    
    result
end

def _reduce_81(val, _values, result)
                      result = s(:masgn, s(:array, s(:splat)))
                    
    result
end

def _reduce_82(val, _values, result)
                      result = s(:masgn, s(:array, s(:splat), *val[2][1..-1]))
                    
    result
end

# reduce 83 omitted

def _reduce_84(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_85(val, _values, result)
                      result = s(:array, val[0])
                    
    result
end

def _reduce_86(val, _values, result)
                      result = val[0] << val[1].compact
                    
    result
end

def _reduce_87(val, _values, result)
                      result = s(:array, val[0])
                    
    result
end

def _reduce_88(val, _values, result)
                      result = list_append val[0], val[2]
                    
    result
end

def _reduce_89(val, _values, result)
                      result = self.assignable val[0]
                    
    result
end

def _reduce_90(val, _values, result)
                      result = self.assignable val[0]
                    
    result
end

def _reduce_91(val, _values, result)
                      result = self.aryset val[0], val[2]
                    
    result
end

def _reduce_92(val, _values, result)
                      result = new_attrasgn val[0], val[2], val[1]
                    
    result
end

def _reduce_93(val, _values, result)
                      result = s(:attrasgn, val[0], :"#{val[2]}=")
                    
    result
end

def _reduce_94(val, _values, result)
                      result = new_attrasgn val[0], val[2], val[1]
                    
    result
end

def _reduce_95(val, _values, result)
                      if (self.in_def || self.in_single > 0) then
                        debug20 7
                        yyerror "dynamic constant assignment"
                      end

                      result = s(:const, s(:colon2, val[0], val[2].to_sym), nil)
                    
    result
end

def _reduce_96(val, _values, result)
                      if (self.in_def || self.in_single > 0) then
                        debug20 8
                        yyerror "dynamic constant assignment"
                      end

                      result = s(:const, nil, s(:colon3, val[1].to_sym))
                    
    result
end

def _reduce_97(val, _values, result)
                      self.backref_assign_error val[0]
                    
    result
end

def _reduce_98(val, _values, result)
                      result = self.assignable val[0]
                    
    result
end

def _reduce_99(val, _values, result)
                      result = self.assignable val[0]
                      debug20 9, val, result
                    
    result
end

def _reduce_100(val, _values, result)
                      result = self.aryset val[0], val[2]
                    
    result
end

def _reduce_101(val, _values, result)
                      result = new_attrasgn val[0], val[2], val[1]
                    
    result
end

def _reduce_102(val, _values, result)
                      result = s(:attrasgn, val[0], :"#{val[2]}=")
                    
    result
end

def _reduce_103(val, _values, result)
                      result = new_attrasgn val[0], val[2], val[1]
                    
    result
end

def _reduce_104(val, _values, result)
                      if (self.in_def || self.in_single > 0) then
                        debug20 10
                        yyerror "dynamic constant assignment"
                      end

                      result = s(:const, s(:colon2, val[0], val[2].to_sym))
                    
    result
end

def _reduce_105(val, _values, result)
                      if (self.in_def || self.in_single > 0) then
                        debug20 11
                        yyerror "dynamic constant assignment"
                      end

                      result = s(:const, s(:colon3, val[1].to_sym))
                    
    result
end

def _reduce_106(val, _values, result)
                      self.backref_assign_error val[0]
                    
    result
end

def _reduce_107(val, _values, result)
                      yyerror "class/module name must be CONSTANT"
                    
    result
end

# reduce 108 omitted

def _reduce_109(val, _values, result)
                      result = s(:colon3, val[1].to_sym)
                    
    result
end

def _reduce_110(val, _values, result)
                      result = val[0].to_sym
                    
    result
end

def _reduce_111(val, _values, result)
                      result = s(:colon2, val[0], val[2].to_sym)
                    
    result
end

# reduce 112 omitted

# reduce 113 omitted

# reduce 114 omitted

def _reduce_115(val, _values, result)
                      lexer.lex_state = :expr_end
                      result = val[0]
                    
    result
end

def _reduce_116(val, _values, result)
                      lexer.lex_state = :expr_end
                      result = val[0]
                    
    result
end

# reduce 117 omitted

# reduce 118 omitted

def _reduce_119(val, _values, result)
                      result = s(:lit, val[0].to_sym)
                    
    result
end

# reduce 120 omitted

def _reduce_121(val, _values, result)
                      result = new_undef val[0]
                    
    result
end

def _reduce_122(val, _values, result)
                      lexer.lex_state = :expr_fname
                    
    result
end

def _reduce_123(val, _values, result)
                      result = new_undef val[0], val[3]
                    
    result
end

# reduce 124 omitted

# reduce 125 omitted

# reduce 126 omitted

# reduce 127 omitted

# reduce 128 omitted

# reduce 129 omitted

# reduce 130 omitted

# reduce 131 omitted

# reduce 132 omitted

# reduce 133 omitted

# reduce 134 omitted

# reduce 135 omitted

# reduce 136 omitted

# reduce 137 omitted

# reduce 138 omitted

# reduce 139 omitted

# reduce 140 omitted

# reduce 141 omitted

# reduce 142 omitted

# reduce 143 omitted

# reduce 144 omitted

# reduce 145 omitted

# reduce 146 omitted

# reduce 147 omitted

# reduce 148 omitted

# reduce 149 omitted

# reduce 150 omitted

# reduce 151 omitted

# reduce 152 omitted

# reduce 153 omitted

# reduce 154 omitted

# reduce 155 omitted

# reduce 156 omitted

# reduce 157 omitted

# reduce 158 omitted

# reduce 159 omitted

# reduce 160 omitted

# reduce 161 omitted

# reduce 162 omitted

# reduce 163 omitted

# reduce 164 omitted

# reduce 165 omitted

# reduce 166 omitted

# reduce 167 omitted

# reduce 168 omitted

# reduce 169 omitted

# reduce 170 omitted

# reduce 171 omitted

# reduce 172 omitted

# reduce 173 omitted

# reduce 174 omitted

# reduce 175 omitted

# reduce 176 omitted

# reduce 177 omitted

# reduce 178 omitted

# reduce 179 omitted

# reduce 180 omitted

# reduce 181 omitted

# reduce 182 omitted

# reduce 183 omitted

# reduce 184 omitted

# reduce 185 omitted

# reduce 186 omitted

# reduce 187 omitted

# reduce 188 omitted

# reduce 189 omitted

# reduce 190 omitted

# reduce 191 omitted

# reduce 192 omitted

# reduce 193 omitted

# reduce 194 omitted

def _reduce_195(val, _values, result)
                      result = new_assign val[0], val[2]
                    
    result
end

def _reduce_196(val, _values, result)
                      result = new_assign val[0], s(:rescue, val[2], new_resbody(s(:array), val[4]))
                    
    result
end

def _reduce_197(val, _values, result)
                      result = new_op_asgn val
                    
    result
end

def _reduce_198(val, _values, result)
                      result = new_op_asgn val
                      result = s(:rescue, result, new_resbody(s(:array), val[4]))
                    
    result
end

def _reduce_199(val, _values, result)
                      val[2][0] = :arglist if val[2]
                      result = s(:op_asgn1, val[0], val[2], val[4].to_sym, val[5])
                    
    result
end

def _reduce_200(val, _values, result)
                      result = new_op_asgn2 val
                    
    result
end

def _reduce_201(val, _values, result)
                      result = new_op_asgn2 val
                    
    result
end

def _reduce_202(val, _values, result)
                      result = s(:op_asgn, val[0], val[4], val[2].to_sym, val[3].to_sym)
                    
    result
end

def _reduce_203(val, _values, result)
                      yyerror "constant re-assignment"
                    
    result
end

def _reduce_204(val, _values, result)
                      yyerror "constant re-assignment"
                    
    result
end

def _reduce_205(val, _values, result)
                      self.backref_assign_error val[0]
                    
    result
end

def _reduce_206(val, _values, result)
                      v1, v2 = val[0], val[2]
                      if v1.node_type == :lit and v2.node_type == :lit and Integer === v1.last and Integer === v2.last then
                        result = s(:lit, (v1.last)..(v2.last))
                      else
                        result = s(:dot2, v1, v2)
                      end
                    
    result
end

def _reduce_207(val, _values, result)
                      v1, v2 = val[0], val[2]
                      if v1.node_type == :lit and v2.node_type == :lit and Integer === v1.last and Integer === v2.last then
                        result = s(:lit, (v1.last)...(v2.last))
                      else
                        result = s(:dot3, v1, v2)
                      end
                    
    result
end

def _reduce_208(val, _values, result)
                      result = new_call val[0], :+, argl(val[2])
                    
    result
end

def _reduce_209(val, _values, result)
                      result = new_call val[0], :-, argl(val[2])
                    
    result
end

def _reduce_210(val, _values, result)
                      result = new_call val[0], :*, argl(val[2])
                    
    result
end

def _reduce_211(val, _values, result)
                      result = new_call val[0], :"/", argl(val[2])
                    
    result
end

def _reduce_212(val, _values, result)
                      result = new_call val[0], :"%", argl(val[2])
                    
    result
end

def _reduce_213(val, _values, result)
                      result = new_call val[0], :**, argl(val[2])
                    
    result
end

def _reduce_214(val, _values, result)
                      result = new_call(new_call(s(:lit, val[1]), :"**", argl(val[3])), :"-@")
                    
    result
end

def _reduce_215(val, _values, result)
                      result = new_call val[1], :"+@"
                    
    result
end

def _reduce_216(val, _values, result)
                      result = new_call val[1], :"-@"
                    
    result
end

def _reduce_217(val, _values, result)
                      result = new_call val[0], :"|", argl(val[2])
                    
    result
end

def _reduce_218(val, _values, result)
                      result = new_call val[0], :"^", argl(val[2])
                    
    result
end

def _reduce_219(val, _values, result)
                      result = new_call val[0], :"&", argl(val[2])
                    
    result
end

def _reduce_220(val, _values, result)
                      result = new_call val[0], :"<=>", argl(val[2])
                    
    result
end

def _reduce_221(val, _values, result)
                      result = new_call val[0], :">", argl(val[2])
                    
    result
end

def _reduce_222(val, _values, result)
                      result = new_call val[0], :">=", argl(val[2])
                    
    result
end

def _reduce_223(val, _values, result)
                      result = new_call val[0], :"<", argl(val[2])
                    
    result
end

def _reduce_224(val, _values, result)
                      result = new_call val[0], :"<=", argl(val[2])
                    
    result
end

def _reduce_225(val, _values, result)
                      result = new_call val[0], :"==", argl(val[2])
                    
    result
end

def _reduce_226(val, _values, result)
                      result = new_call val[0], :"===", argl(val[2])
                    
    result
end

def _reduce_227(val, _values, result)
                      result = new_call val[0], :"!=", argl(val[2])
                    
    result
end

def _reduce_228(val, _values, result)
                      result = new_match val[0], val[2]
                    
    result
end

def _reduce_229(val, _values, result)
                      result = s(:not, new_match(val[0], val[2]))
                    
    result
end

def _reduce_230(val, _values, result)
                      result = new_call val[1], :"!"
                    
    result
end

def _reduce_231(val, _values, result)
                      result = new_call value_expr(val[1]), :"~"
                    
    result
end

def _reduce_232(val, _values, result)
                      val[0] = value_expr val[0]
                      val[2] = value_expr val[2]
                      result = new_call val[0], :"\<\<", argl(val[2])
                    
    result
end

def _reduce_233(val, _values, result)
                      val[0] = value_expr val[0]
                      val[2] = value_expr val[2]
                      result = new_call val[0], :">>", argl(val[2])
                    
    result
end

def _reduce_234(val, _values, result)
                      result = logical_op :and, val[0], val[2]
                    
    result
end

def _reduce_235(val, _values, result)
                      result = logical_op :or, val[0], val[2]
                    
    result
end

def _reduce_236(val, _values, result)
                      result = s(:defined, val[2])
                    
    result
end

def _reduce_237(val, _values, result)
                      result = s(:if, val[0], val[2], val[5])
                    
    result
end

# reduce 238 omitted

def _reduce_239(val, _values, result)
                      result = value_expr(val[0])
                    
    result
end

# reduce 240 omitted

def _reduce_241(val, _values, result)
                      result = args [val[0]]
                    
    result
end

def _reduce_242(val, _values, result)
                      result = args [val[0], array_to_hash(val[2])]
                    
    result
end

def _reduce_243(val, _values, result)
                      result = args [array_to_hash(val[0])]
                    
    result
end

def _reduce_244(val, _values, result)
                      result = val[1]
                    
    result
end

# reduce 245 omitted

# reduce 246 omitted

def _reduce_247(val, _values, result)
                      result = val[0]
                    
    result
end

def _reduce_248(val, _values, result)
                      result = val[0]
                    
    result
end

def _reduce_249(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_250(val, _values, result)
                      result = args [val[0], array_to_hash(val[2])]
                    
    result
end

def _reduce_251(val, _values, result)
                      result = args [array_to_hash(val[0])]
                    
    result
end

def _reduce_252(val, _values, result)
                      warning "parenthesize argument(s) for future version"
                      result = call_args val
                    
    result
end

def _reduce_253(val, _values, result)
                      result = call_args val
                      result = self.arg_blk_pass val[0], val[1]
                    
    result
end

def _reduce_254(val, _values, result)
                      result = call_args [array_to_hash(val[0])]
                      result = self.arg_blk_pass result, val[1]
                    
    result
end

def _reduce_255(val, _values, result)
                      result = call_args [val[0], array_to_hash(val[2])]
                      result = self.arg_blk_pass result, val[3]
                    
    result
end

def _reduce_256(val, _values, result)
                      result = call_args val
                    
    result
end

def _reduce_257(val, _values, result)
                      result = lexer.cmdarg.stack.dup # TODO: smell?
                      lexer.cmdarg.push true
                    
    result
end

def _reduce_258(val, _values, result)
                      lexer.cmdarg.stack.replace val[0]
                      result = val[1]
                    
    result
end

def _reduce_259(val, _values, result)
                      result = s(:block_pass, val[1])
                    
    result
end

def _reduce_260(val, _values, result)
                      result = val[1]
                    
    result
end

# reduce 261 omitted

def _reduce_262(val, _values, result)
                      result = s(:array, val[0])
                    
    result
end

def _reduce_263(val, _values, result)
                      result = s(:array, s(:splat, val[1]))
                    
    result
end

def _reduce_264(val, _values, result)
                      result = self.list_append val[0], val[2]
                    
    result
end

def _reduce_265(val, _values, result)
                      result = self.list_append val[0], s(:splat, val[3])
                    
    result
end

def _reduce_266(val, _values, result)
                      result = new_masgn_arg val[0]
                    
    result
end

def _reduce_267(val, _values, result)
                      result = new_masgn_arg val[0], :wrap
                    
    result
end

def _reduce_268(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_269(val, _values, result)
                      result = self.arg_concat val[0], val[3]
                    
    result
end

def _reduce_270(val, _values, result)
                      result = s(:splat, val[1])
                    
    result
end

# reduce 271 omitted

# reduce 272 omitted

# reduce 273 omitted

# reduce 274 omitted

# reduce 275 omitted

# reduce 276 omitted

# reduce 277 omitted

# reduce 278 omitted

# reduce 279 omitted

# reduce 280 omitted

def _reduce_281(val, _values, result)
                      result = new_call nil, val[0].to_sym
                    
    result
end

def _reduce_282(val, _values, result)
                      result = self.lexer.lineno
                    
    result
end

def _reduce_283(val, _values, result)
                      unless val[2] then
                        result = s(:nil)
                      else
                        result = s(:begin, val[2])
                      end

                      result.line = val[1]
                    
    result
end

def _reduce_284(val, _values, result)
                      debug20 13, val, result
                    
    result
end

def _reduce_285(val, _values, result)
                      lexer.lex_state = :expr_endarg
                    
    result
end

def _reduce_286(val, _values, result)
                      warning "(...) interpreted as grouped expression"
                      result = val[1]
                    
    result
end

def _reduce_287(val, _values, result)
                      result = val[1] || s(:nil)
                      result.paren = true
                    
    result
end

def _reduce_288(val, _values, result)
                      result = s(:colon2, val[0], val[2].to_sym)
                    
    result
end

def _reduce_289(val, _values, result)
                      result = s(:colon3, val[1].to_sym)
                    
    result
end

def _reduce_290(val, _values, result)
                      result = val[1] || s(:array)
                      result[0] = :array # aref_args is :args
                    
    result
end

def _reduce_291(val, _values, result)
                      result = self.lexer.lineno
                    
    result
end

def _reduce_292(val, _values, result)
                      result = new_hash val
                    
    result
end

def _reduce_293(val, _values, result)
                      result = s(:return)
                    
    result
end

def _reduce_294(val, _values, result)
                      result = new_yield val[2]
                    
    result
end

def _reduce_295(val, _values, result)
                      result = new_yield
                    
    result
end

def _reduce_296(val, _values, result)
                      result = new_yield
                    
    result
end

def _reduce_297(val, _values, result)
                      result = s(:defined, val[3])
                    
    result
end

def _reduce_298(val, _values, result)
                      result = s(:call, val[2], :"!")
                    
    result
end

def _reduce_299(val, _values, result)
                      debug20 14, val, result
                    
    result
end

def _reduce_300(val, _values, result)
                      oper, iter = val[0], val[1]
                      call = oper # FIX
                      iter.insert 1, call
                      result = iter
                      call.line = iter.line
                    
    result
end

# reduce 301 omitted

def _reduce_302(val, _values, result)
                      call, iter = val[0], val[1]
                      block_dup_check call, iter
                      iter.insert 1, call # FIX
                      result = iter
                    
    result
end

def _reduce_303(val, _values, result)
                      result = val[1] # TODO: fix lineno
                    
    result
end

def _reduce_304(val, _values, result)
                      result = new_if val[1], val[3], val[4]
                    
    result
end

def _reduce_305(val, _values, result)
                      result = new_if val[1], val[4], val[3]
                    
    result
end

def _reduce_306(val, _values, result)
                      lexer.cond.push true
                    
    result
end

def _reduce_307(val, _values, result)
                      lexer.cond.pop
                    
    result
end

def _reduce_308(val, _values, result)
                      result = new_while val[5], val[2], true
                    
    result
end

def _reduce_309(val, _values, result)
                      lexer.cond.push true
                    
    result
end

def _reduce_310(val, _values, result)
                      lexer.cond.pop
                    
    result
end

def _reduce_311(val, _values, result)
                      result = new_until val[5], val[2], true
                    
    result
end

def _reduce_312(val, _values, result)
                      (_, line), expr, _, body, _ = val
                      result = new_case expr, body, line
                    
    result
end

def _reduce_313(val, _values, result)
                      (_, line), _, body, _ = val
                      result = new_case nil, body, line
                    
    result
end

def _reduce_314(val, _values, result)
                      lexer.cond.push true
                    
    result
end

def _reduce_315(val, _values, result)
                      lexer.cond.pop
                    
    result
end

def _reduce_316(val, _values, result)
                      result = new_for val[4], val[1], val[7]
                    
    result
end

def _reduce_317(val, _values, result)
                      result = self.lexer.lineno
                    
    result
end

def _reduce_318(val, _values, result)
                      self.comments.push self.lexer.comments
                      if (self.in_def || self.in_single > 0) then
                        yyerror "class definition in method body"
                      end
                      self.env.extend
                    
    result
end

def _reduce_319(val, _values, result)
                      result = new_class val
                      self.env.unextend
                      self.lexer.comments # we don't care about comments in the body
                    
    result
end

def _reduce_320(val, _values, result)
                      result = self.lexer.lineno
                    
    result
end

def _reduce_321(val, _values, result)
                      result = self.in_def
                      self.in_def = false
                    
    result
end

def _reduce_322(val, _values, result)
                      result = self.in_single
                      self.in_single = 0
                      self.env.extend
                    
    result
end

def _reduce_323(val, _values, result)
                      result = new_sclass val
                      self.env.unextend
                      self.lexer.comments # we don't care about comments in the body
                    
    result
end

def _reduce_324(val, _values, result)
                      result = self.lexer.lineno
                    
    result
end

def _reduce_325(val, _values, result)
                      self.comments.push self.lexer.comments
                      yyerror "module definition in method body" if
                        self.in_def or self.in_single > 0

                      self.env.extend
                    
    result
end

def _reduce_326(val, _values, result)
                      result = new_module val
                      self.env.unextend
                      self.lexer.comments # we don't care about comments in the body
                    
    result
end

def _reduce_327(val, _values, result)
                      result = [self.in_def, self.lexer.cmdarg.stack.dup]

                      self.comments.push self.lexer.comments
                      self.in_def = true
                      self.env.extend
                      # TODO: local->cmdargs = cmdarg_stack;
                      # TODO: port local_push_gen and local_pop_gen
                      lexer.cmdarg.stack.replace [false]
                    
    result
end

def _reduce_328(val, _values, result)
                      in_def, cmdarg = val[2]

                      result = new_defn val

                      lexer.cmdarg.stack.replace cmdarg
                      self.env.unextend
                      self.in_def = in_def
                      self.lexer.comments # we don't care about comments in the body
                    
    result
end

def _reduce_329(val, _values, result)
                      self.comments.push self.lexer.comments
                      lexer.lex_state = :expr_fname
                    
    result
end

def _reduce_330(val, _values, result)
                      self.in_single += 1
                      self.env.extend
                      lexer.lex_state = :expr_endfn # force for args
                      result = lexer.lineno
                    
    result
end

def _reduce_331(val, _values, result)
                      result = new_defs val
                      result[3].line val[5]

                      self.env.unextend
                      self.in_single -= 1
                      self.lexer.comments # we don't care about comments in the body
                    
    result
end

def _reduce_332(val, _values, result)
                      result = s(:break)
                    
    result
end

def _reduce_333(val, _values, result)
                      result = s(:next)
                    
    result
end

def _reduce_334(val, _values, result)
                      result = s(:redo)
                    
    result
end

def _reduce_335(val, _values, result)
                      result = s(:retry)
                    
    result
end

def _reduce_336(val, _values, result)
                      result = value_expr(val[0])
                    
    result
end

# reduce 337 omitted

# reduce 338 omitted

# reduce 339 omitted

# reduce 340 omitted

# reduce 341 omitted

# reduce 342 omitted

# reduce 343 omitted

# reduce 344 omitted

# reduce 345 omitted

# reduce 346 omitted

# reduce 347 omitted

# reduce 348 omitted

# reduce 349 omitted

# reduce 350 omitted

# reduce 351 omitted

# reduce 352 omitted

# reduce 353 omitted

def _reduce_354(val, _values, result)
                      result = s(:if, val[1], val[3], val[4])
                    
    result
end

# reduce 355 omitted

def _reduce_356(val, _values, result)
                      result = val[1]
                    
    result
end

# reduce 357 omitted

def _reduce_358(val, _values, result)
                      val[0].delete_at 1 if val[0][1].nil? # HACK
                    
    result
end

# reduce 359 omitted

def _reduce_360(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_361(val, _values, result)
                      result = s(:array, val[0])
                    
    result
end

def _reduce_362(val, _values, result)
                      result = list_append val[0], val[2]
                    
    result
end

def _reduce_363(val, _values, result)
                      args, = val

                      result = block_var args
                    
    result
end

def _reduce_364(val, _values, result)
                      args, _, _, splat = val

                      result = block_var args, "*#{splat}".to_sym
                    
    result
end

def _reduce_365(val, _values, result)
                      args, _, _, splat, _, args2 = val

                      result = block_var args, "*#{splat}".to_sym, args2
                    
    result
end

def _reduce_366(val, _values, result)
                      args, _, _ = val

                      result = block_var args, :*
                    
    result
end

def _reduce_367(val, _values, result)
                      args, _, _, _, args2 = val

                      result = block_var args, :*, args2
                    
    result
end

def _reduce_368(val, _values, result)
                      _, splat = val

                      result = block_var :"*#{splat}"
                    
    result
end

def _reduce_369(val, _values, result)
                      _, splat, _, args = val

                      result = block_var :"*#{splat}", args
                    
    result
end

def _reduce_370(val, _values, result)
                      result = block_var :*
                    
    result
end

def _reduce_371(val, _values, result)
                      _, _, args = val

                      result = block_var :*, args
                    
    result
end

def _reduce_372(val, _values, result)
                      result = call_args val
                    
    result
end

def _reduce_373(val, _values, result)
                      result = call_args val
                    
    result
end

def _reduce_374(val, _values, result)
                      result = call_args val
                    
    result
end

def _reduce_375(val, _values, result)
                      result = call_args val
                    
    result
end

def _reduce_376(val, _values, result)
                      result = args val
                    
    result
end

# reduce 377 omitted

def _reduce_378(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_379(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_380(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_381(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_382(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_383(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_384(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_385(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_386(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_387(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_388(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_389(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_390(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_391(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_392(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_393(val, _values, result)
 result = 0 
    result
end

# reduce 394 omitted

def _reduce_395(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_396(val, _values, result)
                      self.lexer.command_start = true
                      result = s(:args)
                    
    result
end

def _reduce_397(val, _values, result)
                      result = args val
                    
    result
end

# reduce 398 omitted

def _reduce_399(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_400(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_401(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_402(val, _values, result)
                      result = s(:shadow, val[0].to_sym)
                    
    result
end

# reduce 403 omitted

def _reduce_404(val, _values, result)
                      self.env.extend :dynamic
                      result = self.lexer.lineno

                      result = lexer.lpar_beg
                      lexer.paren_nest += 1
                      lexer.lpar_beg = lexer.paren_nest
                    
    result
end

def _reduce_405(val, _values, result)
                      lpar, args, body = val
                      lexer.lpar_beg = lpar

                      call = new_call nil, :lambda
                      result = new_iter call, args, body
                      self.env.unextend
                    
    result
end

def _reduce_406(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_407(val, _values, result)
                      result = val[0]
                      result = 0 if result == s(:args)
                    
    result
end

def _reduce_408(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_409(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_410(val, _values, result)
                      self.env.extend :dynamic
                      result = self.lexer.lineno
                    
    result
end

def _reduce_411(val, _values, result)
                      result = nil # self.env.dynamic.keys
                    
    result
end

def _reduce_412(val, _values, result)
                      args   = val[2]
                      body   = val[4]
                      result = new_iter nil, args, body
                      result.line = val[1]

                      self.env.unextend
                    
    result
end

def _reduce_413(val, _values, result)
                      # TODO:
                      ## if (nd_type($1) == NODE_YIELD) {
                      ##     compile_error(PARSER_ARG "block given to yield");

                      syntax_error "Both block arg and actual block given." if
                        val[0].block_pass?

                      val = invert_block_call val if inverted? val

                      result = val[1]
                      result.insert 1, val[0]
                    
    result
end

def _reduce_414(val, _values, result)
                      result = new_call val[0], val[2].to_sym, val[3]
                    
    result
end

def _reduce_415(val, _values, result)
                      iter1, _, name, args, iter2 = val

                      call = new_call iter1, name.to_sym, args
                      iter2.insert 1, call

                      result = iter2
                    
    result
end

def _reduce_416(val, _values, result)
                      iter1, _, name, args, iter2 = val

                      call = new_call iter1, name.to_sym, args
                      iter2.insert 1, call

                      result = iter2
                    
    result
end

def _reduce_417(val, _values, result)
                      result = self.lexer.lineno
                    
    result
end

def _reduce_418(val, _values, result)
                      args = self.call_args val[2..-1]
                      result = val[0].concat args[1..-1]
                    
    result
end

def _reduce_419(val, _values, result)
                      result = new_call val[0], val[2].to_sym, val[3], val[1]
                    
    result
end

def _reduce_420(val, _values, result)
                      result = new_call val[0], val[2].to_sym, val[3]
                    
    result
end

def _reduce_421(val, _values, result)
                      result = new_call val[0], val[2].to_sym
                    
    result
end

def _reduce_422(val, _values, result)
                      result = new_call val[0], :call, val[2], val[1]
                    
    result
end

def _reduce_423(val, _values, result)
                      result = new_call val[0], :call, val[2]
                    
    result
end

def _reduce_424(val, _values, result)
                      result = new_super val[1]
                    
    result
end

def _reduce_425(val, _values, result)
                      result = s(:zsuper)
                    
    result
end

def _reduce_426(val, _values, result)
                      result = new_aref val
                    
    result
end

def _reduce_427(val, _values, result)
                      self.env.extend :dynamic
                      result = self.lexer.lineno
                    
    result
end

def _reduce_428(val, _values, result)
                      result = nil # self.env.dynamic.keys
                    
    result
end

def _reduce_429(val, _values, result)
                      _, line, args, _, body, _ = val

                      result = new_iter nil, args, body
                      result.line = line

                      self.env.unextend
                    
    result
end

def _reduce_430(val, _values, result)
                      self.env.extend :dynamic
                      result = self.lexer.lineno
                    
    result
end

def _reduce_431(val, _values, result)
                      result = nil # self.env.dynamic.keys
                    
    result
end

def _reduce_432(val, _values, result)
                      _, line, args, _, body, _ = val

                      result = new_iter nil, args, body
                      result.line = line

                      self.env.unextend
                    
    result
end

def _reduce_433(val, _values, result)
                      result = self.lexer.lineno
                    
    result
end

def _reduce_434(val, _values, result)
                      result = new_when(val[2], val[4])
                      result.line = val[1]
                      result << val[5] if val[5]
                    
    result
end

# reduce 435 omitted

# reduce 436 omitted

def _reduce_437(val, _values, result)
                      _, klasses, var, _, body, rest = val

                      klasses ||= s(:array)
                      klasses << new_assign(var, s(:gvar, :"$!")) if var

                      result = new_resbody(klasses, body)
                      result << rest if rest # UGH, rewritten above
                    
    result
end

def _reduce_438(val, _values, result)
                      result = nil
                    
    result
end

def _reduce_439(val, _values, result)
                      result = s(:array, val[0])
                    
    result
end

# reduce 440 omitted

# reduce 441 omitted

def _reduce_442(val, _values, result)
                      result = val[1]
                    
    result
end

# reduce 443 omitted

def _reduce_444(val, _values, result)
                      _, body = val

                      result = body || s(:nil)
                    
    result
end

# reduce 445 omitted

def _reduce_446(val, _values, result)
                      result = s(:lit, val[0])
                    
    result
end

def _reduce_447(val, _values, result)
                      result = s(:lit, val[0])
                    
    result
end

# reduce 448 omitted

def _reduce_449(val, _values, result)
                      val[0] = s(:dstr, val[0].value) if val[0][0] == :evstr
                      result = val[0]
                    
    result
end

def _reduce_450(val, _values, result)
                      debug20 23, val, result
                    
    result
end

# reduce 451 omitted

def _reduce_452(val, _values, result)
                      result = self.literal_concat val[0], val[1]
                    
    result
end

def _reduce_453(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_454(val, _values, result)
                      result = new_string val
                    
    result
end

def _reduce_455(val, _values, result)
                      result = new_xstring val[1]
                    
    result
end

def _reduce_456(val, _values, result)
                      result = new_regexp val
                    
    result
end

def _reduce_457(val, _values, result)
                      result = s(:array)
                    
    result
end

def _reduce_458(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_459(val, _values, result)
                      result = new_word_list
                    
    result
end

def _reduce_460(val, _values, result)
                      result = val[0].dup << new_word_list_entry(val)
                    
    result
end

# reduce 461 omitted

def _reduce_462(val, _values, result)
                      result = self.literal_concat val[0], val[1]
                    
    result
end

def _reduce_463(val, _values, result)
                      result = s(:array)
                    
    result
end

def _reduce_464(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_465(val, _values, result)
                      result = new_symbol_list
                    
    result
end

def _reduce_466(val, _values, result)
                      result = val[0].dup << new_symbol_list_entry(val)
                    
    result
end

def _reduce_467(val, _values, result)
                      result = s(:array)
                    
    result
end

def _reduce_468(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_469(val, _values, result)
                      result = s(:array)
                    
    result
end

def _reduce_470(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_471(val, _values, result)
                      result = new_qword_list
                    
    result
end

def _reduce_472(val, _values, result)
                      result = val[0].dup << new_qword_list_entry(val)
                    
    result
end

def _reduce_473(val, _values, result)
                      result = new_qsym_list
                    
    result
end

def _reduce_474(val, _values, result)
                      result = val[0].dup << new_qsym_list_entry(val)
                    
    result
end

def _reduce_475(val, _values, result)
                      result = s(:str, "")
                    
    result
end

def _reduce_476(val, _values, result)
                      result = literal_concat(val[0], val[1])
                    
    result
end

def _reduce_477(val, _values, result)
                      result = nil
                    
    result
end

def _reduce_478(val, _values, result)
                      result = literal_concat(val[0], val[1])
                    
    result
end

def _reduce_479(val, _values, result)
                      result = nil
                    
    result
end

def _reduce_480(val, _values, result)
                      result = literal_concat(val[0], val[1])
                    
    result
end

def _reduce_481(val, _values, result)
                      result = new_string val
                    
    result
end

def _reduce_482(val, _values, result)
                      result = lexer.lex_strterm

                      lexer.lex_strterm = nil
                      lexer.lex_state = :expr_beg # TODO: expr_value ?
                    
    result
end

def _reduce_483(val, _values, result)
                      lexer.lex_strterm = val[1]
                      result = s(:evstr, val[2])
                    
    result
end

def _reduce_484(val, _values, result)
                      result = [lexer.lex_strterm,
                                lexer.brace_nest,
                                lexer.string_nest, # TODO: remove
                                lexer.cond.store,
                                lexer.cmdarg.store,
                                lexer.lex_state,
                               ]

                      lexer.lex_strterm = nil
                      lexer.brace_nest  = 0
                      lexer.string_nest = 0

                      lexer.lex_state   = :expr_value
                    
    result
end

def _reduce_485(val, _values, result)
                      # TODO: tRCURLY -> tSTRING_END
                      _, memo, stmt, _ = val

                      lex_strterm, brace_nest, string_nest, oldcond, oldcmdarg, oldlex_state = memo

                      lexer.lex_strterm = lex_strterm
                      lexer.brace_nest  = brace_nest
                      lexer.string_nest = string_nest

                      lexer.cond.restore oldcond
                      lexer.cmdarg.restore oldcmdarg

                      lexer.lex_state = oldlex_state

                      case stmt
                      when Sexp then
                        case stmt[0]
                        when :str, :dstr, :evstr then
                          result = stmt
                        else
                          result = s(:evstr, stmt)
                        end
                      when nil then
                        result = s(:evstr)
                      else
                        debug20 25
                        raise "unknown string body: #{stmt.inspect}"
                      end
                    
    result
end

def _reduce_486(val, _values, result)
 result = s(:gvar, val[0].to_sym) 
    result
end

def _reduce_487(val, _values, result)
 result = s(:ivar, val[0].to_sym) 
    result
end

def _reduce_488(val, _values, result)
 result = s(:cvar, val[0].to_sym) 
    result
end

# reduce 489 omitted

def _reduce_490(val, _values, result)
                      lexer.lex_state = :expr_end
                      result = val[1].to_sym
                    
    result
end

def _reduce_491(val, _values, result)
                      result = val[0].to_sym
                    
    result
end

# reduce 492 omitted

# reduce 493 omitted

# reduce 494 omitted

# reduce 495 omitted

def _reduce_496(val, _values, result)
                      lexer.lex_state = :expr_end
                      result = val[1]

                      result ||= s(:str, "")

                      case result[0]
                      when :dstr then
                        result[0] = :dsym
                      when :str then
                        result = s(:lit, result.last.to_sym)
                      when :evstr then
                        result = s(:dsym, "", result)
                      else
                        debug20 26, val, result
                      end
                    
    result
end

# reduce 497 omitted

def _reduce_498(val, _values, result)
                      result = -val[1] # TODO: pt_testcase
                    
    result
end

# reduce 499 omitted

# reduce 500 omitted

# reduce 501 omitted

# reduce 502 omitted

# reduce 503 omitted

# reduce 504 omitted

# reduce 505 omitted

# reduce 506 omitted

# reduce 507 omitted

def _reduce_508(val, _values, result)
 result = s(:nil)   
    result
end

def _reduce_509(val, _values, result)
 result = s(:self)  
    result
end

def _reduce_510(val, _values, result)
 result = s(:true)  
    result
end

def _reduce_511(val, _values, result)
 result = s(:false) 
    result
end

def _reduce_512(val, _values, result)
 result = s(:str, self.file) 
    result
end

def _reduce_513(val, _values, result)
 result = s(:lit, lexer.lineno) 
    result
end

def _reduce_514(val, _values, result)
                      result =
                        if defined? Encoding then
                          s(:colon2, s(:const, :Encoding), :UTF_8)
                        else
                          s(:str, "Unsupported!")
                        end
                    
    result
end

def _reduce_515(val, _values, result)
                      var = val[0]
                      result = Sexp === var ? var : self.gettable(var)
                    
    result
end

def _reduce_516(val, _values, result)
                      var = val[0]
                      result = Sexp === var ? var : self.gettable(var)
                    
    result
end

def _reduce_517(val, _values, result)
                      result = self.assignable val[0]
                    
    result
end

def _reduce_518(val, _values, result)
                      result = self.assignable val[0]
                      debug20 29, val, result
                    
    result
end

def _reduce_519(val, _values, result)
 result = s(:nth_ref,  val[0]) 
    result
end

def _reduce_520(val, _values, result)
 result = s(:back_ref, val[0]) 
    result
end

def _reduce_521(val, _values, result)
                      result = nil
                    
    result
end

def _reduce_522(val, _values, result)
                      lexer.lex_state = :expr_beg
                    
    result
end

def _reduce_523(val, _values, result)
                      result = val[2]
                    
    result
end

def _reduce_524(val, _values, result)
                      yyerrok
                      result = nil
                      debug20 30, val, result
                    
    result
end

def _reduce_525(val, _values, result)
                      result = val[1]
                      self.lexer.lex_state = :expr_beg
                      self.lexer.command_start = true
                      # TODO:
                      # $<num>$ = parser->parser_in_kwarg;
                      # parser->parser_in_kwarg = 1;
                    
    result
end

def _reduce_526(val, _values, result)
                      # TODO: parser->parser_in_kwarg = $<num>1;
                      result = val[0]
                      self.lexer.lex_state = :expr_beg
                      self.lexer.command_start = true
                    
    result
end

def _reduce_527(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_528(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_529(val, _values, result)
                      result = args val
                    
    result
end

# reduce 530 omitted

def _reduce_531(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_532(val, _values, result)
                      result = nil
                    
    result
end

def _reduce_533(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_534(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_535(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_536(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_537(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_538(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_539(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_540(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_541(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_542(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_543(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_544(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_545(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_546(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_547(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_548(val, _values, result)
                      yyerror "formal argument cannot be a constant"
                    
    result
end

def _reduce_549(val, _values, result)
                      yyerror "formal argument cannot be an instance variable"
                    
    result
end

def _reduce_550(val, _values, result)
                      yyerror "formal argument cannot be a global variable"
                    
    result
end

def _reduce_551(val, _values, result)
                      yyerror "formal argument cannot be a class variable"
                    
    result
end

# reduce 552 omitted

def _reduce_553(val, _values, result)
                      identifier = val[0].to_sym
                      self.env[identifier] = :lvar

                      result = identifier
                    
    result
end

# reduce 554 omitted

# reduce 555 omitted

def _reduce_556(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_557(val, _values, result)
                      case val[0]
                      when Symbol then
                        result = s(:args)
                        result << val[0]
                      when Sexp then
                        result = val[0]
                      else
                        debug20 32
                        raise "Unknown f_arg type: #{val.inspect}"
                      end
                    
    result
end

def _reduce_558(val, _values, result)
                      list, _, item = val

                      if list.sexp_type == :args then
                        result = list
                      else
                        result = s(:args, list)
                      end

                      result << item
                    
    result
end

# reduce 559 omitted

def _reduce_560(val, _values, result)
                      # TODO: call_args
                      label, _ = val[0] # TODO: fix lineno?
                      identifier = label.to_sym
                      self.env[identifier] = :lvar

                      result = s(:array, s(:kwarg, identifier, val[1]))
                    
    result
end

def _reduce_561(val, _values, result)
                      label, _ = val[0] # TODO: fix lineno?
                      identifier = label.to_sym
                      self.env[identifier] = :lvar

                      result = s(:array, s(:kwarg, identifier))
                    
    result
end

def _reduce_562(val, _values, result)
                      # TODO: call_args
                      label, _ = val[0] # TODO: fix lineno?
                      identifier = label.to_sym
                      self.env[identifier] = :lvar

                      result = s(:array, s(:kwarg, identifier, val[1]))
                    
    result
end

def _reduce_563(val, _values, result)
                      label, _ = val[0] # TODO: fix lineno?
                      identifier = label.to_sym
                      self.env[identifier] = :lvar

                      result = s(:array, s(:kwarg, identifier))
                    
    result
end

# reduce 564 omitted

def _reduce_565(val, _values, result)
                      list, _, item = val
                      result = list << item.last
                    
    result
end

# reduce 566 omitted

def _reduce_567(val, _values, result)
                      result = args val
                    
    result
end

# reduce 568 omitted

# reduce 569 omitted

def _reduce_570(val, _values, result)
                      result = :"**#{val[1]}"
                    
    result
end

def _reduce_571(val, _values, result)
                      result = :"**"
                    
    result
end

def _reduce_572(val, _values, result)
                      result = self.assignable val[0], val[2]
                      # TODO: detect duplicate names
                    
    result
end

def _reduce_573(val, _values, result)
                      result = self.assignable val[0], val[2]
                    
    result
end

def _reduce_574(val, _values, result)
                      result = s(:block, val[0])
                    
    result
end

def _reduce_575(val, _values, result)
                      result = val[0]
                      result << val[2]
                    
    result
end

def _reduce_576(val, _values, result)
                      result = s(:block, val[0])
                    
    result
end

def _reduce_577(val, _values, result)
                      result = self.block_append val[0], val[2]
                    
    result
end

# reduce 578 omitted

# reduce 579 omitted

def _reduce_580(val, _values, result)
                      # TODO: differs from parse.y - needs tests
                      name = val[1].to_sym
                      self.assignable name
                      result = :"*#{name}"
                    
    result
end

def _reduce_581(val, _values, result)
                      name = :"*"
                      self.env[name] = :lvar
                      result = name
                    
    result
end

# reduce 582 omitted

# reduce 583 omitted

def _reduce_584(val, _values, result)
                      identifier = val[1].to_sym

                      self.env[identifier] = :lvar
                      result = "&#{identifier}".to_sym
                    
    result
end

def _reduce_585(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_586(val, _values, result)
                      result = nil
                    
    result
end

# reduce 587 omitted

def _reduce_588(val, _values, result)
                      lexer.lex_state = :expr_beg
                    
    result
end

def _reduce_589(val, _values, result)
                      result = val[2]
                      yyerror "Can't define single method for literals." if
                        result[0] == :lit
                    
    result
end

def _reduce_590(val, _values, result)
                      result = s(:array)
                    
    result
end

def _reduce_591(val, _values, result)
                      result = val[0]
                    
    result
end

# reduce 592 omitted

def _reduce_593(val, _values, result)
                      list = val[0].dup
                      more = val[2][1..-1]
                      list.push(*more) unless more.empty?
                      result = list
                      result[0] = :hash
                    
    result
end

def _reduce_594(val, _values, result)
                      result = s(:array, val[0], val[2])
                    
    result
end

def _reduce_595(val, _values, result)
                      result = s(:array, s(:lit, val[0][0].to_sym), val[1])
                    
    result
end

def _reduce_596(val, _values, result)
                      _, sym, _, value = val
                      sym[0] = :dsym
                      result = s(:array, sym, value)
                    
    result
end

def _reduce_597(val, _values, result)
                      raise "not yet: #{val.inspect}"
                      # result = s(:array, s(:lit, val[1].to_sym), val[1])
                    
    result
end

def _reduce_598(val, _values, result)
                      result = s(:array, s(:kwsplat, val[1]))
                    
    result
end

# reduce 599 omitted

# reduce 600 omitted

# reduce 601 omitted

# reduce 602 omitted

# reduce 603 omitted

# reduce 604 omitted

# reduce 605 omitted

# reduce 606 omitted

# reduce 607 omitted

# reduce 608 omitted

# reduce 609 omitted

# reduce 610 omitted

# reduce 611 omitted

# reduce 612 omitted

# reduce 613 omitted

# reduce 614 omitted

# reduce 615 omitted

# reduce 616 omitted

# reduce 617 omitted

# reduce 618 omitted

# reduce 619 omitted

# reduce 620 omitted

# reduce 621 omitted

def _reduce_622(val, _values, result)
 yyerrok 
    result
end

# reduce 623 omitted

# reduce 624 omitted

def _reduce_625(val, _values, result)
 yyerrok 
    result
end

def _reduce_626(val, _values, result)
 result = nil; 
    result
end

def _reduce_none(val, _values, result)
  val[0]
end

end   # class Ruby24Parser
