#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.14
# from Racc grammer file "".
#

require 'racc/parser.rb'
class Ruby21Parser < RubyParser::Parser


require "ruby_lexer"
require "ruby_parser_extras"

# :stopdoc:

# Local Variables: **
# racc-token-length-max:14 **
# End: **
##### State transition tables begin ###

clist = [
'-603,579,621,-101,-103,579,271,-603,-603,-603,749,271,-603,-603,-603',
'271,-603,-514,624,-84,-100,242,-102,996,-514,-603,-603,-603,-603,-99',
'221,579,-70,-100,579,112,-603,-603,83,-603,-603,-603,-603,-603,579,271',
'84,537,209,729,539,729,-105,239,-101,-102,116,241,240,701,-106,115,660',
'-98,210,620,222,-603,-603,-603,-603,-603,-603,-603,-603,-603,-603,-603',
'-603,-603,-603,623,-103,-603,-603,-603,729,785,-603,218,219,-603,211',
'270,-603,-603,659,-603,270,-603,-599,-603,270,-603,-603,-603,-603,-603',
'-603,-603,-417,-603,-603,-603,-94,116,748,-101,-103,116,115,-599,-101',
'-103,115,-91,-603,-603,-603,-603,-603,-603,270,-603,-90,116,-102,-603',
'-603,-603,115,-102,-102,-603,-603,116,-603,-100,116,116,115,116,-100',
'115,115,-603,115,-96,116,-92,-93,930,-104,115,700,-97,-603,-603,-89',
'-603,-603,-603,-603,-603,222,218,219,1000,660,222,217,-94,-92,218,219',
'605,116,-94,869,870,605,115,871,110,111,94,95,-603,-603,-603,-603,-603',
'-603,-603,-603,-603,-603,-603,-603,-603,-603,-518,659,-603,-603,-603',
'-94,644,605,-94,116,-603,94,95,-603,115,525,783,-600,-603,784,-603,-94',
'-603,-603,-603,-603,-603,-603,-603,116,-603,-603,-603,605,115,607,606',
'613,-92,-603,607,606,-90,878,-288,-603,-603,454,-93,759,-603,-288,-288',
'-288,222,-99,-95,-288,-288,660,-288,-102,222,96,97,817,660,585,607,606',
'-105,-101,-597,-92,-103,-518,-92,761,-517,537,-288,-288,536,-288,-288',
'-288,-288,-288,261,-92,96,97,-603,659,607,606,618,318,-100,-603,659',
'406,-106,-596,-599,-426,408,407,-603,846,817,-288,-288,-288,-288,-288',
'-288,-288,-288,-288,-288,-288,-288,-288,-288,-506,-603,-288,-288,-288',
'-99,643,-506,-98,-603,-288,740,-597,-288,116,741,-506,319,-288,115,-288',
'769,-288,-288,-288,-288,-288,-288,-288,222,-288,-503,-288,-426,-597',
'-513,605,355,-503,610,-426,379,-513,-596,-288,-288,-288,-503,-95,-426',
'-288,-288,-288,-288,116,564,-288,-288,-288,115,-288,-104,-603,-91,564',
'-596,567,-426,116,-603,-288,-288,-288,115,-599,567,-100,382,-603,385',
'-288,-288,-503,-288,-288,-288,-288,-288,560,-503,557,556,555,388,558',
'264,-603,607,606,575,574,560,265,557,556,555,605,558,575,574,404,-288',
'-288,-288,-288,-288,-288,-288,-288,-288,-288,-288,-288,-288,-288,218',
'219,-288,-288,-288,-516,786,-288,568,409,-288,605,-516,-288,-288,216',
'-288,568,-288,453,-288,-516,-288,-288,-288,-288,-288,-288,-288,455,-288',
'456,-288,560,605,557,556,555,564,558,221,976,607,606,625,-288,-288,-288',
'-288,567,-288,-506,-288,487,842,273,637,-97,-506,-506,-506,-104,638',
'-506,-506,-506,497,-506,500,-515,-106,562,607,606,603,-506,-515,-506',
'-506,-506,502,116,575,574,-69,-515,115,-506,-506,222,-506,-506,-506',
'-506,-506,607,606,608,-92,560,-510,557,556,555,-94,558,560,-510,557',
'556,555,-101,558,846,817,511,568,-103,-506,-506,-506,-506,-506,-506',
'-506,-506,-506,-506,-506,-506,-506,-506,525,-517,-506,-506,-506,715',
'-506,-506,264,512,-506,519,715,-506,-506,265,-506,276,-506,222,-506',
'718,-506,-506,-506,-506,-506,-506,-506,273,-506,522,-506,560,-506,557',
'556,555,564,558,526,-506,-96,-89,242,-506,-506,-506,-506,567,-506,-503',
'-506,242,537,-105,-98,539,-503,-503,-503,-506,534,-503,-503,-503,560',
'-503,557,556,555,562,558,218,219,-503,239,-503,-503,-503,241,240,575',
'574,218,219,540,-503,-503,-508,-503,-503,-503,-503,-503,537,-508,585',
'539,560,-511,557,556,555,715,558,560,-511,557,556,555,398,558,718,575',
'574,568,589,-503,-503,-503,-503,-503,-503,-503,-503,-503,-503,-503,-503',
'-503,-503,590,242,-503,-503,-503,715,-503,-503,-509,612,-503,616,715',
'-503,-503,-509,-503,619,-503,622,-503,922,-503,-503,-503,-503,-503,-503',
'-503,-512,-503,629,-503,239,-262,215,-512,241,240,237,238,631,957,218',
'219,-503,-503,-503,-503,222,-503,745,-503,294,72,73,74,12,60,635,636',
'-503,66,67,273,647,242,70,242,68,69,71,33,34,75,76,119,120,121,122,123',
'32,31,30,104,103,105,106,242,242,22,222,222,222,-84,648,11,48,677,13',
'108,107,109,98,59,100,99,101,222,102,110,111,530,94,95,688,45,46,44',
'242,246,251,252,253,248,250,258,259,254,255,-288,235,236,215,693,256',
'257,-288,43,694,743,36,-600,222,61,62,-288,697,63,745,38,239,502,245',
'47,241,240,237,238,249,247,243,23,244,703,706,-288,91,83,85,86,87,89',
'-288,707,709,84,92,-600,260,711,-239,-288,713,65,721,722,81,88,90,723',
'725,96,97,294,72,73,74,12,60,585,732,-289,66,67,762,763,764,70,-289',
'68,69,71,33,34,75,76,-263,-289,770,487,487,32,31,30,104,103,105,106',
'222,788,22,261,500,502,688,648,11,48,222,13,108,107,109,98,59,100,99',
'101,273,102,110,111,273,94,95,688,45,46,44,242,246,251,252,253,248,250',
'258,259,254,255,215,235,236,-289,242,256,257,528,43,817,-289,36,222',
'840,61,62,452,222,63,-289,38,239,817,245,47,241,240,237,238,249,247',
'243,23,244,850,222,215,91,83,85,86,87,89,957,215,-264,84,92,877,260',
'880,588,745,706,65,883,886,81,88,90,586,888,96,97,294,72,73,74,12,60',
'890,222,-515,66,67,892,893,688,70,-515,68,69,71,33,34,75,76,901,-515',
'-262,905,907,32,31,30,104,103,105,106,908,222,22,706,911,913,915,632',
'11,48,917,13,108,107,109,98,59,100,99,101,917,102,110,111,222,94,95',
'923,45,46,44,242,246,251,252,253,248,250,258,259,254,255,-516,235,236',
'-289,925,256,257,-516,43,927,-289,36,222,937,61,62,-516,938,63,-289',
'38,239,222,245,47,241,240,237,238,249,247,243,23,244,941,-265,-336,91',
'83,85,86,87,89,-336,-280,951,84,92,958,260,959,-280,-336,961,65,962',
'978,81,88,90,-280,980,96,97,8,72,73,74,12,60,981,985,215,66,67,706,990',
'992,70,1007,68,69,71,33,34,75,76,994,1005,996,996,1003,32,31,30,104',
'103,105,106,1008,954,22,557,556,555,1009,558,11,48,10,13,108,107,109',
'98,59,100,99,101,917,102,110,111,917,94,95,917,45,46,44,242,246,251',
'252,253,248,250,258,259,254,255,-288,235,236,215,1014,256,257,-288,43',
'978,214,36,-600,-600,61,62,-288,-599,63,212,38,239,693,245,47,241,240',
'237,238,249,247,243,23,244,978,1037,215,91,83,85,86,87,89,451,-280,1038',
'84,92,1039,260,1040,-280,452,996,65,996,996,81,88,90,-280,222,96,97',
'294,72,73,74,12,60,917,978,215,66,67,3,,,70,518,68,69,71,33,34,75,76',
',516,,,,32,31,30,104,103,105,106,,954,22,557,556,555,,558,11,48,,13',
'108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,242,246,251',
'252,253,248,250,258,259,254,255,,235,236,,,256,257,,43,,,36,,,61,62',
',,63,,38,239,,245,47,241,240,237,238,249,247,243,23,244,,,,91,83,85',
'86,87,89,,,,84,92,,260,,,,,65,,,81,88,90,,,96,97,294,72,73,74,12,60',
',,,66,67,,,,70,,68,69,71,33,34,75,76,119,120,121,122,123,32,31,30,104',
'103,105,106,,,22,119,120,121,122,123,11,48,,13,108,107,109,98,59,100',
'99,101,,102,110,111,,94,95,,45,46,44,242,246,251,252,253,248,250,258',
'259,254,255,,235,236,,,256,257,,43,,,36,,,61,62,,,63,,38,239,,245,47',
'241,240,237,238,249,247,243,23,244,,,,91,83,85,86,87,89,,,,84,92,,260',
',,,,65,,,81,88,90,,,96,97,8,72,73,74,12,60,,,,66,67,,,,70,,68,69,71',
'33,34,75,76,119,120,121,122,123,32,31,30,104,103,105,106,,,22,,,,,,11',
'48,10,13,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44',
'242,246,251,252,253,248,250,258,259,254,255,,235,236,,,256,257,,43,',
',36,,,61,62,,,63,,38,239,,245,47,241,240,237,238,249,247,243,23,244',
',,,91,83,85,86,87,89,,,,84,92,,260,,,,,65,,,81,88,90,,,96,97,294,72',
'73,74,12,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103',
'105,106,,,22,,,,,,11,48,,13,108,107,109,98,59,100,99,101,,102,110,111',
',94,95,,45,46,44,242,246,251,252,253,248,250,258,259,254,255,,235,236',
',,256,257,,43,,,36,,,61,62,,,63,,38,239,,245,47,241,240,237,238,249',
'247,243,23,244,,,,91,83,85,86,87,89,,,,84,92,,260,,,,,65,,,81,88,90',
',,96,97,294,72,73,74,12,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,',
',32,31,30,104,103,105,106,,,22,,,,,,11,48,,13,108,107,109,98,59,100',
'99,101,,102,110,111,,94,95,,45,46,44,242,246,251,252,253,248,250,258',
'259,254,255,,235,236,,,256,257,,43,,,36,,,61,62,,,63,,38,239,,245,47',
'241,240,237,238,249,247,243,23,244,,,,91,83,85,86,87,89,,,,84,92,,260',
',,,,65,,,81,88,90,,,96,97,294,72,73,74,12,60,,,,66,67,,,,70,,68,69,71',
'33,34,75,76,,,,,,32,31,30,104,103,105,106,,,22,,,,,,11,48,,13,108,107',
'109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,242,246,251,252,253',
'248,250,258,259,254,255,,235,236,,,256,257,,43,,,36,,,61,62,,,63,,38',
'239,,245,47,241,240,237,238,249,247,243,23,244,,,,91,83,85,86,87,89',
',,,84,92,,260,,,,,65,,,81,88,90,,,96,97,294,72,73,74,12,60,,,,66,67',
',,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,22,,,,,',
'11,48,,13,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44',
'242,246,251,252,253,248,250,258,259,254,255,,235,236,,,256,257,,43,',
',36,,,61,62,,,63,,38,239,,245,47,241,240,237,238,249,247,243,23,244',
',,,91,83,85,86,87,89,,,,84,92,,260,,,,,65,,,81,88,90,,,96,97,294,72',
'73,74,12,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103',
'105,106,,,22,,,,,,11,48,,13,108,107,109,98,59,100,99,101,,102,110,111',
',94,95,,45,46,44,242,246,251,252,253,248,250,258,259,254,255,,235,236',
',,256,257,,43,,,296,,,61,62,,,63,,38,239,,245,47,241,240,237,238,249',
'247,243,23,244,,,,91,83,85,86,87,89,,,,84,92,,260,,,,,65,,,81,88,90',
',,96,97,294,72,73,74,12,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,',
',32,31,30,104,103,105,106,,,22,,,,,,11,48,,13,108,107,109,98,59,100',
'99,101,,102,110,111,,94,95,,45,46,44,242,246,251,252,253,248,250,258',
'259,254,255,,235,236,,,256,257,,43,,,36,,,61,62,,,63,,38,239,,245,47',
'241,240,237,238,249,247,243,23,244,,,,91,83,85,86,87,89,,,,84,92,222',
'260,,,,,65,,,81,88,90,,,96,97,294,72,73,74,12,60,,,,66,67,,,,70,,68',
'69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,22,,,,,,11,48,,13',
'108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,242,246,251',
'252,253,248,250,258,259,254,255,,235,236,,,256,257,,43,,,296,,,61,62',
',,63,,38,239,,245,47,241,240,237,238,249,247,243,23,244,,,,91,83,85',
'86,87,89,,,,84,92,,260,,,,,65,,,81,88,90,,,96,97,294,72,73,74,12,60',
',,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,',
',22,,,,,,11,48,,13,108,107,109,98,59,100,99,101,,102,110,111,,94,95',
',45,46,44,242,246,251,252,253,248,250,258,259,254,255,,235,236,,,256',
'257,,43,,,296,,,61,62,,,63,,38,239,,245,47,241,240,237,238,249,247,243',
'23,244,,,,91,83,85,86,87,89,,,,84,92,,260,,,,,65,,,81,88,90,,,96,97',
'294,72,73,74,12,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30',
'104,103,105,106,,,22,,,,,,11,48,,13,108,107,109,98,59,100,99,101,,102',
'110,111,,94,95,,45,46,44,242,246,251,252,253,248,250,258,259,254,255',
',235,236,,,256,257,,43,,,36,,,61,62,,,63,,38,239,,245,47,241,240,237',
'238,249,247,243,23,244,,,,91,83,85,86,87,89,,,,84,92,,260,,,,,65,,,81',
'88,90,,,96,97,294,72,73,74,12,60,,,,66,67,,,,70,,68,69,71,33,34,75,76',
',,,,,32,31,30,104,103,105,106,,,22,,,,,,11,48,,13,108,107,109,98,59',
'100,99,101,,102,110,111,,94,95,,45,46,44,242,246,251,252,253,248,250',
'258,259,254,255,,235,236,,,256,257,,43,,,36,,,61,62,,,63,,38,239,,245',
'47,241,240,237,238,249,247,243,23,244,,,,91,83,85,86,87,89,,,,84,92',
',260,,,,,65,,,81,88,90,,,96,97,294,72,73,74,12,60,,,,66,67,,,,70,,68',
'69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,242,,22,,,,,,11,48,',
'13,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,242,239',
',,,241,240,237,238,560,,557,556,555,,558,256,257,,43,,,36,,242,61,62',
',,63,,38,239,,245,47,241,240,237,238,256,257,243,23,244,,,715,91,83',
'85,86,87,89,,,239,84,92,,241,240,237,238,,65,,,81,88,90,,,96,97,294',
'72,73,74,12,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104',
'103,105,106,,560,22,557,556,555,,558,11,48,,13,108,107,109,98,59,100',
'99,101,,102,110,111,,94,95,,45,46,44,242,,,560,,557,556,555,715,558',
',,,,,,256,257,,43,,,36,,,61,62,,,63,,38,239,,245,47,241,240,237,238',
',715,243,23,244,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,',
'96,97,294,72,73,74,12,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32',
'31,30,104,103,105,106,,,22,,,,,,11,48,,13,108,107,109,98,59,100,99,101',
',102,110,111,,94,95,,45,46,44,242,,,,,,,,,,,,,,,,256,257,,43,,,36,,',
'61,62,,,63,,38,239,,245,47,241,240,237,238,,,243,23,244,,,,91,83,85',
'86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,294,72,73,74,12,60,,,',
'66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,22',
',,,,,11,48,,13,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45',
'46,44,242,-623,-623,-623,-623,248,250,,,-623,-623,,,,,,256,257,,43,',
',36,,,61,62,,,63,,38,239,,245,47,241,240,237,238,249,247,243,23,244',
',,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,294,72,73',
'74,12,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103',
'105,106,,,22,,,,,,11,48,,13,108,107,109,98,59,100,99,101,,102,110,111',
',94,95,,45,46,44,242,246,251,252,253,248,250,258,,254,255,,,,,,256,257',
',43,,,36,,,61,62,,,63,,38,239,,245,47,241,240,237,238,249,247,243,23',
'244,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,294,72',
'73,74,12,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103',
'105,106,,,22,,,,,,11,48,,13,108,107,109,98,59,100,99,101,,102,110,111',
',94,95,,45,46,44,242,-623,-623,-623,-623,248,250,,,-623,-623,,,,,,256',
'257,,43,,,36,,,61,62,,,63,,38,239,,245,47,241,240,237,238,249,247,243',
'23,244,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,294',
'72,73,74,12,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104',
'103,105,106,,,22,,,,,,11,48,,13,108,107,109,98,59,100,99,101,,102,110',
'111,,94,95,,45,46,44,242,-623,-623,-623,-623,248,250,,,-623,-623,,,',
',,256,257,,43,,,36,,,61,62,,,63,,38,239,,245,47,241,240,237,238,249',
'247,243,23,244,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96',
'97,294,72,73,74,12,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31',
'30,104,103,105,106,,,22,,,,,,11,48,,13,108,107,109,98,59,100,99,101',
',102,110,111,,94,95,,45,46,44,242,-623,-623,-623,-623,248,250,,,-623',
'-623,,,,,,256,257,,43,,,36,,,61,62,,,63,,38,239,,245,47,241,240,237',
'238,249,247,243,23,244,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88',
'90,,,96,97,294,72,73,74,12,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,',
',,,,32,31,30,104,103,105,106,,,22,,,,,,11,48,,13,108,107,109,98,59,100',
'99,101,,102,110,111,,94,95,,45,46,44,242,-623,-623,-623,-623,248,250',
',,-623,-623,,,,,,256,257,,43,,,36,,,61,62,,,63,,38,239,,245,47,241,240',
'237,238,249,247,243,23,244,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,',
'81,88,90,,,96,97,294,72,73,74,12,60,,,,66,67,,,,70,,68,69,71,33,34,75',
'76,,,,,,32,31,30,104,103,105,106,,,22,,,,,,11,48,,13,108,107,109,98',
'59,100,99,101,,102,110,111,,94,95,,45,46,44,242,246,251,252,253,248',
'250,,,254,255,,,,,,256,257,,43,,,36,,,61,62,,,63,,38,239,,245,47,241',
'240,237,238,249,247,243,23,244,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65',
',,81,88,90,,,96,97,294,72,73,74,12,60,,,,66,67,,,,70,,68,69,71,33,34',
'75,76,,,,,,32,31,30,104,103,105,106,,,22,,,,,,11,48,,13,108,107,109',
'98,59,100,99,101,,102,110,111,,94,95,,45,46,44,242,246,251,252,253,248',
'250,258,259,254,255,,-623,-623,,,256,257,,43,,,36,,,61,62,,,63,,38,239',
',245,47,241,240,237,238,249,247,243,23,244,,,,91,83,85,86,87,89,,,,84',
'92,,,,,,,65,,,81,88,90,,,96,97,294,72,73,74,12,60,,,,66,67,,,,70,,68',
'69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,22,,,,,,11,48,,13',
'108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,242,246,251',
'252,253,248,250,258,259,254,255,,-623,-623,,,256,257,,43,,,36,,,61,62',
',,63,,38,239,,245,47,241,240,237,238,249,247,243,23,244,,,,91,83,85',
'86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,294,72,73,74,12,60,,,',
'66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,22',
',,,,,11,48,,13,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45',
'46,44,242,-623,-623,-623,-623,248,250,,,-623,-623,,,,,,256,257,,43,',
',36,,,61,62,,,63,,38,239,,245,47,241,240,237,238,249,247,243,23,244',
',,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,',
'60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106',
',,22,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45',
'46,44,242,,,,,,,,,,,,,,,,256,257,,227,,,233,,,61,62,,,63,,,239,,245',
'47,241,240,237,238,,,243,23,244,,,,91,83,85,86,87,89,,,,84,92,222,,',
',,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34',
'75,76,,,,,,32,31,30,104,103,105,106,,,22,,,,,,,48,,,108,107,109,98,59',
'100,99,101,,102,110,111,,94,95,,45,46,44,242,,,,,,,,,,,,,,,,256,257',
',227,,,233,,,61,62,,,63,,,239,,245,47,241,240,237,238,,,,23,,,,,91,83',
'85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66',
'67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,234,',
',,,,,48,,,108,107,109,98,59,100,99,101,287,102,110,111,,94,95,,45,46',
'44,242,,,,,,,,,,,,,,,,256,257,,227,,,233,,,61,62,,,63,,285,239,283,245',
'47,241,240,237,238,,,,232,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,288',
'81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,311,312,75,76',
',,,,,307,308,314,104,103,105,106,,,234,,,,,,,48,,,108,107,109,98,59',
'100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233',
',,61,62,,,63,,,,,,47,,,,,,,,232,,,,,91,83,85,86,87,89,,,,84,92,,,,,',
',65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,311,312',
'75,76,,,,,,307,308,314,104,103,105,106,,,234,,,,,,,48,,,108,107,109',
'98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227',
',,233,,,61,62,,,63,,,,,,47,,,,,,,,232,,,,,91,83,85,86,87,89,,,,84,92',
',,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33',
'34,75,76,,,,,,32,31,30,104,103,105,106,,,234,,,,,,,48,,,108,107,109',
'98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227',
',,233,,,61,62,,,63,,,,,,47,,,,,,,,232,,,,,91,83,85,86,87,89,,,,84,92',
',,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,311',
'312,75,76,,,,,,307,308,314,104,103,105,106,,,234,,,,,,,48,,,108,107',
'109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,',
',,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232,,,,,91,83,85,86,87,89,,',
',84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69',
'71,311,312,75,76,,,,,,307,308,314,104,103,105,106,,,234,,,,,,,48,,,108',
'107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,',
',,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232,,,,,91,83,85,86,87,89',
',,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68',
'69,71,311,312,75,76,,,,,,307,308,314,104,103,105,106,,,234,,,,,,,48',
',,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,',
',,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232,,,,,91,83,85,86',
'87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,',
'70,,68,69,71,311,312,75,76,,,,,,307,308,314,104,103,105,106,,,234,,',
',,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44',
',,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232,,,,,91',
'83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,',
'66,67,,,,70,,68,69,71,311,312,75,76,,,,,,307,308,314,104,103,105,106',
',,234,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45',
'46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232,',
',,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,',
'60,,,,66,67,,,,70,,68,69,71,311,312,75,76,,,,,,307,308,314,104,103,105',
'106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95',
',45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232',
',,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74',
',60,,,,66,67,,,,70,,68,69,71,311,312,75,76,,,,,,307,308,314,104,103',
'105,106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,',
'94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,',
',,,,,232,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97',
'72,73,74,,60,,,,66,67,,,,70,,68,69,71,311,312,75,76,,,,,,307,308,314',
'104,103,105,106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110',
'111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,',
'47,,,,,,,,232,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96',
'97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,311,312,75,76,,,,,,307,308',
'314,104,103,105,106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101,,102',
'110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,',
',,,,47,,,,,,,,232,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90',
',,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31',
'30,104,103,105,106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101,287',
'102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,',
'63,,285,,283,,47,,,,,,,,232,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65',
',288,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34,75',
'76,,,,,,32,31,30,104,103,105,106,,,234,,,,,,,48,,,108,107,109,98,59',
'100,99,101,287,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,',
',233,,,61,62,,,63,,285,,283,,47,,,,,,,,232,,,,,91,83,85,86,87,89,,,',
'84,92,,,,,,,65,,288,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68',
'69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,234,,,,,,,48,,,108',
'107,109,98,59,100,99,101,287,102,110,111,,94,95,,45,46,44,,,,,,,,,,',
',,,,,,,,,227,,,233,,,61,62,,,63,,285,,283,,47,,,,,,,,232,,,,,91,83,85',
'86,87,89,,,,84,92,222,,,,,,65,,288,81,88,90,,,96,97,72,73,74,,60,,,',
'66,67,,,,70,,68,69,71,311,312,75,76,,,,,,307,308,314,104,103,105,106',
',,234,,,,,,,309,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,',
',,315,,,,,,,,,,,,,,,,,,,,895,,,233,,,61,62,,,63,,,,,,,,,,,,,,,,,,,91',
'83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,',
'66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,234',
',,,,,,48,,,108,107,109,98,59,100,99,101,287,102,110,111,,94,95,,45,46',
'44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,285,,283,,47,,,,,,,,232',
',,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,288,81,88,90,,,96,97,72,73',
'74,,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105',
'106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101,287,102,110,111,,94',
'95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,285,,283,,47',
',,,,,,,232,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,288,81,88,90,,,96',
'97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,311,312,75,76,,,,,,307,308',
'314,104,103,105,106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101,,102',
'110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,',
',,,,47,,,,,,,,232,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90',
',,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31',
'30,104,103,105,106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101,287',
'102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,',
'63,,285,,283,,47,,,,,,,,232,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65',
',288,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,311,312',
'75,76,,,,,,307,308,314,104,103,105,106,,,234,,,,,,,48,,,108,107,109',
'98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227',
',,233,,,61,62,,,63,,,,,,47,,,,,,,,232,,,,,91,83,85,86,87,89,,,,84,92',
',,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,311',
'312,75,76,,,,,,307,308,314,104,103,105,106,,,234,,,,,,,48,,,108,107',
'109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,',
',,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232,,,,,91,83,85,86,87,89,,',
',84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69',
'71,311,312,75,76,,,,,,307,308,314,104,103,105,106,,,234,,,,,,,48,,,108',
'107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,',
',,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232,,,,,91,83,85,86,87,89',
',,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,12,60,,,,66,67,,,,70,',
'68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,22,,,,,,11,48,',
'13,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,',
',,,,,,,,,,,,,43,,,36,,,61,62,,,63,,38,,,,47,,,,,,,,23,,,,,91,83,85,86',
'87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,',
'70,,68,69,71,311,312,75,76,,,,,,307,308,314,104,103,105,106,,,234,,',
',,,,309,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,,,315,,',
',,,,,,,,,,,,,,,,,305,,,301,,,61,62,,,63,,300,,,,,,,,,,,,,,,,,91,83,85',
'86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67',
',,,70,,68,69,71,311,312,75,76,,,,,,307,308,314,104,103,105,106,,,234',
',,,,,,309,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,,,315',
',,,,,,,,,,,,,,,,,,,305,,,233,,,61,62,,,63,,,,,,,,,,,,,,,,,,,91,83,85',
'86,87,89,,,,84,92,,,,317,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66',
'67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,22,,',
',,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44',
',,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,23,,,,,91,83',
'85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66',
'67,,,,70,,68,69,71,311,312,75,76,,,,,,307,308,314,104,103,105,106,,',
'234,,,,,,,309,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,,',
'315,,,,,,,,,,,,,,,,,,,,305,,,233,,,61,62,,,63,,,,,,,,,,,,,,,,,,,91,83',
'85,86,87,89,,,,84,92,,,,514,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,',
'66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,22',
',,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44',
',,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,23,,,,,91,83',
'85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66',
'67,,,,70,,68,69,71,311,312,75,76,,,,,,307,308,314,104,103,105,106,,',
'234,,,,,,,48,,,108,107,109,98,59,100,99,101,287,102,110,111,,94,95,',
'45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,283,,47,,,,,,',
',232,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,288,81,88,90,,,96,97,72',
'73,74,,60,,,,66,67,,,,70,,68,69,71,311,312,75,76,,,,,,307,308,314,104',
'103,105,106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111',
',94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,',
',,,,,,232,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97',
'72,73,74,,60,,,,66,67,,,,70,,68,69,71,311,312,75,76,,,,,,307,308,314',
'104,103,105,106,,,234,,,,,,,309,,,108,107,109,98,59,100,99,101,,102',
'110,111,,94,95,,,,315,,,,,,,,,,,,,,,,,,,,895,,,233,,,61,62,,,63,,,,',
',,,,,,,,,,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97',
'72,73,74,,60,,,,66,67,,,,70,,68,69,71,311,312,75,76,,,,,,307,308,314',
'104,103,105,106,,,234,,,,,,,309,,,108,107,109,98,59,100,99,101,,102',
'110,111,,94,95,,,,315,,,,,,,,,,,,,,,,,,,,968,,,233,,,61,62,,,63,,,,',
',,,,,,,,,,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97',
'72,73,74,,60,,,,66,67,,,,70,,68,69,71,311,312,75,76,,,,,,307,308,314',
'104,103,105,106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110',
'111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,',
'47,,,,,,,,232,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96',
'97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,311,312,75,76,,,,,,307,308',
'314,104,103,105,106,,,234,,,,,,,309,,,108,107,109,98,59,100,99,101,',
'102,110,111,,94,95,,,,315,,,,,,,,,,,,,,,,,,,,305,,,301,,,61,62,,,63',
',,,,,,,,,,,,,,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96',
'97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,311,312,75,76,,,,,,307,308',
'314,104,103,105,106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101,,102',
'110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,',
'672,,,,47,,,,,,,,232,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88',
'90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,311,312,75,76,,,,,',
'307,308,314,104,103,105,106,,,234,,,,,,,48,,,108,107,109,98,59,100,99',
'101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61',
'62,,,63,,,,,,47,,,,,,,,232,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,',
',81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,311,312,75,76',
',,,,,307,308,314,104,103,105,106,,,234,,,,,,,48,,,108,107,109,98,59',
'100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233',
',,61,62,,,63,,,,,,47,,,,,,,,232,,,,,91,83,85,86,87,89,,,,84,92,,,,,',
',65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,311,312',
'75,76,,,,,,307,308,314,104,103,105,106,,,234,,,,,,,48,,,108,107,109',
'98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227',
',,233,530,,61,62,,,63,,,,,,47,,,,,,,,232,,,,,91,83,85,86,87,89,,,,84',
'92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71',
'311,312,75,76,,,,,,307,308,314,104,103,105,106,,,234,,,,,,,48,,,108',
'107,109,98,59,100,99,101,287,102,110,111,,94,95,,45,46,44,,,,,,,,,,',
',,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232,,,,,91,83,85,86,87',
'89,,,,84,92,,,,,,,65,,288,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,',
'70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,22,,,,,,,48',
',,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,',
',,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,23,,,,,91,83,85,86',
'87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,',
'70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,22,,,,,,,48',
',,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,',
',,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,23,,,,,91,83,85,86',
'87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,',
'70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,234,,,,,,,48',
',,108,107,109,98,59,100,99,101,287,102,110,111,,94,95,,45,46,44,,,,',
',,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,285,,283,,47,,,,,,,,232,,,,,91',
'83,85,86,87,89,,,,84,92,,,,,,,65,,288,81,88,90,,,96,97,72,73,74,,60',
',,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,',
',22,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45',
'46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,23,,',
',,91,83,85,86,87,89,,,,84,92,222,,,,,,65,,,81,88,90,,,96,97,72,73,74',
',60,,,,66,67,,,,70,,68,69,71,311,312,75,76,,,,,,307,308,314,104,103',
'105,106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101,287,102,110,111',
',94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,285,,,,47',
',,,,,,,232,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,288,81,88,90,,,96',
'97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,311,312,75,76,,,,,,307,308',
'314,104,103,105,106,,,234,,,,,,,309,,,108,107,109,591,59,100,99,592',
',102,110,111,,94,95,,,,315,,,,,,,,,,,,,,,,,,,,593,,,233,,,61,62,,,63',
',,,,,,,,,,,,,,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96',
'97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,311,312,75,76,,,,,,307,308',
'314,104,103,105,106,,,234,,,,,,,309,,,108,107,109,591,59,100,99,592',
',102,110,111,,94,95,,,,315,,,,,,,,,,,,,,,,,,,,593,,,233,,,61,62,,,63',
',,,,,,,,,,,,,,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96',
'97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104',
'103,105,106,,,22,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111',
',94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,',
',,,,,,23,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97',
'72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104',
'103,105,106,,,22,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111',
',94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,',
',,,,,,23,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97',
'72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104',
'103,105,106,,,22,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111',
',94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,',
',,,,,,23,,,,,91,83,85,86,87,89,,,,84,92,116,,,,,115,65,,,81,88,90,,',
'96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,311,312,75,76,,,,,,307,308',
'314,104,103,105,106,,,234,,,,,,,309,,,108,107,109,98,59,100,99,101,',
'102,110,111,,94,95,,,,315,,,,,,,,,,,,,,,,,,,,349,,,36,,,61,62,,,63,',
'38,,,,,,,,,,,,,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,',
'96,97,72,73,74,12,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31',
'30,104,103,105,106,,,22,,,,,,11,48,10,13,108,107,109,98,59,100,99,101',
',102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,43,,,36,,,61,62,,,63',
',38,,,,47,,,,,,,,23,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88',
'90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,311,312,75,76,,,,,',
'307,308,314,104,103,105,106,,,234,,,,,,,48,,,108,107,109,98,59,100,99',
'101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61',
'62,,,63,,,,,,47,,,,,,,,232,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,',
',81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34,75,76',
',,,,,32,31,30,104,103,105,106,,,234,,,,,,,48,,,108,107,109,98,59,100',
'99,101,287,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233',
',,61,62,,,63,,285,,283,,47,,,,,,,,232,,,,,91,83,85,86,87,89,,,,84,92',
',,,,,,65,,288,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71',
'311,312,75,76,,,,,,307,308,314,104,103,105,106,,,234,,,,,,,48,,,108',
'107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,',
',,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232,,,,,91,83,85,86,87,89',
',,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68',
'69,71,311,312,75,76,,,,,,307,308,314,104,103,105,106,,,234,,,,,,,48',
',,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,',
',,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232,,,,,91,83,85,86',
'87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,',
'70,,68,69,71,311,312,75,76,,,,,,307,308,314,104,103,105,106,,,234,,',
',,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44',
',,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232,,,,,91',
'83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,12,60,',
',,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,',
'22,,,,,,11,48,10,13,108,107,109,98,59,100,99,101,,102,110,111,,94,95',
',45,46,44,,,,,,,,,,,,,,,,,,,,43,,,36,,,61,62,,,63,,38,,,,47,,,,,,,,23',
',,,,91,83,85,86,87,89,,,,84,92,,,,,,398,65,,,81,88,90,,,96,97,72,73',
'74,,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105',
'106,,,22,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95',
',45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,23',
',,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74',
',60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106',
',,22,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45',
'46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,23,,',
',,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60',
',,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,',
',22,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45',
'46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,23,,',
',,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60',
',,,66,67,,,,70,,68,69,71,311,312,75,76,,,,,,307,308,314,104,103,105',
'106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101,287,102,110,111,,94',
'95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,672,,283,,47',
',,,,,,,232,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,288,81,88,90,,,96',
'97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,311,312,75,76,,,,,,307,308',
'314,104,103,105,106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101,287',
'102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,',
'63,,,,283,,47,,,,,,,,232,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,288',
'81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,311,312,75,76',
',,,,,307,308,314,104,103,105,106,,,234,,,,,,,48,,,108,107,109,98,59',
'100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233',
',,61,62,,,63,,,,,,47,,,,,,,,232,,,,,91,83,85,86,87,89,,,,84,92,,,,,',
',65,,,81,88,90,,,96,97,72,73,74,12,60,,,,66,67,,,,70,,68,69,71,33,34',
'75,76,,,,,,32,31,30,104,103,105,106,,,22,,,,,,11,48,,13,108,107,109',
'98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,43',
',,36,,,61,62,,,63,,38,,,,47,,,,,,,,23,,,,,91,83,85,86,87,89,,,,84,92',
',,,,,398,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71',
'33,34,75,76,,,,,,32,31,30,104,103,105,106,,,22,,,,,,,48,,,108,107,109',
'98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227',
',,233,,,61,62,,,63,,,,,,47,,,,,,,,23,,,,,91,83,85,86,87,89,,,,84,92',
',,,,,,65,,,81,88,90,,,96,97,72,73,74,12,60,,,,66,67,,,,70,,68,69,71',
'33,34,75,76,,,,,,32,31,30,104,103,105,106,,,22,,,,,,11,48,,13,108,107',
'109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,',
',,43,,,36,,,61,62,,,63,,38,,,,47,,,,,,,,23,,,,,91,83,85,86,87,89,,,',
'84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69',
'71,311,312,75,76,,,,,,307,308,314,104,103,105,106,,,234,,,,,,,309,,',
'108,107,109,98,59,100,99,101,,102,110,111,,94,95,,,,315,,,,,,,,,,,,',
',,,,,,,305,,,301,,,61,62,,,63,,,,,,,,,,,,,,,,,,,91,83,85,86,87,89,,',
',84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69',
'71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,234,,,,,,,48,,,108,107',
'109,98,59,100,99,101,287,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,',
',,,,,227,,,233,,,61,62,,,63,,285,,283,,47,,,,,,,,232,,,,,91,83,85,86',
'87,89,,,,84,92,,,,,,,65,,288,81,88,90,,,96,97,72,73,74,,60,,,,66,67',
',,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,234,,,,',
',,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,',
',,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232,,,,,91,83',
'85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66',
'67,,,,70,,68,69,71,311,312,75,76,,,,,,307,308,314,104,103,105,106,,',
'234,,,,,,,309,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,,',
'315,,,,,,,,,,,,,,,,,,,,305,,,301,,,61,62,,,63,,,,,,,,,,,,,,,,,,,91,83',
'85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66',
'67,,,,70,,68,69,71,311,312,75,76,,,,,,307,308,314,104,103,105,106,,',
'234,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45',
'46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232,',
',,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,',
'60,,,,66,67,,,,70,,68,69,71,311,312,75,76,,,,,,307,308,314,104,103,105',
'106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95',
',45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232',
',,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74',
',60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106',
',,22,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45',
'46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,23,,',
',,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60',
',,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,',
',234,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45',
'46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,414,,,,47,,,,,,,,232',
',,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74',
',60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106',
',,234,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45',
'46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232,',
',,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,',
'60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106',
',,234,,,,,,,48,,,108,107,109,98,59,100,99,101,287,102,110,111,,94,95',
',45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,285,,283,,47,,',
',,,,,232,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,288,81,88,90,,,96',
'97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,311,312,75,76,,,,,,307,308',
'314,104,103,105,106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101,287',
'102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,',
'63,,672,,,,47,,,,,,,,232,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,288',
'81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,311,312,75,76',
',,,,,307,308,314,104,103,105,106,,,234,,,,,,,48,,,108,107,109,98,59',
'100,99,101,287,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,',
',233,,,61,62,,,63,,,,,,47,,,,,,,,232,,,,,91,83,85,86,87,89,,,,84,92',
',,,,,,65,,288,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71',
'33,34,75,76,,,,,,32,31,30,104,103,105,106,,,234,,,,,,,48,,,108,107,109',
'98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227',
',,233,,,61,62,,,63,,,,,,47,,,,,,,,232,,,,,91,83,85,86,87,89,,,,84,92',
',,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33',
'34,75,76,,,,,,32,31,30,104,103,105,106,,,234,,,,,,,48,,,108,107,109',
'98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227',
',,233,,,61,62,,,63,,414,,,,47,,,,,,,,232,,,,,91,83,85,86,87,89,,,,84',
'92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71',
'33,34,75,76,,,,,,32,31,30,104,103,105,106,,,22,,,,,,,48,,,108,107,109',
'98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227',
',,233,,,61,62,,,63,,,,,,47,,,,,,,,23,,,,,91,83,85,86,87,89,,,,84,92',
',,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33',
'34,75,76,,,,,,32,31,30,104,103,105,106,,,22,,,,,,,48,,,108,107,109,98',
'59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,',
',233,,,61,62,,,63,,,,,,47,,,,,,,,23,,,,,91,83,85,86,87,89,,,,84,92,',
',,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33',
'34,75,76,,,,,,32,31,30,104,103,105,106,,,22,,,,,,,48,,,108,107,109,98',
'59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,',
',233,,,61,62,,,63,,,,,,47,,,,,,,,23,,,,,91,83,85,86,87,89,,,,84,92,',
',,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,311',
'312,75,76,,,,,,307,308,314,104,103,105,106,,,234,,,,,,,48,,,108,107',
'109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,',
',,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232,,,,,91,83,85,86,87,89,,',
',84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69',
'71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,234,,,,,,,48,,,108,107',
'109,98,59,100,99,101,287,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,',
',,,,,227,,,233,,,61,62,,,63,,285,,283,,47,,,,,,,,232,,,,,91,83,85,86',
'87,89,,,,84,92,,,,,,,65,,288,81,88,90,,,96,97,72,73,74,,60,,,,66,67',
',,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,22,,,,,',
',48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,',
',,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,23,,,,,91,83,85',
'86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67',
',,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,22,,,,,',
',48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,',
',,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,23,,,,,91,83,85',
'86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67',
',,,70,,68,69,71,311,312,75,76,,,,,,307,308,314,104,103,105,106,,,234',
',,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44',
',,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232,,,,,91',
'83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,',
'66,67,,,,70,,68,69,71,311,312,75,76,,,,,,307,308,314,104,103,105,106',
',,234,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45',
'46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,767,,,,47,,,,,,,,232',
',,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74',
',60,,,,66,67,,,,70,,68,69,71,311,312,75,76,,,,,,307,308,314,104,103',
'105,106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,',
'94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,',
',,,,,232,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97',
'72,73,74,,60,,,,66,67,,,,70,,68,69,71,311,312,75,76,,,,,,307,308,314',
'104,103,105,106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110',
'111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,',
'47,,,,,,,,232,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96',
'97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,311,312,75,76,,,,,,307,308',
'314,104,103,105,106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101,287',
'102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,',
'63,,672,,283,,47,,,,,,,,232,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65',
',288,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,311,312',
'75,76,,,,,,307,308,314,104,103,105,106,,,234,,,,,,,48,,,108,107,109',
'98,59,100,99,101,287,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,',
',227,,,233,,,61,62,,,63,,,,283,,47,,,,,,,,232,,,,,91,83,85,86,87,89',
',,,84,92,,,,,,,65,,288,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70',
',68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,234,,,,,,,48,',
',108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,',
',,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232,,,,,91,83,85,86',
'87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,',
'70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,234,,,,,,,48',
',,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,',
',,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232,,,,,91,83,85,86',
'87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,',
'70,,68,69,71,311,312,75,76,,,,,,307,308,314,104,103,105,106,,,234,,',
',,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44',
',,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232,,,,,91',
'83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,',
'66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,234',
',,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44',
',,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232,,,,,91',
'83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,',
'66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,234',
',,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44',
',,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232,,,,,91',
'83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,',
'66,67,,,,70,,68,69,71,311,312,75,76,,,,,,307,308,314,104,103,105,106',
',,234,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45',
'46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232,',
',,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,',
'60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106',
',,234,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45',
'46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232,',
',,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,',
'60,,,,66,67,,,,70,,68,69,71,311,312,75,76,,,,,,307,308,314,104,103,105',
'106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95',
',45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232',
',,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74',
',60,,,,66,67,,,,70,,68,69,71,311,312,75,76,,,,,,307,308,314,104,103',
'105,106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,',
'94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,',
',,,,,232,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97',
'72,73,74,,60,,,,66,67,,,,70,,68,69,71,311,312,75,76,,,,,,307,308,314',
'104,103,105,106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110',
'111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,',
'47,,,,,,,,232,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96',
'97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,311,312,75,76,,,,,,307,308',
'314,104,103,105,106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101,,102',
'110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,',
',,,,47,,,,,,,,232,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90',
',,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,311,312,75,76,,,,,,307',
'308,314,104,103,105,106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101',
',102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,',
',63,,,,,,47,,,,,,,,232,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81',
'88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,311,312,75,76,,',
',,,307,308,314,104,103,105,106,,,234,,,,,,,48,,,108,107,109,98,59,100',
'99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,',
'61,62,,,63,,,,,,47,,,,,,,,232,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65',
',,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,311,312,75',
'76,,,,,,307,308,314,104,103,105,106,,,234,,,,,,,48,,,108,107,109,98',
'59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,',
',233,,,61,62,,,63,,,,,,47,,,,,,,,232,,,,,91,83,85,86,87,89,,,,84,92',
',,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,311',
'312,75,76,,,,,,307,308,314,104,103,105,106,,,234,,,,,,,309,,,108,107',
'109,98,59,100,99,101,,102,110,111,,94,95,,,,315,,,,,,,,,,,,,,,,,,,,305',
',,301,,,61,62,,,63,,,,,,,,,,,,,,,,,,,91,83,85,86,87,89,,,,84,92,,,,',
',,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,311,312',
'75,76,,,,,,307,308,314,104,103,105,106,,,234,,,,,,,48,,,108,107,109',
'98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227',
',,233,,,61,62,,,63,,,,,,47,,,,,,,,232,,,,,91,83,85,86,87,89,,,,84,92',
',,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,311',
'312,75,76,,,,,,307,308,314,104,103,105,106,,,234,,,,,,,48,,,108,107',
'109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,',
',,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232,,,,,91,83,85,86,87,89,,',
',84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69',
'71,311,312,75,76,,,,,,307,308,314,104,103,105,106,,,234,,,,,,,48,,,108',
'107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,',
',,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232,,,,,91,83,85,86,87,89',
',,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68',
'69,71,311,312,75,76,,,,,,307,308,314,104,103,105,106,,,234,,,,,,,48',
',,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,',
',,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232,,,,,91,83,85,86',
'87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,',
'70,,68,69,71,311,312,75,76,,,,,,307,308,314,104,103,105,106,,,234,,',
',,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44',
',,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232,,,,,91',
'83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,',
'66,67,,,,70,,68,69,71,311,312,75,76,,,,,,307,308,314,104,103,105,106',
',,234,,,,,,,309,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,',
',,315,,,,,,,,,,,,,,,,,,,,305,,,301,,,61,62,,,63,,,,,,,,,,,,,,,,,,,91',
'83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,',
'66,67,,,,70,,68,69,71,311,312,75,76,,,,,,307,308,314,104,103,105,106',
',,234,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45',
'46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232,',
',,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,',
'60,,,,66,67,,,,70,,68,69,71,311,312,75,76,,,,,,307,308,314,104,103,105',
'106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95',
',45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232',
',,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74',
',60,,,,66,67,,,,70,,68,69,71,311,312,75,76,,,,,,307,308,314,104,103',
'105,106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,',
'94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,414,,,,47',
',,,,,,,232,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97',
'72,73,74,,60,,,,66,67,,,,70,,68,69,71,311,312,75,76,,,,,,307,308,314',
'104,103,105,106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110',
'111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,',
'47,,,,,,,,232,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96',
'97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,311,312,75,76,,,,,,307,308',
'314,104,103,105,106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101,,102',
'110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,',
',,,,47,,,,,,,,232,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90',
',,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,311,312,75,76,,,,,,307',
'308,314,104,103,105,106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101',
',102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,',
',63,,,,,,47,,,,,,,,232,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81',
'88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,311,312,75,76,,',
',,,307,308,314,104,103,105,106,,,234,,,,,,,48,,,108,107,109,98,59,100',
'99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,',
'61,62,,,63,,,,,,47,,,,,,,,232,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65',
',,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,311,312,75',
'76,,,,,,307,308,314,104,103,105,106,,,234,,,,,,,48,,,108,107,109,98',
'59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,',
',233,,,61,62,,,63,,,,,,47,,,,,,,,232,,,,,91,83,85,86,87,89,,,,84,92',
',,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,311',
'312,75,76,,,,,,307,308,314,104,103,105,106,,,234,,,,,,,48,,,108,107',
'109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,',
',,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232,,,,,91,83,85,86,87,89,,',
',84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69',
'71,311,312,75,76,,,,,,307,308,314,104,103,105,106,,,234,,,,,,,48,,,108',
'107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,',
',,,,,,227,,,233,,,61,62,,,63,,285,,,,47,,,,,,,,232,,,,,91,83,85,86,87',
'89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70',
',68,69,71,311,312,75,76,,,,,,307,308,314,104,103,105,106,,,234,,,,,',
',48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,',
',,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232,,,,,91,83',
'85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,-605,,96,97,,,,-605,-605,-605',
',,-605,-605,-605,560,-605,557,556,555,564,558,,,,-605,-605,-605,-605',
',,567,,,,,-605,-605,,-605,-605,-605,-605,-605,,,,,,,,,,562,753,,,,,',
',,572,571,575,574,,-605,-605,-605,-605,-605,-605,-605,-605,-605,-605',
'-605,-605,-605,-605,,,-605,-605,-605,,,-605,,,-605,,,-605,-605,,-605',
'568,-605,,-605,,-605,-605,-605,-605,-605,-605,-605,,-605,-605,-605,',
',,,,,,,,,,,-605,-605,-605,-605,-281,-605,,-605,,,,-281,-281,-281,,,-281',
'-281,-281,560,-281,557,556,555,564,558,,,,,-281,-281,-281,,,567,,,,',
'-281,-281,,-281,-281,-281,-281,-281,,,,,,,,,,562,,,,,,,,,572,571,575',
'574,,-281,-281,-281,-281,-281,-281,-281,-281,-281,-281,-281,-281,-281',
'-281,,,-281,-281,-281,,,-281,,,-281,,,-281,-281,,-281,568,-281,,-281',
',-281,-281,-281,-281,-281,-281,-281,,-281,,-281,,,,,,,,,,,,,-281,-281',
'-281,-281,-604,-281,,-281,,,,-604,-604,-604,,,-604,-604,-604,560,-604',
'557,556,555,564,558,,,,-604,-604,-604,-604,,,567,,,,,-604,-604,,-604',
'-604,-604,-604,-604,,,,,,,,,,562,,,,,,,,,572,571,575,574,,-604,-604',
'-604,-604,-604,-604,-604,-604,-604,-604,-604,-604,-604,-604,,,-604,-604',
'-604,,,-604,,,-604,,,-604,-604,,-604,568,-604,,-604,,-604,-604,-604',
'-604,-604,-604,-604,,-604,-604,-604,,,,,,,,,,,,,-604,-604,-604,-604',
',-604,,-604,176,187,177,200,173,193,183,182,203,204,198,181,180,175',
'201,205,206,185,174,188,192,194,186,179,,,,195,202,197,196,189,199,184',
'172,191,190,,,,,,171,178,169,170,166,167,168,127,129,126,,128,,,,,,',
',,161,162,,157,139,140,141,148,145,147,,,142,143,,,,163,164,149,150',
',,,,,,,,,,,,,154,153,,138,160,156,155,151,152,146,144,136,159,137,,',
'165,91,,,,,,,,,,92,,,,,,,,,158,176,187,177,200,173,193,183,182,203,204',
'198,181,180,175,201,205,206,185,174,188,192,194,186,179,,,,195,202,197',
'364,363,365,362,172,191,190,,,,,,171,178,169,170,359,360,361,357,129',
'100,99,358,,102,,,,,,,161,162,,157,139,140,141,148,145,147,,,142,143',
',,,163,164,149,150,,,,,,371,,,,,,,,154,153,,138,160,156,155,151,152',
'146,144,136,159,137,,,165,,,,,,,,,,,,,,,,,,,,158,176,187,177,200,173',
'193,183,182,203,204,198,181,180,175,201,205,206,185,174,188,192,194',
'186,179,,,,195,202,197,196,189,199,184,172,191,190,,,,,,171,178,169',
'170,166,167,168,127,129,395,394,128,,396,,,,,,,161,162,,157,139,140',
'141,148,145,147,,,142,143,,,,163,164,149,150,,,,,,,,,,,,,,154,153,,138',
'160,156,155,151,152,146,144,136,159,137,,,165,,,,,,,,,,,,,,,,,,,,158',
'176,187,177,200,173,193,183,182,203,204,198,181,180,175,201,205,206',
'185,174,188,192,194,186,179,,,,195,202,197,196,189,199,184,172,191,190',
',,,,,171,178,169,170,166,167,168,127,129,,,128,,,,,,,,,161,162,,157',
'139,140,141,148,145,147,,,142,143,,,,163,164,149,150,,,,,,,,,,,,,,154',
'153,,138,160,156,155,151,152,146,144,136,159,137,,,165,91,,,,,,,,,,92',
',,,,,,,,158,176,187,177,200,173,193,183,182,203,204,198,181,180,175',
'201,205,206,185,174,188,192,194,186,179,,,,195,202,197,196,189,199,184',
'172,191,190,,,,,,171,178,169,170,166,167,168,127,129,,,128,,,,,,,,,161',
'162,,157,139,140,141,148,145,147,,,142,143,,,,163,164,149,150,,,,,,',
',,,,,,,154,153,,138,160,156,155,151,152,146,144,136,159,137,,,165,,',
',,,,,,,,,,,,,,,,,158,176,187,177,200,173,193,183,182,203,204,198,181',
'180,175,201,205,206,185,174,188,192,194,186,179,,,,195,202,197,196,189',
'199,184,172,191,190,,,,,,171,178,169,170,166,167,168,127,129,,,128,',
',,,,,,,161,162,,157,139,140,141,148,145,147,,,142,143,,,,163,164,149',
'150,,,,,,,,,,,,,,154,153,,138,160,156,155,151,152,146,144,136,159,137',
',,165,91,,,,,,,,,,92,,,,,,,,,158,176,187,177,200,173,193,183,182,203',
'204,198,181,180,175,201,205,206,185,174,188,192,194,186,179,,,,195,202',
'197,196,189,199,184,172,191,190,,,,,,171,178,169,170,166,167,168,127',
'129,,,128,,,,,,,,,161,162,,157,139,140,141,148,145,147,,,142,143,,,',
'163,164,149,150,,,,,,,,,,,,,,154,153,,138,160,156,155,151,152,146,144',
'136,159,137,,,165,91,,,,-622,,,,,,92,-622,-622,-622,,,-622,-622,-622',
'158,-622,,,,,,,,,-622,-622,-622,,,,,,,,,-622,-622,,-622,-622,-622,-622',
'-622,,,,,,,,,,,,,,,,,,,,,,,,-622,-622,-622,-622,-622,-622,-622,-622',
'-622,-622,-622,-622,-622,-622,,,-622,-622,-622,,,-622,,273,-622,,,-622',
'-622,,-622,,-622,,-622,,-622,-622,-622,-622,-622,-622,-622,,-622,-622',
'-622,,,,,,,,,,,,-296,-622,-622,,-622,,-622,-296,-296,-296,,,-296,-296',
'-296,560,-296,557,556,555,564,558,,,,,-296,-296,,,,567,,,,,-296,-296',
',-296,-296,-296,-296,-296,,,,,,,,,,562,,,,,,,,,,,575,574,,-296,-296',
'-296,-296,-296,-296,-296,-296,-296,-296,-296,-296,-296,-296,,,-296,-296',
'-296,,,-296,,276,-296,,,-296,-296,,-296,568,-296,,-296,,-296,-296,-296',
'-296,-296,-296,-296,,-296,,-296,,,,,,,,,,,,-425,-296,-296,,-296,,-296',
'-425,-425,-425,,,-425,-425,-425,560,-425,557,556,555,564,558,,,,-425',
'-425,-425,,,,567,,,,,-425,-425,,-425,-425,-425,-425,-425,,,,,,,,,,562',
',,,,,,,,572,571,575,574,,-425,-425,-425,-425,-425,-425,-425,-425,-425',
'-425,-425,-425,-425,-425,,,-425,-425,-425,,,-425,,273,-425,,,-425,-425',
',-425,568,-425,,-425,,-425,-425,-425,-425,-425,-425,-425,,-425,-425',
'-425,,,,,,,,,,,,-622,-425,-425,,-425,,-425,-622,-622,-622,,,-622,-622',
'-622,,-622,560,,557,556,555,564,558,,-622,-622,,,,,,,567,,,-622,-622',
',-622,-622,-622,-622,-622,,,560,,557,556,555,564,558,,,562,,,,,,,567',
',572,571,575,574,,,,,,,,,,,-622,,,,,,562,-622,,,,,273,-622,222,572,571',
'575,574,,,,568,,650,428,,,651,,,,,,-622,-622,,161,162,,157,139,140,141',
'148,145,147,,-622,142,143,568,,-622,163,164,149,150,,,,,,273,,,,,,,',
'154,153,,138,160,156,155,151,152,146,144,136,159,137,,,165,,,,,652,435',
',,653,,,,,,,,,161,162,158,157,139,140,141,148,145,147,,,142,143,,,,163',
'164,149,150,,,,,,273,,,,,,,,154,153,,138,160,156,155,151,152,146,144',
'136,159,137,,,165,,,,,681,428,,,682,,,,,,,,,161,162,158,157,139,140',
'141,148,145,147,,,142,143,,,,163,164,149,150,,,,,,273,,,,,,,,154,153',
',138,160,156,155,151,152,146,144,136,159,137,,,165,,,,,684,435,,,685',
',,,,,,,,161,162,158,157,139,140,141,148,145,147,,,142,143,,,,163,164',
'149,150,,,,,,273,,,,,,,,154,153,,138,160,156,155,151,152,146,144,136',
'159,137,,,165,,,,,650,428,,,651,,,,,,,,,161,162,158,157,139,140,141',
'148,145,147,,,142,143,,,,163,164,149,150,,,,,,273,,,,,,,,154,153,,138',
'160,156,155,151,152,146,144,136,159,137,,,165,,,,,652,435,,,653,,,,',
',,,,161,162,158,157,139,140,141,148,145,147,,,142,143,,,,163,164,149',
'150,,,,,,273,,,,,,,,154,153,,138,160,156,155,151,152,146,144,136,159',
'137,,,165,,,,,485,428,,,486,,,,,,,,,161,162,158,157,139,140,141,148',
'145,147,,,142,143,,,,163,164,149,150,,,,,,273,,,,,,,,154,153,,138,160',
'156,155,151,152,146,144,136,159,137,,,165,,,,,854,435,,,855,,,,,,,,',
'161,162,158,157,139,140,141,148,145,147,,,142,143,,,,163,164,149,150',
',,,,,273,,,,,,,,154,153,,138,160,156,155,151,152,146,144,136,159,137',
',,165,,,,,424,428,,,425,,,,,,,,,161,162,158,157,139,140,141,148,145',
'147,,,142,143,,,,163,164,149,150,,,,,,273,,,,,,,,154,153,,138,160,156',
'155,151,152,146,144,136,159,137,,,165,,,,,431,435,,,430,,,,,,,,,161',
'162,158,157,139,140,141,148,145,147,,,142,143,,,,163,164,149,150,,,',
',,273,,,,,,,,154,153,,138,160,156,155,151,152,146,144,136,159,137,,560',
'165,557,556,555,564,558,560,,557,556,555,564,558,,,567,,,,,158,,567',
'560,,557,556,555,564,558,,,,,,,,562,,567,,,,,562,,572,571,575,574,,',
',,,575,574,,,,560,562,557,556,555,564,558,,,,572,571,575,574,,560,567',
'557,556,555,564,558,568,,,,,,,568,,567,,,,,,,562,560,,557,556,555,564',
'558,568,,,575,574,,,562,560,567,557,556,555,564,558,,,,575,574,,,,,567',
',,,,,,562,,,,,,568,,,572,571,575,574,,,562,753,,485,428,,568,486,,572',
'571,575,574,,,,161,162,,157,139,140,141,148,145,147,,,142,143,568,,',
'163,164,149,150,,,,,,,,,568,,,,,154,153,,138,160,156,155,151,152,146',
'144,136,159,137,,,165,,,,,1002,435,,,1001,,,,,,,,,161,162,158,157,139',
'140,141,148,145,147,,,142,143,,,,163,164,149,150,,,,,,273,,,,,,,,154',
'153,,138,160,156,155,151,152,146,144,136,159,137,,560,165,557,556,555',
'564,558,560,,557,556,555,564,558,,,567,,,,,158,,567,560,,557,556,555',
'564,558,,,,,,,,562,546,567,,,,,562,,572,571,575,574,,,,572,571,575,574',
',,,560,562,557,556,555,564,558,,,,,,575,574,,560,567,557,556,555,564',
'558,568,,,,,,,568,,567,,,,,,,562,,,,,,,,568,,,575,574,,,562,735,428',
',,736,,,,,,575,574,,161,162,,157,139,140,141,148,145,147,,,142,143,',
',568,163,164,149,150,,,,,,273,,,,,568,,,154,153,,138,160,156,155,151',
'152,146,144,136,159,137,,,165,,,,,737,435,,,738,,,,,,,,,161,162,158',
'157,139,140,141,148,145,147,,,142,143,,,,163,164,149,150,,,,,,273,,',
',,,,,154,153,,138,160,156,155,151,152,146,144,136,159,137,,,165,,,,',
'1030,428,,,1031,,,,,,,,,161,162,158,157,139,140,141,148,145,147,,,142',
'143,,,,163,164,149,150,,,,,,273,,,,,,,,154,153,,138,160,156,155,151',
'152,146,144,136,159,137,,,165,,,,,1032,435,,,1033,,,,,,,,,161,162,158',
'157,139,140,141,148,145,147,,,142,143,,,,163,164,149,150,,,,,,273,,',
',,,,,154,153,,138,160,156,155,151,152,146,144,136,159,137,,560,165,557',
'556,555,564,558,,,,,,,,,,567,,,,,158,,,,,,,,,,,,,,,,,562,,,,,,,,,,,575',
'574,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,568' ]
        racc_action_table = arr = ::Array.new(26275, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'652,926,386,1030,1031,340,64,652,652,652,597,663,652,652,652,310,652',
'361,389,676,852,460,1032,1047,361,652,652,652,652,347,22,339,676,1045',
'904,3,652,652,80,652,652,652,652,652,851,29,80,543,13,853,543,582,589',
'460,735,737,343,460,460,545,350,343,664,346,15,386,22,652,652,652,652',
'652,652,652,652,652,652,652,652,652,652,389,736,652,652,652,581,652',
'652,448,448,652,16,64,652,652,664,652,663,652,1032,652,310,652,652,652',
'652,652,652,652,29,652,652,652,682,926,597,1030,1031,340,926,737,1030',
'1031,340,852,652,652,652,652,431,652,29,652,347,597,1032,431,431,431',
'597,1032,652,431,431,339,431,1045,904,853,339,582,1045,904,853,431,582',
'589,851,735,737,851,738,851,545,350,431,431,346,431,431,431,431,431',
'952,691,691,952,492,448,19,682,681,756,756,380,581,736,757,757,614,581',
'757,757,757,315,315,431,431,431,431,431,431,431,431,431,431,431,431',
'431,431,42,492,431,431,431,682,431,617,682,754,431,44,44,431,754,453',
'650,738,431,651,431,682,431,431,431,431,431,431,431,291,431,431,431',
'383,291,380,380,380,681,684,614,614,42,787,430,431,431,228,431,614,431',
'430,430,430,691,42,738,430,430,483,430,431,756,315,315,983,491,983,617',
'617,453,650,592,681,651,226,681,617,225,331,430,430,331,430,430,430',
'430,430,25,681,44,44,684,483,383,383,383,40,787,684,491,126,228,591',
'684,812,126,126,684,1016,1016,430,430,430,430,430,430,430,430,430,430',
'430,430,430,430,592,684,430,430,430,226,430,592,225,854,430,593,592',
'430,749,593,592,43,430,749,430,633,430,430,430,430,430,430,430,48,430',
'591,430,812,592,359,377,72,591,377,812,87,359,591,653,430,430,591,430',
'812,430,653,653,653,935,703,653,653,653,935,653,430,854,633,880,591',
'703,812,861,854,653,653,653,861,854,880,633,88,854,89,653,653,357,653',
'653,653,653,653,922,357,922,922,922,90,922,27,854,377,377,703,703,718',
'27,718,718,718,391,718,880,880,124,653,653,653,653,653,653,653,653,653',
'653,653,653,653,653,338,338,653,653,653,303,653,653,703,207,653,373',
'303,653,653,18,653,880,653,227,653,303,653,653,653,653,653,653,653,229',
'653,230,653,915,375,915,915,915,915,915,234,922,391,391,391,653,653',
'653,653,915,653,101,653,266,718,269,424,18,101,101,101,653,425,101,101',
'101,280,101,281,302,18,915,373,373,373,101,302,101,101,101,284,5,915',
'915,295,302,5,101,101,297,101,101,101,101,101,375,375,375,424,1014,365',
'1014,1014,1014,425,1014,562,365,562,562,562,424,562,724,724,298,915',
'425,101,101,101,101,101,101,101,101,101,101,101,101,101,101,319,41,101',
'101,101,1014,101,101,367,299,101,305,562,101,101,367,101,308,101,309',
'101,562,101,101,101,101,101,101,101,314,101,316,101,1040,358,1040,1040',
'1040,1040,1040,320,358,319,41,459,101,101,101,101,1040,101,98,101,323',
'696,319,41,696,98,98,98,101,329,98,98,98,715,98,715,715,715,1040,715',
'20,20,98,459,98,98,98,459,459,1040,1040,327,327,333,98,98,363,98,98',
'98,98,98,332,363,344,332,976,362,976,976,976,715,976,840,362,840,840',
'840,345,840,715,706,706,1040,349,98,98,98,98,98,98,98,98,98,98,98,98',
'98,98,351,478,98,98,98,976,98,98,364,379,98,382,840,98,98,364,98,385',
'98,388,98,840,98,98,98,98,98,98,98,360,98,410,98,478,413,894,360,478',
'478,478,478,415,894,750,750,98,98,98,98,419,98,894,98,807,807,807,807',
'807,807,422,423,98,807,807,432,440,461,807,462,807,807,807,807,807,807',
'807,293,293,293,293,293,807,807,807,807,807,807,807,463,464,807,493',
'494,509,510,443,807,807,513,807,807,807,807,807,807,807,807,807,515',
'807,807,807,520,807,807,523,807,807,807,443,443,443,443,443,443,443',
'443,443,443,443,855,443,443,595,531,443,443,855,807,532,595,807,855',
'533,807,807,855,541,807,595,807,443,544,443,807,443,443,443,443,443',
'443,443,807,443,548,549,1033,807,807,807,807,807,807,1033,551,552,807',
'807,1033,443,553,443,1033,561,807,569,573,807,807,807,576,578,807,807',
'808,808,808,808,808,808,583,584,1008,808,808,621,624,626,808,1008,808',
'808,808,808,808,808,808,630,1008,634,639,645,808,808,808,808,808,808',
'808,654,656,808,662,669,671,678,655,808,808,680,808,808,808,808,808',
'808,808,808,808,683,808,808,808,686,808,808,687,808,808,808,655,655',
'655,655,655,655,655,655,655,655,655,321,655,655,741,690,655,655,321',
'808,692,741,808,702,717,808,808,321,719,808,741,808,655,726,655,808',
'655,655,655,655,655,655,655,808,655,731,734,956,808,808,808,808,808',
'808,956,348,766,808,808,771,655,789,348,956,790,808,792,793,808,808',
'808,348,794,808,808,897,897,897,897,897,897,796,797,965,897,897,798',
'799,811,897,965,897,897,897,897,897,897,897,815,965,818,819,823,897',
'897,897,897,897,897,897,824,825,897,826,830,831,833,418,897,897,834',
'897,897,897,897,897,897,897,897,897,836,897,897,897,839,897,897,841',
'897,897,897,418,418,418,418,418,418,418,418,418,418,418,966,418,418',
'519,844,418,418,966,897,847,519,897,857,862,897,897,966,863,897,519',
'897,418,864,418,897,418,418,418,418,418,418,418,897,418,873,874,49,897',
'897,897,897,897,897,49,969,891,897,897,895,418,896,969,49,898,897,899',
'924,897,897,897,969,928,897,897,2,2,2,2,2,2,929,934,967,2,2,942,945',
'946,2,967,2,2,2,2,2,2,2,947,967,948,950,960,2,2,2,2,2,2,2,968,892,2',
'892,892,892,971,892,2,2,2,2,2,2,2,2,2,2,2,2,972,2,2,2,973,2,2,974,2',
'2,2,438,438,438,438,438,438,438,438,438,438,438,685,438,438,17,975,438',
'438,685,2,977,17,2,685,1001,2,2,685,1002,2,17,2,438,1004,438,2,438,438',
'438,438,438,438,438,2,438,1015,1020,224,2,2,2,2,2,2,224,306,1021,2,2',
'1022,438,1023,306,224,1024,2,1025,1026,2,2,2,306,1029,2,2,817,817,817',
'817,817,817,1034,1035,304,817,817,1,,,817,304,817,817,817,817,817,817',
'817,,304,,,,817,817,817,817,817,817,817,,1000,817,1000,1000,1000,,1000',
'817,817,,817,817,817,817,817,817,817,817,817,,817,817,817,,817,817,',
'817,817,817,775,775,775,775,775,775,775,775,775,775,775,,775,775,,,775',
'775,,817,,,817,,,817,817,,,817,,817,775,,775,817,775,775,775,775,775',
'775,775,817,775,,,,817,817,817,817,817,817,,,,817,817,,775,,,,,817,',
',817,817,817,,,817,817,701,701,701,701,701,701,,,,701,701,,,,701,,701',
'701,701,701,701,701,701,675,675,675,675,675,701,701,701,701,701,701',
'701,,,701,508,508,508,508,508,701,701,,701,701,701,701,701,701,701,701',
'701,,701,701,701,,701,701,,701,701,701,876,876,876,876,876,876,876,876',
'876,876,876,,876,876,,,876,876,,701,,,701,,,701,701,,,701,,701,876,',
'876,701,876,876,876,876,876,876,876,701,876,,,,701,701,701,701,701,701',
',,,701,701,,876,,,,,701,,,701,701,701,,,701,701,404,404,404,404,404',
'404,,,,404,404,,,,404,,404,404,404,404,404,404,404,9,9,9,9,9,404,404',
'404,404,404,404,404,,,404,,,,,,404,404,404,404,404,404,404,404,404,404',
'404,404,,404,404,404,,404,404,,404,404,404,24,24,24,24,24,24,24,24,24',
'24,24,,24,24,,,24,24,,404,,,404,,,404,404,,,404,,404,24,,24,404,24,24',
'24,24,24,24,24,404,24,,,,404,404,404,404,404,404,,,,404,404,,24,,,,',
'404,,,404,404,404,,,404,404,988,988,988,988,988,988,,,,988,988,,,,988',
',988,988,988,988,988,988,988,,,,,,988,988,988,988,988,988,988,,,988',
',,,,,988,988,,988,988,988,988,988,988,988,988,988,,988,988,988,,988',
'988,,988,988,988,773,773,773,773,773,773,773,773,773,773,773,,773,773',
',,773,773,,988,,,988,,,988,988,,,988,,988,773,,773,988,773,773,773,773',
'773,773,773,988,773,,,,988,988,988,988,988,988,,,,988,988,,773,,,,,988',
',,988,988,988,,,988,988,326,326,326,326,326,326,,,,326,326,,,,326,,326',
'326,326,326,326,326,326,,,,,,326,326,326,326,326,326,326,,,326,,,,,',
'326,326,,326,326,326,326,326,326,326,326,326,,326,326,326,,326,326,',
'326,326,326,782,782,782,782,782,782,782,782,782,782,782,,782,782,,,782',
'782,,326,,,326,,,326,326,,,326,,326,782,,782,326,782,782,782,782,782',
'782,782,326,782,,,,326,326,326,326,326,326,,,,326,326,,782,,,,,326,',
',326,326,326,,,326,326,984,984,984,984,984,984,,,,984,984,,,,984,,984',
'984,984,984,984,984,984,,,,,,984,984,984,984,984,984,984,,,984,,,,,',
'984,984,,984,984,984,984,984,984,984,984,984,,984,984,984,,984,984,',
'984,984,984,278,278,278,278,278,278,278,278,278,278,278,,278,278,,,278',
'278,,984,,,984,,,984,984,,,984,,984,278,,278,984,278,278,278,278,278',
'278,278,984,278,,,,984,984,984,984,984,984,,,,984,984,,278,,,,,984,',
',984,984,984,,,984,984,858,858,858,858,858,858,,,,858,858,,,,858,,858',
'858,858,858,858,858,858,,,,,,858,858,858,858,858,858,858,,,858,,,,,',
'858,858,,858,858,858,858,858,858,858,858,858,,858,858,858,,858,858,',
'858,858,858,768,768,768,768,768,768,768,768,768,768,768,,768,768,,,768',
'768,,858,,,858,,,858,858,,,858,,858,768,,768,858,768,768,768,768,768',
'768,768,858,768,,,,858,858,858,858,858,858,,,,858,858,,768,,,,,858,',
',858,858,858,,,858,858,301,301,301,301,301,301,,,,301,301,,,,301,,301',
'301,301,301,301,301,301,,,,,,301,301,301,301,301,301,301,,,301,,,,,',
'301,301,,301,301,301,301,301,301,301,301,301,,301,301,301,,301,301,',
'301,301,301,689,689,689,689,689,689,689,689,689,689,689,,689,689,,,689',
'689,,301,,,301,,,301,301,,,301,,301,689,,689,301,689,689,689,689,689',
'689,689,301,689,,,,301,301,301,301,301,301,,,,301,301,,689,,,,,301,',
',301,301,301,,,301,301,979,979,979,979,979,979,,,,979,979,,,,979,,979',
'979,979,979,979,979,979,,,,,,979,979,979,979,979,979,979,,,979,,,,,',
'979,979,,979,979,979,979,979,979,979,979,979,,979,979,979,,979,979,',
'979,979,979,482,482,482,482,482,482,482,482,482,482,482,,482,482,,,482',
'482,,979,,,979,,,979,979,,,979,,979,482,,482,979,482,482,482,482,482',
'482,482,979,482,,,,979,979,979,979,979,979,,,,979,979,482,482,,,,,979',
',,979,979,979,,,979,979,36,36,36,36,36,36,,,,36,36,,,,36,,36,36,36,36',
'36,36,36,,,,,,36,36,36,36,36,36,36,,,36,,,,,,36,36,,36,36,36,36,36,36',
'36,36,36,,36,36,36,,36,36,,36,36,36,529,529,529,529,529,529,529,529',
'529,529,529,,529,529,,,529,529,,36,,,36,,,36,36,,,36,,36,529,,529,36',
'529,529,529,529,529,529,529,36,529,,,,36,36,36,36,36,36,,,,36,36,,529',
',,,,36,,,36,36,36,,,36,36,296,296,296,296,296,296,,,,296,296,,,,296',
',296,296,296,296,296,296,296,,,,,,296,296,296,296,296,296,296,,,296',
',,,,,296,296,,296,296,296,296,296,296,296,296,296,,296,296,296,,296',
'296,,296,296,296,780,780,780,780,780,780,780,780,780,780,780,,780,780',
',,780,780,,296,,,296,,,296,296,,,296,,296,780,,780,296,780,780,780,780',
'780,780,780,296,780,,,,296,296,296,296,296,296,,,,296,296,,780,,,,,296',
',,296,296,296,,,296,296,233,233,233,233,233,233,,,,233,233,,,,233,,233',
'233,233,233,233,233,233,,,,,,233,233,233,233,233,233,233,,,233,,,,,',
'233,233,,233,233,233,233,233,233,233,233,233,,233,233,233,,233,233,',
'233,233,233,879,879,879,879,879,879,879,879,879,879,879,,879,879,,,879',
'879,,233,,,233,,,233,233,,,233,,233,879,,879,233,879,879,879,879,879',
'879,879,233,879,,,,233,233,233,233,233,233,,,,233,233,,879,,,,,233,',
',233,233,233,,,233,233,849,849,849,849,849,849,,,,849,849,,,,849,,849',
'849,849,849,849,849,849,,,,,,849,849,849,849,849,849,849,,,849,,,,,',
'849,849,,849,849,849,849,849,849,849,849,849,,849,849,849,,849,849,',
'849,849,849,778,778,778,778,778,778,778,778,778,778,778,,778,778,,,778',
'778,,849,,,849,,,849,849,,,849,,849,778,,778,849,778,778,778,778,778',
'778,778,849,778,,,,849,849,849,849,849,849,,,,849,849,,778,,,,,849,',
',849,849,849,,,849,849,580,580,580,580,580,580,,,,580,580,,,,580,,580',
'580,580,580,580,580,580,,,,,,580,580,580,580,580,580,580,479,,580,,',
',,,580,580,,580,580,580,580,580,580,580,580,580,,580,580,580,,580,580',
',580,580,580,470,479,,,,479,479,479,479,978,,978,978,978,,978,470,470',
',580,,,580,,467,580,580,,,580,,580,470,,470,580,470,470,470,470,467',
'467,470,580,470,,,978,580,580,580,580,580,580,,,467,580,580,,467,467',
'467,467,,580,,,580,580,580,,,580,580,848,848,848,848,848,848,,,,848',
'848,,,,848,,848,848,848,848,848,848,848,,,,,,848,848,848,848,848,848',
'848,,923,848,923,923,923,,923,848,848,,848,848,848,848,848,848,848,848',
'848,,848,848,848,,848,848,,848,848,848,471,,,842,,842,842,842,923,842',
',,,,,,471,471,,848,,,848,,,848,848,,,848,,848,471,,471,848,471,471,471',
'471,,842,471,848,471,,,,848,848,848,848,848,848,,,,848,848,,,,,,,848',
',,848,848,848,,,848,848,751,751,751,751,751,751,,,,751,751,,,,751,,751',
'751,751,751,751,751,751,,,,,,751,751,751,751,751,751,751,,,751,,,,,',
'751,751,,751,751,751,751,751,751,751,751,751,,751,751,751,,751,751,',
'751,751,751,472,,,,,,,,,,,,,,,,472,472,,751,,,751,,,751,751,,,751,,751',
'472,,472,751,472,472,472,472,,,472,751,472,,,,751,751,751,751,751,751',
',,,751,751,,,,,,,751,,,751,751,751,,,751,751,752,752,752,752,752,752',
',,,752,752,,,,752,,752,752,752,752,752,752,752,,,,,,752,752,752,752',
'752,752,752,,,752,,,,,,752,752,,752,752,752,752,752,752,752,752,752',
',752,752,752,,752,752,,752,752,752,473,473,473,473,473,473,473,,,473',
'473,,,,,,473,473,,752,,,752,,,752,752,,,752,,752,473,,473,752,473,473',
'473,473,473,473,473,752,473,,,,752,752,752,752,752,752,,,,752,752,,',
',,,,752,,,752,752,752,,,752,752,964,964,964,964,964,964,,,,964,964,',
',,964,,964,964,964,964,964,964,964,,,,,,964,964,964,964,964,964,964',
',,964,,,,,,964,964,,964,964,964,964,964,964,964,964,964,,964,964,964',
',964,964,,964,964,964,481,481,481,481,481,481,481,481,,481,481,,,,,',
'481,481,,964,,,964,,,964,964,,,964,,964,481,,481,964,481,481,481,481',
'481,481,481,964,481,,,,964,964,964,964,964,964,,,,964,964,,,,,,,964',
',,964,964,964,,,964,964,577,577,577,577,577,577,,,,577,577,,,,577,,577',
'577,577,577,577,577,577,,,,,,577,577,577,577,577,577,577,,,577,,,,,',
'577,577,,577,577,577,577,577,577,577,577,577,,577,577,577,,577,577,',
'577,577,577,474,474,474,474,474,474,474,,,474,474,,,,,,474,474,,577',
',,577,,,577,577,,,577,,577,474,,474,577,474,474,474,474,474,474,474',
'577,474,,,,577,577,577,577,577,577,,,,577,577,,,,,,,577,,,577,577,577',
',,577,577,209,209,209,209,209,209,,,,209,209,,,,209,,209,209,209,209',
'209,209,209,,,,,,209,209,209,209,209,209,209,,,209,,,,,,209,209,,209',
'209,209,209,209,209,209,209,209,,209,209,209,,209,209,,209,209,209,475',
'475,475,475,475,475,475,,,475,475,,,,,,475,475,,209,,,209,,,209,209',
',,209,,209,475,,475,209,475,475,475,475,475,475,475,209,475,,,,209,209',
'209,209,209,209,,,,209,209,,,,,,,209,,,209,209,209,,,209,209,987,987',
'987,987,987,987,,,,987,987,,,,987,,987,987,987,987,987,987,987,,,,,',
'987,987,987,987,987,987,987,,,987,,,,,,987,987,,987,987,987,987,987',
'987,987,987,987,,987,987,987,,987,987,,987,987,987,476,476,476,476,476',
'476,476,,,476,476,,,,,,476,476,,987,,,987,,,987,987,,,987,,987,476,',
'476,987,476,476,476,476,476,476,476,987,476,,,,987,987,987,987,987,987',
',,,987,987,,,,,,,987,,,987,987,987,,,987,987,931,931,931,931,931,931',
',,,931,931,,,,931,,931,931,931,931,931,931,931,,,,,,931,931,931,931',
'931,931,931,,,931,,,,,,931,931,,931,931,931,931,931,931,931,931,931',
',931,931,931,,931,931,,931,931,931,477,477,477,477,477,477,477,,,477',
'477,,,,,,477,477,,931,,,931,,,931,931,,,931,,931,477,,477,931,477,477',
'477,477,477,477,477,931,477,,,,931,931,931,931,931,931,,,,931,931,,',
',,,,931,,,931,931,931,,,931,931,901,901,901,901,901,901,,,,901,901,',
',,901,,901,901,901,901,901,901,901,,,,,,901,901,901,901,901,901,901',
',,901,,,,,,901,901,,901,901,901,901,901,901,901,901,901,,901,901,901',
',901,901,,901,901,901,480,480,480,480,480,480,480,,,480,480,,,,,,480',
'480,,901,,,901,,,901,901,,,901,,901,480,,480,901,480,480,480,480,480',
'480,480,901,480,,,,901,901,901,901,901,901,,,,901,901,,,,,,,901,,,901',
'901,901,,,901,901,758,758,758,758,758,758,,,,758,758,,,,758,,758,758',
'758,758,758,758,758,,,,,,758,758,758,758,758,758,758,,,758,,,,,,758',
'758,,758,758,758,758,758,758,758,758,758,,758,758,758,,758,758,,758',
'758,758,458,458,458,458,458,458,458,458,458,458,458,,458,458,,,458,458',
',758,,,758,,,758,758,,,758,,758,458,,458,758,458,458,458,458,458,458',
'458,758,458,,,,758,758,758,758,758,758,,,,758,758,,,,,,,758,,,758,758',
'758,,,758,758,700,700,700,700,700,700,,,,700,700,,,,700,,700,700,700',
'700,700,700,700,,,,,,700,700,700,700,700,700,700,,,700,,,,,,700,700',
',700,700,700,700,700,700,700,700,700,,700,700,700,,700,700,,700,700',
'700,457,457,457,457,457,457,457,457,457,457,457,,457,457,,,457,457,',
'700,,,700,,,700,700,,,700,,700,457,,457,700,457,457,457,457,457,457',
'457,700,457,,,,700,700,700,700,700,700,,,,700,700,,,,,,,700,,,700,700',
'700,,,700,700,803,803,803,803,803,803,,,,803,803,,,,803,,803,803,803',
'803,803,803,803,,,,,,803,803,803,803,803,803,803,,,803,,,,,,803,803',
',803,803,803,803,803,803,803,803,803,,803,803,803,,803,803,,803,803',
'803,468,468,468,468,468,468,468,,,468,468,,,,,,468,468,,803,,,803,,',
'803,803,,,803,,803,468,,468,803,468,468,468,468,468,468,468,803,468',
',,,803,803,803,803,803,803,,,,803,803,,,,,,,803,,,803,803,803,,,803',
'803,221,221,221,,221,,,,221,221,,,,221,,221,221,221,221,221,221,221',
',,,,,221,221,221,221,221,221,221,,,221,,,,,,,221,,,221,221,221,221,221',
'221,221,221,,221,221,221,,221,221,,221,221,221,469,,,,,,,,,,,,,,,,469',
'469,,221,,,221,,,221,221,,,221,,,469,,469,221,469,469,469,469,,,469',
'221,469,,,,221,221,221,221,221,221,,,,221,221,221,,,,,,221,,,221,221',
'221,,,221,221,739,739,739,,739,,,,739,739,,,,739,,739,739,739,739,739',
'739,739,,,,,,739,739,739,739,739,739,739,,,739,,,,,,,739,,,739,739,739',
'739,739,739,739,739,,739,739,739,,739,739,,739,739,739,466,,,,,,,,,',
',,,,,,466,466,,739,,,739,,,739,739,,,739,,,466,,466,739,466,466,466',
'466,,,,739,,,,,739,739,739,739,739,739,,,,739,739,,,,,,,739,,,739,739',
'739,,,739,739,745,745,745,,745,,,,745,745,,,,745,,745,745,745,745,745',
'745,745,,,,,,745,745,745,745,745,745,745,,,745,,,,,,,745,,,745,745,745',
'745,745,745,745,745,745,745,745,745,,745,745,,745,745,745,465,,,,,,',
',,,,,,,,,465,465,,745,,,745,,,745,745,,,745,,745,465,745,465,745,465',
'465,465,465,,,,745,,,,,745,745,745,745,745,745,,,,745,745,,,,,,,745',
',745,745,745,745,,,745,745,256,256,256,,256,,,,256,256,,,,256,,256,256',
'256,256,256,256,256,,,,,,256,256,256,256,256,256,256,,,256,,,,,,,256',
',,256,256,256,256,256,256,256,256,,256,256,256,,256,256,,256,256,256',
',,,,,,,,,,,,,,,,,,,256,,,256,,,256,256,,,256,,,,,,256,,,,,,,,256,,,',
',256,256,256,256,256,256,,,,256,256,,,,,,,256,,,256,256,256,,,256,256',
'767,767,767,,767,,,,767,767,,,,767,,767,767,767,767,767,767,767,,,,',
',767,767,767,767,767,767,767,,,767,,,,,,,767,,,767,767,767,767,767,767',
'767,767,,767,767,767,,767,767,,767,767,767,,,,,,,,,,,,,,,,,,,,767,,',
'767,,,767,767,,,767,,,,,,767,,,,,,,,767,,,,,767,767,767,767,767,767',
',,,767,767,,,,,,,767,,,767,767,767,,,767,767,769,769,769,,769,,,,769',
'769,,,,769,,769,769,769,769,769,769,769,,,,,,769,769,769,769,769,769',
'769,,,769,,,,,,,769,,,769,769,769,769,769,769,769,769,,769,769,769,',
'769,769,,769,769,769,,,,,,,,,,,,,,,,,,,,769,,,769,,,769,769,,,769,,',
',,,769,,,,,,,,769,,,,,769,769,769,769,769,769,,,,769,769,,,,,,,769,',
',769,769,769,,,769,769,257,257,257,,257,,,,257,257,,,,257,,257,257,257',
'257,257,257,257,,,,,,257,257,257,257,257,257,257,,,257,,,,,,,257,,,257',
'257,257,257,257,257,257,257,,257,257,257,,257,257,,257,257,257,,,,,',
',,,,,,,,,,,,,,257,,,257,,,257,257,,,257,,,,,,257,,,,,,,,257,,,,,257',
'257,257,257,257,257,,,,257,257,,,,,,,257,,,257,257,257,,,257,257,783',
'783,783,,783,,,,783,783,,,,783,,783,783,783,783,783,783,783,,,,,,783',
'783,783,783,783,783,783,,,783,,,,,,,783,,,783,783,783,783,783,783,783',
'783,,783,783,783,,783,783,,783,783,783,,,,,,,,,,,,,,,,,,,,783,,,783',
',,783,783,,,783,,,,,,783,,,,,,,,783,,,,,783,783,783,783,783,783,,,,783',
'783,,,,,,,783,,,783,783,783,,,783,783,784,784,784,,784,,,,784,784,,',
',784,,784,784,784,784,784,784,784,,,,,,784,784,784,784,784,784,784,',
',784,,,,,,,784,,,784,784,784,784,784,784,784,784,,784,784,784,,784,784',
',784,784,784,,,,,,,,,,,,,,,,,,,,784,,,784,,,784,784,,,784,,,,,,784,',
',,,,,,784,,,,,784,784,784,784,784,784,,,,784,784,,,,,,,784,,,784,784',
'784,,,784,784,785,785,785,,785,,,,785,785,,,,785,,785,785,785,785,785',
'785,785,,,,,,785,785,785,785,785,785,785,,,785,,,,,,,785,,,785,785,785',
'785,785,785,785,785,,785,785,785,,785,785,,785,785,785,,,,,,,,,,,,,',
',,,,,,785,,,785,,,785,785,,,785,,,,,,785,,,,,,,,785,,,,,785,785,785',
'785,785,785,,,,785,785,,,,,,,785,,,785,785,785,,,785,785,786,786,786',
',786,,,,786,786,,,,786,,786,786,786,786,786,786,786,,,,,,786,786,786',
'786,786,786,786,,,786,,,,,,,786,,,786,786,786,786,786,786,786,786,,786',
'786,786,,786,786,,786,786,786,,,,,,,,,,,,,,,,,,,,786,,,786,,,786,786',
',,786,,,,,,786,,,,,,,,786,,,,,786,786,786,786,786,786,,,,786,786,,,',
',,,786,,,786,786,786,,,786,786,788,788,788,,788,,,,788,788,,,,788,,788',
'788,788,788,788,788,788,,,,,,788,788,788,788,788,788,788,,,788,,,,,',
',788,,,788,788,788,788,788,788,788,788,,788,788,788,,788,788,,788,788',
'788,,,,,,,,,,,,,,,,,,,,788,,,788,,,788,788,,,788,,,,,,788,,,,,,,,788',
',,,,788,788,788,788,788,788,,,,788,788,,,,,,,788,,,788,788,788,,,788',
'788,258,258,258,,258,,,,258,258,,,,258,,258,258,258,258,258,258,258',
',,,,,258,258,258,258,258,258,258,,,258,,,,,,,258,,,258,258,258,258,258',
'258,258,258,,258,258,258,,258,258,,258,258,258,,,,,,,,,,,,,,,,,,,,258',
',,258,,,258,258,,,258,,,,,,258,,,,,,,,258,,,,,258,258,258,258,258,258',
',,,258,258,,,,,,,258,,,258,258,258,,,258,258,259,259,259,,259,,,,259',
'259,,,,259,,259,259,259,259,259,259,259,,,,,,259,259,259,259,259,259',
'259,,,259,,,,,,,259,,,259,259,259,259,259,259,259,259,,259,259,259,',
'259,259,,259,259,259,,,,,,,,,,,,,,,,,,,,259,,,259,,,259,259,,,259,,',
',,,259,,,,,,,,259,,,,,259,259,259,259,259,259,,,,259,259,,,,,,,259,',
',259,259,259,,,259,259,260,260,260,,260,,,,260,260,,,,260,,260,260,260',
'260,260,260,260,,,,,,260,260,260,260,260,260,260,,,260,,,,,,,260,,,260',
'260,260,260,260,260,260,260,,260,260,260,,260,260,,260,260,260,,,,,',
',,,,,,,,,,,,,,260,,,260,,,260,260,,,260,,,,,,260,,,,,,,,260,,,,,260',
'260,260,260,260,260,,,,260,260,,,,,,,260,,,260,260,260,,,260,260,267',
'267,267,,267,,,,267,267,,,,267,,267,267,267,267,267,267,267,,,,,,267',
'267,267,267,267,267,267,,,267,,,,,,,267,,,267,267,267,267,267,267,267',
'267,267,267,267,267,,267,267,,267,267,267,,,,,,,,,,,,,,,,,,,,267,,,267',
',,267,267,,,267,,267,,267,,267,,,,,,,,267,,,,,267,267,267,267,267,267',
',,,267,267,,,,,,,267,,267,267,267,267,,,267,267,273,273,273,,273,,,',
'273,273,,,,273,,273,273,273,273,273,273,273,,,,,,273,273,273,273,273',
'273,273,,,273,,,,,,,273,,,273,273,273,273,273,273,273,273,273,273,273',
'273,,273,273,,273,273,273,,,,,,,,,,,,,,,,,,,,273,,,273,,,273,273,,,273',
',273,,273,,273,,,,,,,,273,,,,,273,273,273,273,273,273,,,,273,273,,,',
',,,273,,273,273,273,273,,,273,273,276,276,276,,276,,,,276,276,,,,276',
',276,276,276,276,276,276,276,,,,,,276,276,276,276,276,276,276,,,276',
',,,,,,276,,,276,276,276,276,276,276,276,276,276,276,276,276,,276,276',
',276,276,276,,,,,,,,,,,,,,,,,,,,276,,,276,,,276,276,,,276,,276,,276',
',276,,,,,,,,276,,,,,276,276,276,276,276,276,,,,276,276,276,,,,,,276',
',276,276,276,276,,,276,276,800,800,800,,800,,,,800,800,,,,800,,800,800',
'800,800,800,800,800,,,,,,800,800,800,800,800,800,800,,,800,,,,,,,800',
',,800,800,800,800,800,800,800,800,,800,800,800,,800,800,,,,800,,,,,',
',,,,,,,,,,,,,,800,,,800,,,800,800,,,800,,,,,,,,,,,,,,,,,,,800,800,800',
'800,800,800,,,,800,800,,,,,,,800,,,800,800,800,,,800,800,32,32,32,,32',
',,,32,32,,,,32,,32,32,32,32,32,32,32,,,,,,32,32,32,32,32,32,32,,,32',
',,,,,,32,,,32,32,32,32,32,32,32,32,32,32,32,32,,32,32,,32,32,32,,,,',
',,,,,,,,,,,,,,,32,,,32,,,32,32,,,32,,32,,32,,32,,,,,,,,32,,,,,32,32',
'32,32,32,32,,,,32,32,,,,,,,32,,32,32,32,32,,,32,32,33,33,33,,33,,,,33',
'33,,,,33,,33,33,33,33,33,33,33,,,,,,33,33,33,33,33,33,33,,,33,,,,,,',
'33,,,33,33,33,33,33,33,33,33,33,33,33,33,,33,33,,33,33,33,,,,,,,,,,',
',,,,,,,,,33,,,33,,,33,33,,,33,,33,,33,,33,,,,,,,,33,,,,,33,33,33,33',
'33,33,,,,33,33,,,,,,,33,,33,33,33,33,,,33,33,283,283,283,,283,,,,283',
'283,,,,283,,283,283,283,283,283,283,283,,,,,,283,283,283,283,283,283',
'283,,,283,,,,,,,283,,,283,283,283,283,283,283,283,283,,283,283,283,',
'283,283,,283,283,283,,,,,,,,,,,,,,,,,,,,283,,,283,,,283,283,,,283,,',
',,,283,,,,,,,,283,,,,,283,283,283,283,283,283,,,,283,283,,,,,,,283,',
',283,283,283,,,283,283,34,34,34,,34,,,,34,34,,,,34,,34,34,34,34,34,34',
'34,,,,,,34,34,34,34,34,34,34,,,34,,,,,,,34,,,34,34,34,34,34,34,34,34',
'34,34,34,34,,34,34,,34,34,34,,,,,,,,,,,,,,,,,,,,34,,,34,,,34,34,,,34',
',34,,34,,34,,,,,,,,34,,,,,34,34,34,34,34,34,,,,34,34,,,,,,,34,,34,34',
'34,34,,,34,34,285,285,285,,285,,,,285,285,,,,285,,285,285,285,285,285',
'285,285,,,,,,285,285,285,285,285,285,285,,,285,,,,,,,285,,,285,285,285',
'285,285,285,285,285,,285,285,285,,285,285,,285,285,285,,,,,,,,,,,,,',
',,,,,,285,,,285,,,285,285,,,285,,,,,,285,,,,,,,,285,,,,,285,285,285',
'285,285,285,,,,285,285,,,,,,,285,,,285,285,285,,,285,285,287,287,287',
',287,,,,287,287,,,,287,,287,287,287,287,287,287,287,,,,,,287,287,287',
'287,287,287,287,,,287,,,,,,,287,,,287,287,287,287,287,287,287,287,,287',
'287,287,,287,287,,287,287,287,,,,,,,,,,,,,,,,,,,,287,,,287,,,287,287',
',,287,,,,,,287,,,,,,,,287,,,,,287,287,287,287,287,287,,,,287,287,,,',
',,,287,,,287,287,287,,,287,287,288,288,288,,288,,,,288,288,,,,288,,288',
'288,288,288,288,288,288,,,,,,288,288,288,288,288,288,288,,,288,,,,,',
',288,,,288,288,288,288,288,288,288,288,,288,288,288,,288,288,,288,288',
'288,,,,,,,,,,,,,,,,,,,,288,,,288,,,288,288,,,288,,,,,,288,,,,,,,,288',
',,,,288,288,288,288,288,288,,,,288,288,,,,,,,288,,,288,288,288,,,288',
'288,294,294,294,294,294,,,,294,294,,,,294,,294,294,294,294,294,294,294',
',,,,,294,294,294,294,294,294,294,,,294,,,,,,294,294,,294,294,294,294',
'294,294,294,294,294,,294,294,294,,294,294,,294,294,294,,,,,,,,,,,,,',
',,,,,,294,,,294,,,294,294,,,294,,294,,,,294,,,,,,,,294,,,,,294,294,294',
'294,294,294,,,,294,294,,,,,,,294,,,294,294,294,,,294,294,37,37,37,,37',
',,,37,37,,,,37,,37,37,37,37,37,37,37,,,,,,37,37,37,37,37,37,37,,,37',
',,,,,,37,,,37,37,37,37,37,37,37,37,,37,37,37,,37,37,,,,37,,,,,,,,,,',
',,,,,,,,,37,,,37,,,37,37,,,37,,37,,,,,,,,,,,,,,,,,37,37,37,37,37,37',
',,,37,37,,,,,,,37,,,37,37,37,,,37,37,38,38,38,,38,,,,38,38,,,,38,,38',
'38,38,38,38,38,38,,,,,,38,38,38,38,38,38,38,,,38,,,,,,,38,,,38,38,38',
'38,38,38,38,38,,38,38,38,,38,38,,,,38,,,,,,,,,,,,,,,,,,,,38,,,38,,,38',
'38,,,38,,,,,,,,,,,,,,,,,,,38,38,38,38,38,38,,,,38,38,,,,38,,,38,,,38',
'38,38,,,38,38,846,846,846,,846,,,,846,846,,,,846,,846,846,846,846,846',
'846,846,,,,,,846,846,846,846,846,846,846,,,846,,,,,,,846,,,846,846,846',
'846,846,846,846,846,,846,846,846,,846,846,,846,846,846,,,,,,,,,,,,,',
',,,,,,846,,,846,,,846,846,,,846,,,,,,846,,,,,,,,846,,,,,846,846,846',
'846,846,846,,,,846,846,,,,,,,846,,,846,846,846,,,846,846,300,300,300',
',300,,,,300,300,,,,300,,300,300,300,300,300,300,300,,,,,,300,300,300',
'300,300,300,300,,,300,,,,,,,300,,,300,300,300,300,300,300,300,300,,300',
'300,300,,300,300,,,,300,,,,,,,,,,,,,,,,,,,,300,,,300,,,300,300,,,300',
',,,,,,,,,,,,,,,,,,300,300,300,300,300,300,,,,300,300,,,,300,,,300,,',
'300,300,300,,,300,300,859,859,859,,859,,,,859,859,,,,859,,859,859,859',
'859,859,859,859,,,,,,859,859,859,859,859,859,859,,,859,,,,,,,859,,,859',
'859,859,859,859,859,859,859,,859,859,859,,859,859,,859,859,859,,,,,',
',,,,,,,,,,,,,,859,,,859,,,859,859,,,859,,,,,,859,,,,,,,,859,,,,,859',
'859,859,859,859,859,,,,859,859,,,,,,,859,,,859,859,859,,,859,859,877',
'877,877,,877,,,,877,877,,,,877,,877,877,877,877,877,877,877,,,,,,877',
'877,877,877,877,877,877,,,877,,,,,,,877,,,877,877,877,877,877,877,877',
'877,877,877,877,877,,877,877,,877,877,877,,,,,,,,,,,,,,,,,,,,877,,,877',
',,877,877,,,877,,,,877,,877,,,,,,,,877,,,,,877,877,877,877,877,877,',
',,877,877,,,,,,,877,,877,877,877,877,,,877,877,878,878,878,,878,,,,878',
'878,,,,878,,878,878,878,878,878,878,878,,,,,,878,878,878,878,878,878',
'878,,,878,,,,,,,878,,,878,878,878,878,878,878,878,878,,878,878,878,',
'878,878,,878,878,878,,,,,,,,,,,,,,,,,,,,878,,,878,,,878,878,,,878,,',
',,,878,,,,,,,,878,,,,,878,878,878,878,878,878,,,,878,878,,,,,,,878,',
',878,878,878,,,878,878,893,893,893,,893,,,,893,893,,,,893,,893,893,893',
'893,893,893,893,,,,,,893,893,893,893,893,893,893,,,893,,,,,,,893,,,893',
'893,893,893,893,893,893,893,,893,893,893,,893,893,,,,893,,,,,,,,,,,',
',,,,,,,,893,,,893,,,893,893,,,893,,,,,,,,,,,,,,,,,,,893,893,893,893',
'893,893,,,,893,893,,,,,,,893,,,893,893,893,,,893,893,905,905,905,,905',
',,,905,905,,,,905,,905,905,905,905,905,905,905,,,,,,905,905,905,905',
'905,905,905,,,905,,,,,,,905,,,905,905,905,905,905,905,905,905,,905,905',
'905,,905,905,,,,905,,,,,,,,,,,,,,,,,,,,905,,,905,,,905,905,,,905,,,',
',,,,,,,,,,,,,,,905,905,905,905,905,905,,,,905,905,,,,,,,905,,,905,905',
'905,,,905,905,45,45,45,,45,,,,45,45,,,,45,,45,45,45,45,45,45,45,,,,',
',45,45,45,45,45,45,45,,,45,,,,,,,45,,,45,45,45,45,45,45,45,45,,45,45',
'45,,45,45,,45,45,45,,,,,,,,,,,,,,,,,,,,45,,,45,,,45,45,,,45,,,,,,45',
',,,,,,,45,,,,,45,45,45,45,45,45,,,,45,45,,,,,,,45,,,45,45,45,,,45,45',
'317,317,317,,317,,,,317,317,,,,317,,317,317,317,317,317,317,317,,,,',
',317,317,317,317,317,317,317,,,317,,,,,,,317,,,317,317,317,317,317,317',
'317,317,,317,317,317,,317,317,,,,317,,,,,,,,,,,,,,,,,,,,317,,,317,,',
'317,317,,,317,,,,,,,,,,,,,,,,,,,317,317,317,317,317,317,,,,317,317,',
',,,,,317,,,317,317,317,,,317,317,930,930,930,,930,,,,930,930,,,,930',
',930,930,930,930,930,930,930,,,,,,930,930,930,930,930,930,930,,,930',
',,,,,,930,,,930,930,930,930,930,930,930,930,,930,930,930,,930,930,,930',
'930,930,,,,,,,,,,,,,,,,,,,,930,,,930,,,930,930,,,930,,930,,,,930,,,',
',,,,930,,,,,930,930,930,930,930,930,,,,930,930,,,,,,,930,,,930,930,930',
',,930,930,46,46,46,,46,,,,46,46,,,,46,,46,46,46,46,46,46,46,,,,,,46',
'46,46,46,46,46,46,,,46,,,,,,,46,,,46,46,46,46,46,46,46,46,,46,46,46',
',46,46,,46,46,46,,,,,,,,,,,,,,,,,,,,46,,,46,,,46,46,,,46,,,,,,46,,,',
',,,,46,,,,,46,46,46,46,46,46,,,,46,46,,,,,,,46,,,46,46,46,,,46,46,47',
'47,47,,47,,,,47,47,,,,47,,47,47,47,47,47,47,47,,,,,,47,47,47,47,47,47',
'47,,,47,,,,,,,47,,,47,47,47,47,47,47,47,47,,47,47,47,,47,47,,47,47,47',
',,,,,,,,,,,,,,,,,,,47,,,47,,,47,47,,,47,,,,,,47,,,,,,,,47,,,,,47,47',
'47,47,47,47,,,,47,47,,,,,,,47,,,47,47,47,,,47,47,325,325,325,,325,,',
',325,325,,,,325,,325,325,325,325,325,325,325,,,,,,325,325,325,325,325',
'325,325,,,325,,,,,,,325,,,325,325,325,325,325,325,325,325,,325,325,325',
',325,325,,325,325,325,,,,,,,,,,,,,,,,,,,,325,,,325,325,,325,325,,,325',
',,,,,325,,,,,,,,325,,,,,325,325,325,325,325,325,,,,325,325,,,,,,,325',
',,325,325,325,,,325,325,334,334,334,,334,,,,334,334,,,,334,,334,334',
'334,334,334,334,334,,,,,,334,334,334,334,334,334,334,,,334,,,,,,,334',
',,334,334,334,334,334,334,334,334,334,334,334,334,,334,334,,334,334',
'334,,,,,,,,,,,,,,,,,,,,334,,,334,,,334,334,,,334,,,,,,334,,,,,,,,334',
',,,,334,334,334,334,334,334,,,,334,334,,,,,,,334,,334,334,334,334,,',
'334,334,341,341,341,,341,,,,341,341,,,,341,,341,341,341,341,341,341',
'341,,,,,,341,341,341,341,341,341,341,,,341,,,,,,,341,,,341,341,341,341',
'341,341,341,341,,341,341,341,,341,341,,341,341,341,,,,,,,,,,,,,,,,,',
',,341,,,341,,,341,341,,,341,,,,,,341,,,,,,,,341,,,,,341,341,341,341',
'341,341,,,,341,341,,,,,,,341,,,341,341,341,,,341,341,342,342,342,,342',
',,,342,342,,,,342,,342,342,342,342,342,342,342,,,,,,342,342,342,342',
'342,342,342,,,342,,,,,,,342,,,342,342,342,342,342,342,342,342,,342,342',
'342,,342,342,,342,342,342,,,,,,,,,,,,,,,,,,,,342,,,342,,,342,342,,,342',
',,,,,342,,,,,,,,342,,,,,342,342,342,342,342,342,,,,342,342,,,,,,,342',
',,342,342,342,,,342,342,1005,1005,1005,,1005,,,,1005,1005,,,,1005,,1005',
'1005,1005,1005,1005,1005,1005,,,,,,1005,1005,1005,1005,1005,1005,1005',
',,1005,,,,,,,1005,,,1005,1005,1005,1005,1005,1005,1005,1005,1005,1005',
'1005,1005,,1005,1005,,1005,1005,1005,,,,,,,,,,,,,,,,,,,,1005,,,1005',
',,1005,1005,,,1005,,1005,,1005,,1005,,,,,,,,1005,,,,,1005,1005,1005',
'1005,1005,1005,,,,1005,1005,,,,,,,1005,,1005,1005,1005,1005,,,1005,1005',
'61,61,61,,61,,,,61,61,,,,61,,61,61,61,61,61,61,61,,,,,,61,61,61,61,61',
'61,61,,,61,,,,,,,61,,,61,61,61,61,61,61,61,61,,61,61,61,,61,61,,61,61',
'61,,,,,,,,,,,,,,,,,,,,61,,,61,,,61,61,,,61,,,,,,61,,,,,,,,61,,,,,61',
'61,61,61,61,61,,,,61,61,61,,,,,,61,,,61,61,61,,,61,61,62,62,62,,62,',
',,62,62,,,,62,,62,62,62,62,62,62,62,,,,,,62,62,62,62,62,62,62,,,62,',
',,,,,62,,,62,62,62,62,62,62,62,62,62,62,62,62,,62,62,,62,62,62,,,,,',
',,,,,,,,,,,,,,62,,,62,,,62,62,,,62,,62,,,,62,,,,,,,,62,,,,,62,62,62',
'62,62,62,,,,62,62,,,,,,,62,,62,62,62,62,,,62,62,354,354,354,,354,,,',
'354,354,,,,354,,354,354,354,354,354,354,354,,,,,,354,354,354,354,354',
'354,354,,,354,,,,,,,354,,,354,354,354,354,354,354,354,354,,354,354,354',
',354,354,,,,354,,,,,,,,,,,,,,,,,,,,354,,,354,,,354,354,,,354,,,,,,,',
',,,,,,,,,,,354,354,354,354,354,354,,,,354,354,,,,,,,354,,,354,354,354',
',,354,354,356,356,356,,356,,,,356,356,,,,356,,356,356,356,356,356,356',
'356,,,,,,356,356,356,356,356,356,356,,,356,,,,,,,356,,,356,356,356,356',
'356,356,356,356,,356,356,356,,356,356,,,,356,,,,,,,,,,,,,,,,,,,,356',
',,356,,,356,356,,,356,,,,,,,,,,,,,,,,,,,356,356,356,356,356,356,,,,356',
'356,,,,,,,356,,,356,356,356,,,356,356,66,66,66,,66,,,,66,66,,,,66,,66',
'66,66,66,66,66,66,,,,,,66,66,66,66,66,66,66,,,66,,,,,,,66,,,66,66,66',
'66,66,66,66,66,,66,66,66,,66,66,,66,66,66,,,,,,,,,,,,,,,,,,,,66,,,66',
',,66,66,,,66,,,,,,66,,,,,,,,66,,,,,66,66,66,66,66,66,,,,66,66,,,,,,',
'66,,,66,66,66,,,66,66,67,67,67,,67,,,,67,67,,,,67,,67,67,67,67,67,67',
'67,,,,,,67,67,67,67,67,67,67,,,67,,,,,,,67,,,67,67,67,67,67,67,67,67',
',67,67,67,,67,67,,67,67,67,,,,,,,,,,,,,,,,,,,,67,,,67,,,67,67,,,67,',
',,,,67,,,,,,,,67,,,,,67,67,67,67,67,67,,,,67,67,,,,,,,67,,,67,67,67',
',,67,67,70,70,70,,70,,,,70,70,,,,70,,70,70,70,70,70,70,70,,,,,,70,70',
'70,70,70,70,70,,,70,,,,,,,70,,,70,70,70,70,70,70,70,70,,70,70,70,,70',
'70,,70,70,70,,,,,,,,,,,,,,,,,,,,70,,,70,,,70,70,,,70,,,,,,70,,,,,,,',
'70,,,,,70,70,70,70,70,70,,,,70,70,70,,,,,70,70,,,70,70,70,,,70,70,71',
'71,71,,71,,,,71,71,,,,71,,71,71,71,71,71,71,71,,,,,,71,71,71,71,71,71',
'71,,,71,,,,,,,71,,,71,71,71,71,71,71,71,71,,71,71,71,,71,71,,,,71,,',
',,,,,,,,,,,,,,,,,71,,,71,,,71,71,,,71,,71,,,,,,,,,,,,,,,,,71,71,71,71',
'71,71,,,,71,71,,,,,,,71,,,71,71,71,,,71,71,8,8,8,8,8,,,,8,8,,,,8,,8',
'8,8,8,8,8,8,,,,,,8,8,8,8,8,8,8,,,8,,,,,,8,8,8,8,8,8,8,8,8,8,8,8,,8,8',
'8,,8,8,,8,8,8,,,,,,,,,,,,,,,,,,,,8,,,8,,,8,8,,,8,,8,,,,8,,,,,,,,8,,',
',,8,8,8,8,8,8,,,,8,8,,,,,,,8,,,8,8,8,,,8,8,414,414,414,,414,,,,414,414',
',,,414,,414,414,414,414,414,414,414,,,,,,414,414,414,414,414,414,414',
',,414,,,,,,,414,,,414,414,414,414,414,414,414,414,,414,414,414,,414',
'414,,414,414,414,,,,,,,,,,,,,,,,,,,,414,,,414,,,414,414,,,414,,,,,,414',
',,,,,,,414,,,,,414,414,414,414,414,414,,,,414,414,,,,,,,414,,,414,414',
'414,,,414,414,452,452,452,,452,,,,452,452,,,,452,,452,452,452,452,452',
'452,452,,,,,,452,452,452,452,452,452,452,,,452,,,,,,,452,,,452,452,452',
'452,452,452,452,452,452,452,452,452,,452,452,,452,452,452,,,,,,,,,,',
',,,,,,,,,452,,,452,,,452,452,,,452,,452,,452,,452,,,,,,,,452,,,,,452',
'452,452,452,452,452,,,,452,452,,,,,,,452,,452,452,452,452,,,452,452',
'454,454,454,,454,,,,454,454,,,,454,,454,454,454,454,454,454,454,,,,',
',454,454,454,454,454,454,454,,,454,,,,,,,454,,,454,454,454,454,454,454',
'454,454,,454,454,454,,454,454,,454,454,454,,,,,,,,,,,,,,,,,,,,454,,',
'454,,,454,454,,,454,,,,,,454,,,,,,,,454,,,,,454,454,454,454,454,454',
',,,454,454,,,,,,,454,,,454,454,454,,,454,454,455,455,455,,455,,,,455',
'455,,,,455,,455,455,455,455,455,455,455,,,,,,455,455,455,455,455,455',
'455,,,455,,,,,,,455,,,455,455,455,455,455,455,455,455,,455,455,455,',
'455,455,,455,455,455,,,,,,,,,,,,,,,,,,,,455,,,455,,,455,455,,,455,,',
',,,455,,,,,,,,455,,,,,455,455,455,455,455,455,,,,455,455,,,,,,,455,',
',455,455,455,,,455,455,456,456,456,,456,,,,456,456,,,,456,,456,456,456',
'456,456,456,456,,,,,,456,456,456,456,456,456,456,,,456,,,,,,,456,,,456',
'456,456,456,456,456,456,456,,456,456,456,,456,456,,456,456,456,,,,,',
',,,,,,,,,,,,,,456,,,456,,,456,456,,,456,,,,,,456,,,,,,,,456,,,,,456',
'456,456,456,456,456,,,,456,456,,,,,,,456,,,456,456,456,,,456,456,114',
'114,114,114,114,,,,114,114,,,,114,,114,114,114,114,114,114,114,,,,,',
'114,114,114,114,114,114,114,,,114,,,,,,114,114,114,114,114,114,114,114',
'114,114,114,114,,114,114,114,,114,114,,114,114,114,,,,,,,,,,,,,,,,,',
',,114,,,114,,,114,114,,,114,,114,,,,114,,,,,,,,114,,,,,114,114,114,114',
'114,114,,,,114,114,,,,,,114,114,,,114,114,114,,,114,114,119,119,119',
',119,,,,119,119,,,,119,,119,119,119,119,119,119,119,,,,,,119,119,119',
'119,119,119,119,,,119,,,,,,,119,,,119,119,119,119,119,119,119,119,,119',
'119,119,,119,119,,119,119,119,,,,,,,,,,,,,,,,,,,,119,,,119,,,119,119',
',,119,,,,,,119,,,,,,,,119,,,,,119,119,119,119,119,119,,,,119,119,,,',
',,,119,,,119,119,119,,,119,119,120,120,120,,120,,,,120,120,,,,120,,120',
'120,120,120,120,120,120,,,,,,120,120,120,120,120,120,120,,,120,,,,,',
',120,,,120,120,120,120,120,120,120,120,,120,120,120,,120,120,,120,120',
'120,,,,,,,,,,,,,,,,,,,,120,,,120,,,120,120,,,120,,,,,,120,,,,,,,,120',
',,,,120,120,120,120,120,120,,,,120,120,,,,,,,120,,,120,120,120,,,120',
'120,121,121,121,,121,,,,121,121,,,,121,,121,121,121,121,121,121,121',
',,,,,121,121,121,121,121,121,121,,,121,,,,,,,121,,,121,121,121,121,121',
'121,121,121,,121,121,121,,121,121,,121,121,121,,,,,,,,,,,,,,,,,,,,121',
',,121,,,121,121,,,121,,,,,,121,,,,,,,,121,,,,,121,121,121,121,121,121',
',,,121,121,,,,,,,121,,,121,121,121,,,121,121,497,497,497,,497,,,,497',
'497,,,,497,,497,497,497,497,497,497,497,,,,,,497,497,497,497,497,497',
'497,,,497,,,,,,,497,,,497,497,497,497,497,497,497,497,497,497,497,497',
',497,497,,497,497,497,,,,,,,,,,,,,,,,,,,,497,,,497,,,497,497,,,497,',
'497,,497,,497,,,,,,,,497,,,,,497,497,497,497,497,497,,,,497,497,,,,',
',,497,,497,497,497,497,,,497,497,500,500,500,,500,,,,500,500,,,,500',
',500,500,500,500,500,500,500,,,,,,500,500,500,500,500,500,500,,,500',
',,,,,,500,,,500,500,500,500,500,500,500,500,500,500,500,500,,500,500',
',500,500,500,,,,,,,,,,,,,,,,,,,,500,,,500,,,500,500,,,500,,,,500,,500',
',,,,,,,500,,,,,500,500,500,500,500,500,,,,500,500,,,,,,,500,,500,500',
'500,500,,,500,500,502,502,502,,502,,,,502,502,,,,502,,502,502,502,502',
'502,502,502,,,,,,502,502,502,502,502,502,502,,,502,,,,,,,502,,,502,502',
'502,502,502,502,502,502,,502,502,502,,502,502,,502,502,502,,,,,,,,,',
',,,,,,,,,,502,,,502,,,502,502,,,502,,,,,,502,,,,,,,,502,,,,,502,502',
'502,502,502,502,,,,502,502,,,,,,,502,,,502,502,502,,,502,502,507,507',
'507,507,507,,,,507,507,,,,507,,507,507,507,507,507,507,507,,,,,,507',
'507,507,507,507,507,507,,,507,,,,,,507,507,,507,507,507,507,507,507',
'507,507,507,,507,507,507,,507,507,,507,507,507,,,,,,,,,,,,,,,,,,,,507',
',,507,,,507,507,,,507,,507,,,,507,,,,,,,,507,,,,,507,507,507,507,507',
'507,,,,507,507,,,,,,507,507,,,507,507,507,,,507,507,122,122,122,,122',
',,,122,122,,,,122,,122,122,122,122,122,122,122,,,,,,122,122,122,122',
'122,122,122,,,122,,,,,,,122,,,122,122,122,122,122,122,122,122,,122,122',
'122,,122,122,,122,122,122,,,,,,,,,,,,,,,,,,,,122,,,122,,,122,122,,,122',
',,,,,122,,,,,,,,122,,,,,122,122,122,122,122,122,,,,122,122,,,,,,,122',
',,122,122,122,,,122,122,123,123,123,123,123,,,,123,123,,,,123,,123,123',
'123,123,123,123,123,,,,,,123,123,123,123,123,123,123,,,123,,,,,,123',
'123,,123,123,123,123,123,123,123,123,123,,123,123,123,,123,123,,123',
'123,123,,,,,,,,,,,,,,,,,,,,123,,,123,,,123,123,,,123,,123,,,,123,,,',
',,,,123,,,,,123,123,123,123,123,123,,,,123,123,,,,,,,123,,,123,123,123',
',,123,123,514,514,514,,514,,,,514,514,,,,514,,514,514,514,514,514,514',
'514,,,,,,514,514,514,514,514,514,514,,,514,,,,,,,514,,,514,514,514,514',
'514,514,514,514,,514,514,514,,514,514,,,,514,,,,,,,,,,,,,,,,,,,,514',
',,514,,,514,514,,,514,,,,,,,,,,,,,,,,,,,514,514,514,514,514,514,,,,514',
'514,,,,,,,514,,,514,514,514,,,514,514,516,516,516,,516,,,,516,516,,',
',516,,516,516,516,516,516,516,516,,,,,,516,516,516,516,516,516,516,',
',516,,,,,,,516,,,516,516,516,516,516,516,516,516,516,516,516,516,,516',
'516,,516,516,516,,,,,,,,,,,,,,,,,,,,516,,,516,,,516,516,,,516,,516,',
'516,,516,,,,,,,,516,,,,,516,516,516,516,516,516,,,,516,516,,,,,,,516',
',516,516,516,516,,,516,516,23,23,23,,23,,,,23,23,,,,23,,23,23,23,23',
'23,23,23,,,,,,23,23,23,23,23,23,23,,,23,,,,,,,23,,,23,23,23,23,23,23',
'23,23,,23,23,23,,23,23,,23,23,23,,,,,,,,,,,,,,,,,,,,23,,,23,,,23,23',
',,23,,,,,,23,,,,,,,,23,,,,,23,23,23,23,23,23,,,,23,23,,,,,,,23,,,23',
'23,23,,,23,23,522,522,522,,522,,,,522,522,,,,522,,522,522,522,522,522',
'522,522,,,,,,522,522,522,522,522,522,522,,,522,,,,,,,522,,,522,522,522',
'522,522,522,522,522,,522,522,522,,522,522,,,,522,,,,,,,,,,,,,,,,,,,',
'522,,,522,,,522,522,,,522,,,,,,,,,,,,,,,,,,,522,522,522,522,522,522',
',,,522,522,,,,,,,522,,,522,522,522,,,522,522,525,525,525,,525,,,,525',
'525,,,,525,,525,525,525,525,525,525,525,,,,,,525,525,525,525,525,525',
'525,,,525,,,,,,,525,,,525,525,525,525,525,525,525,525,,525,525,525,',
'525,525,,525,525,525,,,,,,,,,,,,,,,,,,,,525,,,525,,,525,525,,,525,,',
',,,525,,,,,,,,525,,,,,525,525,525,525,525,525,,,,525,525,,,,,,,525,',
',525,525,525,,,525,525,526,526,526,,526,,,,526,526,,,,526,,526,526,526',
'526,526,526,526,,,,,,526,526,526,526,526,526,526,,,526,,,,,,,526,,,526',
'526,526,526,526,526,526,526,,526,526,526,,526,526,,526,526,526,,,,,',
',,,,,,,,,,,,,,526,,,526,,,526,526,,,526,,,,,,526,,,,,,,,526,,,,,526',
'526,526,526,526,526,,,,526,526,,,,,,,526,,,526,526,526,,,526,526,530',
'530,530,,530,,,,530,530,,,,530,,530,530,530,530,530,530,530,,,,,,530',
'530,530,530,530,530,530,,,530,,,,,,,530,,,530,530,530,530,530,530,530',
'530,,530,530,530,,530,530,,530,530,530,,,,,,,,,,,,,,,,,,,,530,,,530',
',,530,530,,,530,,,,,,530,,,,,,,,530,,,,,530,530,530,530,530,530,,,,530',
'530,,,,,,,530,,,530,530,530,,,530,530,210,210,210,,210,,,,210,210,,',
',210,,210,210,210,210,210,210,210,,,,,,210,210,210,210,210,210,210,',
',210,,,,,,,210,,,210,210,210,210,210,210,210,210,,210,210,210,,210,210',
',210,210,210,,,,,,,,,,,,,,,,,,,,210,,,210,,,210,210,,,210,,210,,,,210',
',,,,,,,210,,,,,210,210,210,210,210,210,,,,210,210,,,,,,,210,,,210,210',
'210,,,210,210,211,211,211,,211,,,,211,211,,,,211,,211,211,211,211,211',
'211,211,,,,,,211,211,211,211,211,211,211,,,211,,,,,,,211,,,211,211,211',
'211,211,211,211,211,,211,211,211,,211,211,,211,211,211,,,,,,,,,,,,,',
',,,,,,211,,,211,,,211,211,,,211,,,,,,211,,,,,,,,211,,,,,211,211,211',
'211,211,211,,,,211,211,,,,,,,211,,,211,211,211,,,211,211,212,212,212',
',212,,,,212,212,,,,212,,212,212,212,212,212,212,212,,,,,,212,212,212',
'212,212,212,212,,,212,,,,,,,212,,,212,212,212,212,212,212,212,212,212',
'212,212,212,,212,212,,212,212,212,,,,,,,,,,,,,,,,,,,,212,,,212,,,212',
'212,,,212,,212,,212,,212,,,,,,,,212,,,,,212,212,212,212,212,212,,,,212',
'212,,,,,,,212,,212,212,212,212,,,212,212,536,536,536,,536,,,,536,536',
',,,536,,536,536,536,536,536,536,536,,,,,,536,536,536,536,536,536,536',
',,536,,,,,,,536,,,536,536,536,536,536,536,536,536,536,536,536,536,,536',
'536,,536,536,536,,,,,,,,,,,,,,,,,,,,536,,,536,,,536,536,,,536,,536,',
',,536,,,,,,,,536,,,,,536,536,536,536,536,536,,,,536,536,,,,,,,536,,536',
'536,536,536,,,536,536,539,539,539,,539,,,,539,539,,,,539,,539,539,539',
'539,539,539,539,,,,,,539,539,539,539,539,539,539,,,539,,,,,,,539,,,539',
'539,539,539,539,539,539,539,539,539,539,539,,539,539,,539,539,539,,',
',,,,,,,,,,,,,,,,,539,,,539,,,539,539,,,539,,,,,,539,,,,,,,,539,,,,,539',
'539,539,539,539,539,,,,539,539,,,,,,,539,,539,539,539,539,,,539,539',
'216,216,216,,216,,,,216,216,,,,216,,216,216,216,216,216,216,216,,,,',
',216,216,216,216,216,216,216,,,216,,,,,,,216,,,216,216,216,216,216,216',
'216,216,,216,216,216,,216,216,,216,216,216,,,,,,,,,,,,,,,,,,,,216,,',
'216,,,216,216,,,216,,,,,,216,,,,,,,,216,,,,,216,216,216,216,216,216',
',,,216,216,,,,,,,216,,,216,216,216,,,216,216,217,217,217,,217,,,,217',
'217,,,,217,,217,217,217,217,217,217,217,,,,,,217,217,217,217,217,217',
'217,,,217,,,,,,,217,,,217,217,217,217,217,217,217,217,,217,217,217,',
'217,217,,217,217,217,,,,,,,,,,,,,,,,,,,,217,,,217,,,217,217,,,217,,217',
',,,217,,,,,,,,217,,,,,217,217,217,217,217,217,,,,217,217,,,,,,,217,',
',217,217,217,,,217,217,218,218,218,,218,,,,218,218,,,,218,,218,218,218',
'218,218,218,218,,,,,,218,218,218,218,218,218,218,,,218,,,,,,,218,,,218',
'218,218,218,218,218,218,218,,218,218,218,,218,218,,218,218,218,,,,,',
',,,,,,,,,,,,,,218,,,218,,,218,218,,,218,,,,,,218,,,,,,,,218,,,,,218',
'218,218,218,218,218,,,,218,218,,,,,,,218,,,218,218,218,,,218,218,219',
'219,219,,219,,,,219,219,,,,219,,219,219,219,219,219,219,219,,,,,,219',
'219,219,219,219,219,219,,,219,,,,,,,219,,,219,219,219,219,219,219,219',
'219,,219,219,219,,219,219,,219,219,219,,,,,,,,,,,,,,,,,,,,219,,,219',
',,219,219,,,219,,,,,,219,,,,,,,,219,,,,,219,219,219,219,219,219,,,,219',
'219,,,,,,,219,,,219,219,219,,,219,219,220,220,220,,220,,,,220,220,,',
',220,,220,220,220,220,220,220,220,,,,,,220,220,220,220,220,220,220,',
',220,,,,,,,220,,,220,220,220,220,220,220,220,220,,220,220,220,,220,220',
',220,220,220,,,,,,,,,,,,,,,,,,,,220,,,220,,,220,220,,,220,,,,,,220,',
',,,,,,220,,,,,220,220,220,220,220,220,,,,220,220,,,,,,,220,,,220,220',
'220,,,220,220,565,565,565,,565,,,,565,565,,,,565,,565,565,565,565,565',
'565,565,,,,,,565,565,565,565,565,565,565,,,565,,,,,,,565,,,565,565,565',
'565,565,565,565,565,,565,565,565,,565,565,,565,565,565,,,,,,,,,,,,,',
',,,,,,565,,,565,,,565,565,,,565,,,,,,565,,,,,,,,565,,,,,565,565,565',
'565,565,565,,,,565,565,,,,,,,565,,,565,565,565,,,565,565,586,586,586',
',586,,,,586,586,,,,586,,586,586,586,586,586,586,586,,,,,,586,586,586',
'586,586,586,586,,,586,,,,,,,586,,,586,586,586,586,586,586,586,586,586',
'586,586,586,,586,586,,586,586,586,,,,,,,,,,,,,,,,,,,,586,,,586,,,586',
'586,,,586,,586,,586,,586,,,,,,,,586,,,,,586,586,586,586,586,586,,,,586',
'586,,,,,,,586,,586,586,586,586,,,586,586,598,598,598,,598,,,,598,598',
',,,598,,598,598,598,598,598,598,598,,,,,,598,598,598,598,598,598,598',
',,598,,,,,,,598,,,598,598,598,598,598,598,598,598,,598,598,598,,598',
'598,,598,598,598,,,,,,,,,,,,,,,,,,,,598,,,598,,,598,598,,,598,,,,,,598',
',,,,,,,598,,,,,598,598,598,598,598,598,,,,598,598,,,,,,,598,,,598,598',
'598,,,598,598,602,602,602,,602,,,,602,602,,,,602,,602,602,602,602,602',
'602,602,,,,,,602,602,602,602,602,602,602,,,602,,,,,,,602,,,602,602,602',
'602,602,602,602,602,,602,602,602,,602,602,,602,602,602,,,,,,,,,,,,,',
',,,,,,602,,,602,,,602,602,,,602,,,,,,602,,,,,,,,602,,,,,602,602,602',
'602,602,602,,,,602,602,,,,,,,602,,,602,602,602,,,602,602,232,232,232',
',232,,,,232,232,,,,232,,232,232,232,232,232,232,232,,,,,,232,232,232',
'232,232,232,232,,,232,,,,,,,232,,,232,232,232,232,232,232,232,232,,232',
'232,232,,232,232,,232,232,232,,,,,,,,,,,,,,,,,,,,232,,,232,,,232,232',
',,232,,,,,,232,,,,,,,,232,,,,,232,232,232,232,232,232,,,,232,232,,,',
',,,232,,,232,232,232,,,232,232,631,631,631,,631,,,,631,631,,,,631,,631',
'631,631,631,631,631,631,,,,,,631,631,631,631,631,631,631,,,631,,,,,',
',631,,,631,631,631,631,631,631,631,631,,631,631,631,,631,631,,631,631',
'631,,,,,,,,,,,,,,,,,,,,631,,,631,,,631,631,,,631,,631,,,,631,,,,,,,',
'631,,,,,631,631,631,631,631,631,,,,631,631,,,,,,,631,,,631,631,631,',
',631,631,632,632,632,,632,,,,632,632,,,,632,,632,632,632,632,632,632',
'632,,,,,,632,632,632,632,632,632,632,,,632,,,,,,,632,,,632,632,632,632',
'632,632,632,632,,632,632,632,,632,632,,632,632,632,,,,,,,,,,,,,,,,,',
',,632,,,632,,,632,632,,,632,,,,,,632,,,,,,,,632,,,,,632,632,632,632',
'632,632,,,,632,632,,,,,,,632,,,632,632,632,,,632,632,235,235,235,,235',
',,,235,235,,,,235,,235,235,235,235,235,235,235,,,,,,235,235,235,235',
'235,235,235,,,235,,,,,,,235,,,235,235,235,235,235,235,235,235,,235,235',
'235,,235,235,,235,235,235,,,,,,,,,,,,,,,,,,,,235,,,235,,,235,235,,,235',
',,,,,235,,,,,,,,235,,,,,235,235,235,235,235,235,,,,235,235,,,,,,,235',
',,235,235,235,,,235,235,635,635,635,,635,,,,635,635,,,,635,,635,635',
'635,635,635,635,635,,,,,,635,635,635,635,635,635,635,,,635,,,,,,,635',
',,635,635,635,635,635,635,635,635,635,635,635,635,,635,635,,635,635',
'635,,,,,,,,,,,,,,,,,,,,635,,,635,,,635,635,,,635,,635,,635,,635,,,,',
',,,635,,,,,635,635,635,635,635,635,,,,635,635,,,,,,,635,,635,635,635',
'635,,,635,635,636,636,636,,636,,,,636,636,,,,636,,636,636,636,636,636',
'636,636,,,,,,636,636,636,636,636,636,636,,,636,,,,,,,636,,,636,636,636',
'636,636,636,636,636,636,636,636,636,,636,636,,636,636,636,,,,,,,,,,',
',,,,,,,,,636,,,636,,,636,636,,,636,,,,636,,636,,,,,,,,636,,,,,636,636',
'636,636,636,636,,,,636,636,,,,,,,636,,636,636,636,636,,,636,636,637',
'637,637,,637,,,,637,637,,,,637,,637,637,637,637,637,637,637,,,,,,637',
'637,637,637,637,637,637,,,637,,,,,,,637,,,637,637,637,637,637,637,637',
'637,,637,637,637,,637,637,,637,637,637,,,,,,,,,,,,,,,,,,,,637,,,637',
',,637,637,,,637,,,,,,637,,,,,,,,637,,,,,637,637,637,637,637,637,,,,637',
'637,,,,,,,637,,,637,637,637,,,637,637,638,638,638,,638,,,,638,638,,',
',638,,638,638,638,638,638,638,638,,,,,,638,638,638,638,638,638,638,',
',638,,,,,,,638,,,638,638,638,638,638,638,638,638,,638,638,638,,638,638',
',638,638,638,,,,,,,,,,,,,,,,,,,,638,,,638,,,638,638,,,638,,,,,,638,',
',,,,,,638,,,,,638,638,638,638,638,638,,,,638,638,,,,,,,638,,,638,638',
'638,,,638,638,236,236,236,,236,,,,236,236,,,,236,,236,236,236,236,236',
'236,236,,,,,,236,236,236,236,236,236,236,,,236,,,,,,,236,,,236,236,236',
'236,236,236,236,236,,236,236,236,,236,236,,236,236,236,,,,,,,,,,,,,',
',,,,,,236,,,236,,,236,236,,,236,,,,,,236,,,,,,,,236,,,,,236,236,236',
'236,236,236,,,,236,236,,,,,,,236,,,236,236,236,,,236,236,643,643,643',
',643,,,,643,643,,,,643,,643,643,643,643,643,643,643,,,,,,643,643,643',
'643,643,643,643,,,643,,,,,,,643,,,643,643,643,643,643,643,643,643,,643',
'643,643,,643,643,,643,643,643,,,,,,,,,,,,,,,,,,,,643,,,643,,,643,643',
',,643,,,,,,643,,,,,,,,643,,,,,643,643,643,643,643,643,,,,643,643,,,',
',,,643,,,643,643,643,,,643,643,644,644,644,,644,,,,644,644,,,,644,,644',
'644,644,644,644,644,644,,,,,,644,644,644,644,644,644,644,,,644,,,,,',
',644,,,644,644,644,644,644,644,644,644,,644,644,644,,644,644,,644,644',
'644,,,,,,,,,,,,,,,,,,,,644,,,644,,,644,644,,,644,,,,,,644,,,,,,,,644',
',,,,644,644,644,644,644,644,,,,644,644,,,,,,,644,,,644,644,644,,,644',
'644,237,237,237,,237,,,,237,237,,,,237,,237,237,237,237,237,237,237',
',,,,,237,237,237,237,237,237,237,,,237,,,,,,,237,,,237,237,237,237,237',
'237,237,237,,237,237,237,,237,237,,237,237,237,,,,,,,,,,,,,,,,,,,,237',
',,237,,,237,237,,,237,,,,,,237,,,,,,,,237,,,,,237,237,237,237,237,237',
',,,237,237,,,,,,,237,,,237,237,237,,,237,237,647,647,647,,647,,,,647',
'647,,,,647,,647,647,647,647,647,647,647,,,,,,647,647,647,647,647,647',
'647,,,647,,,,,,,647,,,647,647,647,647,647,647,647,647,,647,647,647,',
'647,647,,647,647,647,,,,,,,,,,,,,,,,,,,,647,,,647,,,647,647,,,647,,',
',,,647,,,,,,,,647,,,,,647,647,647,647,647,647,,,,647,647,,,,,,,647,',
',647,647,647,,,647,647,648,648,648,,648,,,,648,648,,,,648,,648,648,648',
'648,648,648,648,,,,,,648,648,648,648,648,648,648,,,648,,,,,,,648,,,648',
'648,648,648,648,648,648,648,,648,648,648,,648,648,,648,648,648,,,,,',
',,,,,,,,,,,,,,648,,,648,,,648,648,,,648,,,,,,648,,,,,,,,648,,,,,648',
'648,648,648,648,648,,,,648,648,,,,,,,648,,,648,648,648,,,648,648,238',
'238,238,,238,,,,238,238,,,,238,,238,238,238,238,238,238,238,,,,,,238',
'238,238,238,238,238,238,,,238,,,,,,,238,,,238,238,238,238,238,238,238',
'238,,238,238,238,,238,238,,238,238,238,,,,,,,,,,,,,,,,,,,,238,,,238',
',,238,238,,,238,,,,,,238,,,,,,,,238,,,,,238,238,238,238,238,238,,,,238',
'238,,,,,,,238,,,238,238,238,,,238,238,239,239,239,,239,,,,239,239,,',
',239,,239,239,239,239,239,239,239,,,,,,239,239,239,239,239,239,239,',
',239,,,,,,,239,,,239,239,239,239,239,239,239,239,,239,239,239,,239,239',
',239,239,239,,,,,,,,,,,,,,,,,,,,239,,,239,,,239,239,,,239,,,,,,239,',
',,,,,,239,,,,,239,239,239,239,239,239,,,,239,239,,,,,,,239,,,239,239',
'239,,,239,239,240,240,240,,240,,,,240,240,,,,240,,240,240,240,240,240',
'240,240,,,,,,240,240,240,240,240,240,240,,,240,,,,,,,240,,,240,240,240',
'240,240,240,240,240,,240,240,240,,240,240,,240,240,240,,,,,,,,,,,,,',
',,,,,,240,,,240,,,240,240,,,240,,,,,,240,,,,,,,,240,,,,,240,240,240',
'240,240,240,,,,240,240,,,,,,,240,,,240,240,240,,,240,240,241,241,241',
',241,,,,241,241,,,,241,,241,241,241,241,241,241,241,,,,,,241,241,241',
'241,241,241,241,,,241,,,,,,,241,,,241,241,241,241,241,241,241,241,,241',
'241,241,,241,241,,241,241,241,,,,,,,,,,,,,,,,,,,,241,,,241,,,241,241',
',,241,,,,,,241,,,,,,,,241,,,,,241,241,241,241,241,241,,,,241,241,,,',
',,,241,,,241,241,241,,,241,241,242,242,242,,242,,,,242,242,,,,242,,242',
'242,242,242,242,242,242,,,,,,242,242,242,242,242,242,242,,,242,,,,,',
',242,,,242,242,242,242,242,242,242,242,,242,242,242,,242,242,,242,242',
'242,,,,,,,,,,,,,,,,,,,,242,,,242,,,242,242,,,242,,,,,,242,,,,,,,,242',
',,,,242,242,242,242,242,242,,,,242,242,,,,,,,242,,,242,242,242,,,242',
'242,672,672,672,,672,,,,672,672,,,,672,,672,672,672,672,672,672,672',
',,,,,672,672,672,672,672,672,672,,,672,,,,,,,672,,,672,672,672,672,672',
'672,672,672,,672,672,672,,672,672,,672,672,672,,,,,,,,,,,,,,,,,,,,672',
',,672,,,672,672,,,672,,,,,,672,,,,,,,,672,,,,,672,672,672,672,672,672',
',,,672,672,,,,,,,672,,,672,672,672,,,672,672,677,677,677,,677,,,,677',
'677,,,,677,,677,677,677,677,677,677,677,,,,,,677,677,677,677,677,677',
'677,,,677,,,,,,,677,,,677,677,677,677,677,677,677,677,,677,677,677,',
'677,677,,,,677,,,,,,,,,,,,,,,,,,,,677,,,677,,,677,677,,,677,,,,,,,,',
',,,,,,,,,,677,677,677,677,677,677,,,,677,677,,,,,,,677,,,677,677,677',
',,677,677,243,243,243,,243,,,,243,243,,,,243,,243,243,243,243,243,243',
'243,,,,,,243,243,243,243,243,243,243,,,243,,,,,,,243,,,243,243,243,243',
'243,243,243,243,,243,243,243,,243,243,,243,243,243,,,,,,,,,,,,,,,,,',
',,243,,,243,,,243,243,,,243,,,,,,243,,,,,,,,243,,,,,243,243,243,243',
'243,243,,,,243,243,,,,,,,243,,,243,243,243,,,243,243,244,244,244,,244',
',,,244,244,,,,244,,244,244,244,244,244,244,244,,,,,,244,244,244,244',
'244,244,244,,,244,,,,,,,244,,,244,244,244,244,244,244,244,244,,244,244',
'244,,244,244,,244,244,244,,,,,,,,,,,,,,,,,,,,244,,,244,,,244,244,,,244',
',,,,,244,,,,,,,,244,,,,,244,244,244,244,244,244,,,,244,244,,,,,,,244',
',,244,244,244,,,244,244,245,245,245,,245,,,,245,245,,,,245,,245,245',
'245,245,245,245,245,,,,,,245,245,245,245,245,245,245,,,245,,,,,,,245',
',,245,245,245,245,245,245,245,245,,245,245,245,,245,245,,245,245,245',
',,,,,,,,,,,,,,,,,,,245,,,245,,,245,245,,,245,,,,,,245,,,,,,,,245,,,',
',245,245,245,245,245,245,,,,245,245,,,,,,,245,,,245,245,245,,,245,245',
'246,246,246,,246,,,,246,246,,,,246,,246,246,246,246,246,246,246,,,,',
',246,246,246,246,246,246,246,,,246,,,,,,,246,,,246,246,246,246,246,246',
'246,246,,246,246,246,,246,246,,246,246,246,,,,,,,,,,,,,,,,,,,,246,,',
'246,,,246,246,,,246,,,,,,246,,,,,,,,246,,,,,246,246,246,246,246,246',
',,,246,246,,,,,,,246,,,246,246,246,,,246,246,247,247,247,,247,,,,247',
'247,,,,247,,247,247,247,247,247,247,247,,,,,,247,247,247,247,247,247',
'247,,,247,,,,,,,247,,,247,247,247,247,247,247,247,247,,247,247,247,',
'247,247,,247,247,247,,,,,,,,,,,,,,,,,,,,247,,,247,,,247,247,,,247,,',
',,,247,,,,,,,,247,,,,,247,247,247,247,247,247,,,,247,247,,,,,,,247,',
',247,247,247,,,247,247,688,688,688,,688,,,,688,688,,,,688,,688,688,688',
'688,688,688,688,,,,,,688,688,688,688,688,688,688,,,688,,,,,,,688,,,688',
'688,688,688,688,688,688,688,,688,688,688,,688,688,,,,688,,,,,,,,,,,',
',,,,,,,,688,,,688,,,688,688,,,688,,,,,,,,,,,,,,,,,,,688,688,688,688',
'688,688,,,,688,688,,,,,,,688,,,688,688,688,,,688,688,248,248,248,,248',
',,,248,248,,,,248,,248,248,248,248,248,248,248,,,,,,248,248,248,248',
'248,248,248,,,248,,,,,,,248,,,248,248,248,248,248,248,248,248,,248,248',
'248,,248,248,,248,248,248,,,,,,,,,,,,,,,,,,,,248,,,248,,,248,248,,,248',
',,,,,248,,,,,,,,248,,,,,248,248,248,248,248,248,,,,248,248,,,,,,,248',
',,248,248,248,,,248,248,249,249,249,,249,,,,249,249,,,,249,,249,249',
'249,249,249,249,249,,,,,,249,249,249,249,249,249,249,,,249,,,,,,,249',
',,249,249,249,249,249,249,249,249,,249,249,249,,249,249,,249,249,249',
',,,,,,,,,,,,,,,,,,,249,,,249,,,249,249,,,249,,,,,,249,,,,,,,,249,,,',
',249,249,249,249,249,249,,,,249,249,,,,,,,249,,,249,249,249,,,249,249',
'693,693,693,,693,,,,693,693,,,,693,,693,693,693,693,693,693,693,,,,',
',693,693,693,693,693,693,693,,,693,,,,,,,693,,,693,693,693,693,693,693',
'693,693,,693,693,693,,693,693,,693,693,693,,,,,,,,,,,,,,,,,,,,693,,',
'693,,,693,693,,,693,,693,,,,693,,,,,,,,693,,,,,693,693,693,693,693,693',
',,,693,693,,,,,,,693,,,693,693,693,,,693,693,250,250,250,,250,,,,250',
'250,,,,250,,250,250,250,250,250,250,250,,,,,,250,250,250,250,250,250',
'250,,,250,,,,,,,250,,,250,250,250,250,250,250,250,250,,250,250,250,',
'250,250,,250,250,250,,,,,,,,,,,,,,,,,,,,250,,,250,,,250,250,,,250,,',
',,,250,,,,,,,,250,,,,,250,250,250,250,250,250,,,,250,250,,,,,,,250,',
',250,250,250,,,250,250,713,713,713,,713,,,,713,713,,,,713,,713,713,713',
'713,713,713,713,,,,,,713,713,713,713,713,713,713,,,713,,,,,,,713,,,713',
'713,713,713,713,713,713,713,,713,713,713,,713,713,,713,713,713,,,,,',
',,,,,,,,,,,,,,713,,,713,,,713,713,,,713,,,,,,713,,,,,,,,713,,,,,713',
'713,713,713,713,713,,,,713,713,,,,,,,713,,,713,713,713,,,713,713,251',
'251,251,,251,,,,251,251,,,,251,,251,251,251,251,251,251,251,,,,,,251',
'251,251,251,251,251,251,,,251,,,,,,,251,,,251,251,251,251,251,251,251',
'251,,251,251,251,,251,251,,251,251,251,,,,,,,,,,,,,,,,,,,,251,,,251',
',,251,251,,,251,,,,,,251,,,,,,,,251,,,,,251,251,251,251,251,251,,,,251',
'251,,,,,,,251,,,251,251,251,,,251,251,252,252,252,,252,,,,252,252,,',
',252,,252,252,252,252,252,252,252,,,,,,252,252,252,252,252,252,252,',
',252,,,,,,,252,,,252,252,252,252,252,252,252,252,,252,252,252,,252,252',
',252,252,252,,,,,,,,,,,,,,,,,,,,252,,,252,,,252,252,,,252,,,,,,252,',
',,,,,,252,,,,,252,252,252,252,252,252,,,,252,252,,,,,,,252,,,252,252',
'252,,,252,252,253,253,253,,253,,,,253,253,,,,253,,253,253,253,253,253',
'253,253,,,,,,253,253,253,253,253,253,253,,,253,,,,,,,253,,,253,253,253',
'253,253,253,253,253,,253,253,253,,253,253,,253,253,253,,,,,,,,,,,,,',
',,,,,,253,,,253,,,253,253,,,253,,,,,,253,,,,,,,,253,,,,,253,253,253',
'253,253,253,,,,253,253,,,,,,,253,,,253,253,253,,,253,253,254,254,254',
',254,,,,254,254,,,,254,,254,254,254,254,254,254,254,,,,,,254,254,254',
'254,254,254,254,,,254,,,,,,,254,,,254,254,254,254,254,254,254,254,,254',
'254,254,,254,254,,254,254,254,,,,,,,,,,,,,,,,,,,,254,,,254,,,254,254',
',,254,,,,,,254,,,,,,,,254,,,,,254,254,254,254,254,254,,,,254,254,,,',
',,,254,,,254,254,254,,,254,254,733,733,733,,733,,,,733,733,,,,733,,733',
'733,733,733,733,733,733,,,,,,733,733,733,733,733,733,733,,,733,,,,,',
',733,,,733,733,733,733,733,733,733,733,,733,733,733,,733,733,,733,733',
'733,,,,,,,,,,,,,,,,,,,,733,,,733,,,733,733,,,733,,733,,,,733,,,,,,,',
'733,,,,,733,733,733,733,733,733,,,,733,733,,,,,,,733,,,733,733,733,',
',733,733,255,255,255,,255,,,,255,255,,,,255,,255,255,255,255,255,255',
'255,,,,,,255,255,255,255,255,255,255,,,255,,,,,,,255,,,255,255,255,255',
'255,255,255,255,,255,255,255,,255,255,,255,255,255,,,,,,,,,,,,,,,,,',
',,255,,,255,,,255,255,,,255,,,,,,255,,,,,,,,255,,,,,255,255,255,255',
'255,255,,,,255,255,,,,,,,255,,,255,255,255,436,,255,255,,,,436,436,436',
',,436,436,436,600,436,600,600,600,600,600,,,,436,436,436,436,,,600,',
',,,436,436,,436,436,436,436,436,,,,,,,,,,600,600,,,,,,,,600,600,600',
'600,,436,436,436,436,436,436,436,436,436,436,436,436,436,436,,,436,436',
'436,,,436,,,436,,,436,436,,436,600,436,,436,,436,436,436,436,436,436',
'436,,436,436,436,,,,,,,,,,,,,436,436,436,436,59,436,,436,,,,59,59,59',
',,59,59,59,707,59,707,707,707,707,707,,,,,59,59,59,,,707,,,,,59,59,',
'59,59,59,59,59,,,,,,,,,,707,,,,,,,,,707,707,707,707,,59,59,59,59,59',
'59,59,59,59,59,59,59,59,59,,,59,59,59,,,59,,,59,,,59,59,,59,707,59,',
'59,,59,59,59,59,59,59,59,,59,,59,,,,,,,,,,,,,59,59,59,59,435,59,,59',
',,,435,435,435,,,435,435,435,709,435,709,709,709,709,709,,,,435,435',
'435,435,,,709,,,,,435,435,,435,435,435,435,435,,,,,,,,,,709,,,,,,,,',
'709,709,709,709,,435,435,435,435,435,435,435,435,435,435,435,435,435',
'435,,,435,435,435,,,435,,,435,,,435,435,,435,709,435,,435,,435,435,435',
'435,435,435,435,,435,435,435,,,,,,,,,,,,,435,435,435,435,,435,,435,11',
'11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11',
',,,11,11,11,11,11,11,11,11,11,11,,,,,,11,11,11,11,11,11,11,11,11,11',
',11,,,,,,,,,11,11,,11,11,11,11,11,11,11,,,11,11,,,,11,11,11,11,,,,,',
',,,,,,,,11,11,,11,11,11,11,11,11,11,11,11,11,11,,,11,11,,,,,,,,,,11',
',,,,,,,,11,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74',
'74,74,74,74,74,,,,74,74,74,74,74,74,74,74,74,74,,,,,,74,74,74,74,74',
'74,74,74,74,74,74,74,,74,,,,,,,74,74,,74,74,74,74,74,74,74,,,74,74,',
',,74,74,74,74,,,,,,74,,,,,,,,74,74,,74,74,74,74,74,74,74,74,74,74,74',
',,74,,,,,,,,,,,,,,,,,,,,74,91,91,91,91,91,91,91,91,91,91,91,91,91,91',
'91,91,91,91,91,91,91,91,91,91,,,,91,91,91,91,91,91,91,91,91,91,,,,,',
'91,91,91,91,91,91,91,91,91,91,91,91,,91,,,,,,,91,91,,91,91,91,91,91',
'91,91,,,91,91,,,,91,91,91,91,,,,,,,,,,,,,,91,91,,91,91,91,91,91,91,91',
'91,91,91,91,,,91,,,,,,,,,,,,,,,,,,,,91,405,405,405,405,405,405,405,405',
'405,405,405,405,405,405,405,405,405,405,405,405,405,405,405,405,,,,405',
'405,405,405,405,405,405,405,405,405,,,,,,405,405,405,405,405,405,405',
'405,405,,,405,,,,,,,,,405,405,,405,405,405,405,405,405,405,,,405,405',
',,,405,405,405,405,,,,,,,,,,,,,,405,405,,405,405,405,405,405,405,405',
'405,405,405,405,,,405,405,,,,,,,,,,405,,,,,,,,,405,755,755,755,755,755',
'755,755,755,755,755,755,755,755,755,755,755,755,755,755,755,755,755',
'755,755,,,,755,755,755,755,755,755,755,755,755,755,,,,,,755,755,755',
'755,755,755,755,755,755,,,755,,,,,,,,,755,755,,755,755,755,755,755,755',
'755,,,755,755,,,,755,755,755,755,,,,,,,,,,,,,,755,755,,755,755,755,755',
'755,755,755,755,755,755,755,,,755,,,,,,,,,,,,,,,,,,,,755,12,12,12,12',
'12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,,,,12,12',
'12,12,12,12,12,12,12,12,,,,,,12,12,12,12,12,12,12,12,12,,,12,,,,,,,',
',12,12,,12,12,12,12,12,12,12,,,12,12,,,,12,12,12,12,,,,,,,,,,,,,,12',
'12,,12,12,12,12,12,12,12,12,12,12,12,,,12,12,,,,,,,,,,12,,,,,,,,,12',
'628,628,628,628,628,628,628,628,628,628,628,628,628,628,628,628,628',
'628,628,628,628,628,628,628,,,,628,628,628,628,628,628,628,628,628,628',
',,,,,628,628,628,628,628,628,628,628,628,,,628,,,,,,,,,628,628,,628',
'628,628,628,628,628,628,,,628,628,,,,628,628,628,628,,,,,,,,,,,,,,628',
'628,,628,628,628,628,628,628,628,628,628,628,628,,,628,628,,,,426,,',
',,,628,426,426,426,,,426,426,426,628,426,,,,,,,,,426,426,426,,,,,,,',
',426,426,,426,426,426,426,426,,,,,,,,,,,,,,,,,,,,,,,,426,426,426,426',
'426,426,426,426,426,426,426,426,426,426,,,426,426,426,,,426,,426,426',
',,426,426,,426,,426,,426,,426,426,426,426,426,426,426,,426,426,426,',
',,,,,,,,,,31,426,426,,426,,426,31,31,31,,,31,31,31,711,31,711,711,711',
'711,711,,,,,31,31,,,,711,,,,,31,31,,31,31,31,31,31,,,,,,,,,,711,,,,',
',,,,,,711,711,,31,31,31,31,31,31,31,31,31,31,31,31,31,31,,,31,31,31',
',,31,,31,31,,,31,31,,31,711,31,,31,,31,31,31,31,31,31,31,,31,,31,,,',
',,,,,,,,30,31,31,,31,,31,30,30,30,,,30,30,30,546,30,546,546,546,546',
'546,,,,30,30,30,,,,546,,,,,30,30,,30,30,30,30,30,,,,,,,,,,546,,,,,,',
',,546,546,546,546,,30,30,30,30,30,30,30,30,30,30,30,30,30,30,,,30,30',
'30,,,30,,30,30,,,30,30,,30,546,30,,30,,30,30,30,30,30,30,30,,30,30,30',
',,,,,,,,,,,484,30,30,,30,,30,484,484,484,,,484,484,484,,484,659,,659',
'659,659,659,659,,484,484,,,,,,,659,,,484,484,,484,484,484,484,484,,',
'883,,883,883,883,883,883,,,659,,,,,,,883,,659,659,659,659,,,,,,,,,,',
'484,,,,,,883,484,,,,,484,484,659,883,883,883,883,,,,659,,450,450,,,450',
',,,,,484,484,,450,450,,450,450,450,450,450,450,450,,484,450,450,883',
',484,450,450,450,450,,,,,,450,,,,,,,,450,450,,450,450,450,450,450,450',
'450,450,450,450,450,,,450,,,,,451,451,,,451,,,,,,,,,451,451,450,451',
'451,451,451,451,451,451,,,451,451,,,,451,451,451,451,,,,,,451,,,,,,',
',451,451,,451,451,451,451,451,451,451,451,451,451,451,,,451,,,,,517',
'517,,,517,,,,,,,,,517,517,451,517,517,517,517,517,517,517,,,517,517',
',,,517,517,517,517,,,,,,517,,,,,,,,517,517,,517,517,517,517,517,517',
'517,517,517,517,517,,,517,,,,,518,518,,,518,,,,,,,,,518,518,517,518',
'518,518,518,518,518,518,,,518,518,,,,518,518,518,518,,,,,,518,,,,,,',
',518,518,,518,518,518,518,518,518,518,518,518,518,518,,,518,,,,,527',
'527,,,527,,,,,,,,,527,527,518,527,527,527,527,527,527,527,,,527,527',
',,,527,527,527,527,,,,,,527,,,,,,,,527,527,,527,527,527,527,527,527',
'527,527,527,527,527,,,527,,,,,528,528,,,528,,,,,,,,,528,528,527,528',
'528,528,528,528,528,528,,,528,528,,,,528,528,528,528,,,,,,528,,,,,,',
',528,528,,528,528,528,528,528,528,528,528,528,528,528,,,528,,,,,744',
'744,,,744,,,,,,,,,744,744,528,744,744,744,744,744,744,744,,,744,744',
',,,744,744,744,744,,,,,,744,,,,,,,,744,744,,744,744,744,744,744,744',
'744,744,744,744,744,,,744,,,,,743,743,,,743,,,,,,,,,743,743,744,743',
'743,743,743,743,743,743,,,743,743,,,,743,743,743,743,,,,,,743,,,,,,',
',743,743,,743,743,743,743,743,743,743,743,743,743,743,,,743,,,,,213',
'213,,,213,,,,,,,,,213,213,743,213,213,213,213,213,213,213,,,213,213',
',,,213,213,213,213,,,,,,213,,,,,,,,213,213,,213,213,213,213,213,213',
'213,213,213,213,213,,,213,,,,,214,214,,,214,,,,,,,,,214,214,213,214',
'214,214,214,214,214,214,,,214,214,,,,214,214,214,214,,,,,,214,,,,,,',
',214,214,,214,214,214,214,214,214,214,214,214,214,214,,886,214,886,886',
'886,886,886,888,,888,888,888,888,888,,,886,,,,,214,,888,911,,911,911',
'911,911,911,,,,,,,,886,,911,,,,,888,,886,886,886,886,,,,,,888,888,,',
',913,911,913,913,913,913,913,,,,911,911,911,911,,917,913,917,917,917',
'917,917,886,,,,,,,888,,917,,,,,,,913,753,,753,753,753,753,753,911,,',
'913,913,,,917,940,753,940,940,940,940,940,,,,917,917,,,,,940,,,,,,,753',
',,,,,913,,,753,753,753,753,,,940,940,,263,263,,917,263,,940,940,940',
'940,,,,263,263,,263,263,263,263,263,263,263,,,263,263,753,,,263,263',
'263,263,,,,,,,,,940,,,,,263,263,,263,263,263,263,263,263,263,263,263',
'263,263,,,263,,,,,957,957,,,957,,,,,,,,,957,957,263,957,957,957,957',
'957,957,957,,,957,957,,,,957,957,957,957,,,,,,957,,,,,,,,957,957,,957',
'957,957,957,957,957,957,957,957,957,957,,337,957,337,337,337,337,337',
'990,,990,990,990,990,990,,,337,,,,,957,,990,992,,992,992,992,992,992',
',,,,,,,337,337,992,,,,,990,,337,337,337,337,,,,990,990,990,990,,,,994',
'992,994,994,994,994,994,,,,,,992,992,,996,994,996,996,996,996,996,337',
',,,,,,990,,996,,,,,,,994,,,,,,,,992,,,994,994,,,996,587,587,,,587,,',
',,,996,996,,587,587,,587,587,587,587,587,587,587,,,587,587,,,994,587',
'587,587,587,,,,,,587,,,,,996,,,587,587,,587,587,587,587,587,587,587',
'587,587,587,587,,,587,,,,,588,588,,,588,,,,,,,,,588,588,587,588,588',
'588,588,588,588,588,,,588,588,,,,588,588,588,588,,,,,,588,,,,,,,,588',
'588,,588,588,588,588,588,588,588,588,588,588,588,,,588,,,,,1006,1006',
',,1006,,,,,,,,,1006,1006,588,1006,1006,1006,1006,1006,1006,1006,,,1006',
'1006,,,,1006,1006,1006,1006,,,,,,1006,,,,,,,,1006,1006,,1006,1006,1006',
'1006,1006,1006,1006,1006,1006,1006,1006,,,1006,,,,,1007,1007,,,1007',
',,,,,,,,1007,1007,1006,1007,1007,1007,1007,1007,1007,1007,,,1007,1007',
',,,1007,1007,1007,1007,,,,,,1007,,,,,,,,1007,1007,,1007,1007,1007,1007',
'1007,1007,1007,1007,1007,1007,1007,,1009,1007,1009,1009,1009,1009,1009',
',,,,,,,,,1009,,,,,1007,,,,,,,,,,,,,,,,,1009,,,,,,,,,,,1009,1009,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,1009' ]
        racc_action_check = arr = ::Array.new(26275, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_action_pointer = [
   nil,  1353,  1200,    35,   nil,   416,   nil,   nil, 12566,  1608,
   nil, 23456, 24121,   -64,   nil,   -78,     5,  1203,   389,    38,
   630,   nil,   -60, 15086,  1623,   272,   nil,   353,   nil,    20,
 24623, 24498,  7666,  7806,  8086,   nil,  2610,  8786,  8926,   nil,
   179,   507,   124,   298,   161, 10046, 10466, 10606,   239,  1095,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil, 23194,
   nil, 11446, 11586,   nil,   -19,   nil, 12006, 12146,   nil,   nil,
 12286, 12426,   290,   nil, 23589,   nil,   nil,   nil,   nil,   nil,
   -78,   nil,   nil,   nil,   nil,   nil,   nil,   247,   283,   285,
   299, 23722,   nil,   nil,   nil,   nil,   nil,   nil,   644,   nil,
   nil,   512,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil, 13406,   nil,   nil,   nil,   nil, 13546,
 13686, 13826, 14526, 14666,   334,   nil,   259,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   341,   nil,  4020,
 15786, 15926, 16066, 25343, 25411,   nil, 16486, 16626, 16766, 16906,
 17046,  5006,   nil,   nil,  1236,   202,   199,   425,   171,   348,
   405,   nil, 17746,  2892,   411, 18166, 18866, 19286, 19706, 19846,
 19986, 20126, 20266, 20686, 20826, 20966, 21106, 21246, 21526, 21666,
 21946, 22226, 22366, 22506, 22646, 22926,  5426,  5846,  6686,  6826,
  6966,   nil,   nil, 25629,   nil,   nil,   417,  7106,   nil,   426,
   nil,   nil,   nil,  7246,   nil,   nil,  7386,   nil,  2046,   nil,
   398,   400,   nil,  7946,   453,  8226,   nil,  8366,  8506,   nil,
   nil,   114,   nil,   762,  8646,   403,  2751,   424,   485,   473,
  9206,  2328,   452,   388,  1272,   549,  1244,   nil,   520,   486,
   -10,   nil,   nil,   nil,   532,   134,   495, 10186,   nil,   506,
   566,   918,   nil,   579,   nil, 10746,  1905,   641,   nil,   564,
   nil,   164,   562,   584, 10886,   nil,   nil, 25759,   425,    19,
    -7, 11026, 11166,   -70,   674,   573,    39,     5,   962,   655,
    36,   701,   nil,   nil, 11726,   nil, 11866,   340,   549,   293,
   676,   -61,   615,   604,   655,   483,   nil,   523,   nil,   nil,
   nil,   nil,   nil,   412,   nil,   435,   nil,   312,   nil,   611,
   125,   nil,   613,   184,   nil,   619,   -58,   nil,   621,   -42,
   nil,   382,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,  1623, 23855,   nil,   nil,   nil,   nil,
   643,   nil,   nil,   630, 12706,   637,   nil,   nil,  1059,   648,
   nil,   nil,   655,   656,   430,   436, 24373,   nil,   nil,   nil,
   255,   130,   699,   nil,   nil, 23324, 23064,   nil,  1200,   nil,
   648,   nil,   nil,   777,   nil,   nil,   nil,   nil,    53,   nil,
 24799, 24867, 12846,   139, 12986, 13126, 13266,  4725,  4584,   570,
   -46,   724,   726,   746,   747,  5286,  5146,  3198,  4866,  5006,
  3174,  3315,  3456,  3597,  3879,  4020,  4161,  4302,   659,  3143,
  4443,  3738,  2469,   195, 24748,   nil,   nil,   nil,   nil,   nil,
   nil,   202,   103,   690,   691,   nil,   nil, 13966,   nil,   nil,
 14106,   nil, 14246,   nil,   nil,   nil,   nil, 14386,  1482,   692,
   690,   nil,   nil,   694, 14806,   707, 14946, 24935, 25003,  1062,
   747,   nil, 15226,   711,   nil, 15366, 15506, 25071, 25139,  2610,
 15646,   852,   855,   742,   nil,   nil, 16206,   nil,   nil, 16346,
   nil,   759,   nil,   -79,   789,    31, 24587,   nil,   760,   761,
   nil,   770,   771,   776,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   766,   516,   nil,   nil, 17186,   nil,   nil,   nil,   859,
   nil,   nil,   nil,   860,   nil,   nil,   864,  3879,   904,   nil,
  3174,    60,    25,   909,   917,   nil, 17326, 25874, 25942,    28,
   nil,   289,   258,   296,   nil,   780,   nil,     9, 17466,   nil,
 23028,   nil, 17606,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   130,   nil,   nil,   158,   nil,   nil,
   nil,   800,   nil,   nil,   801,   nil,   819,   nil, 24254,   nil,
   813, 17886, 18026,   270,   849, 18306, 18446, 18586, 18726,   848,
   nil,   nil,   nil, 19006, 19146,   849,   nil, 19426, 19566,   nil,
   140,   143,     0,   380,   828,   918,   827,   nil,   nil, 24714,
   nil,   nil,   930,   -14,   -13,   nil,   nil,   nil,   nil,   829,
   nil,   871, 20406,   nil,   nil,  1467,  -110, 20546,   831,   nil,
   838,   158,    90,   884,   225,  1200,   888,   852, 21386,  2328,
   933,   139,   991, 21806,   nil,   nil,   521,   nil,   nil,   nil,
  4725,  1482,   882,   335,   nil,   nil,   607, 23158,   nil, 23288,
   nil, 24462,   nil, 22086,   nil,   608,   nil,   880,   386,   887,
   nil,   nil,   nil,   nil,   561,   nil,  1004,   nil,   nil,   nil,
   nil,  1021,   nil, 22786,   905,    30,    58,    31,   138,  5146,
   nil,   921,   nil, 25275, 25207,  5286,   nil,   nil,   nil,   224,
   732,  3456,  3597, 25573,    94, 23988,   147,   135,  4584,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   912,  5566,  2187,  5706,
   nil,   915,   nil,  1764,   nil,  1341,   nil,   nil,  3033,   nil,
  2751,   nil,  1905,  5986,  6126,  6266,  6406,   167,  6546,   917,
   920,   nil,   922,   923,   928,   nil,   957,   941,   940,   930,
  7526,   nil,   nil,  4866,   nil,   nil,   nil,   777,   918,   nil,
   nil,   944,   291,   nil,   nil,  1075,   nil,  1341,   956,   998,
   nil,   nil,   nil,   974,  1086,   970,   969,   nil,   nil,   nil,
   970,   971,   nil,   972,   976,   nil,   986,   nil,   nil,   993,
   648,   993,  3334,   nil,  1132,   nil,  9066,  1137,  3315,  3033,
   nil,    32,    -4,    23,   320,   777,   nil,  1023,  2187,  9346,
   nil,   278,  1141,  1145,  1033,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,  1058,  1043,   nil,  1482,  9486,  9626,  2892,
   344,   nil,   nil, 24743,   nil,   nil, 25473,   nil, 25480,   nil,
   nil,  1073,  1186,  9766,   682,  1130,  1178,  1059,  1077,  1183,
   nil,  4443,   nil,   nil,    22,  9906,   nil,   nil,   nil,   nil,
   nil, 25497,   nil, 25534,   nil,   443,   nil, 25549,   nil,   nil,
   nil,   nil,   373,  3301,  1064,   nil,   -11,   nil,  1189,  1198,
 10326,  4302,   nil,   nil,  1199,   264,   nil,   nil,   nil,   nil,
 25588,   nil,  1083,   nil,   nil,  1084,  1085,  1095,  1097,   nil,
  1098,   nil,    48,   nil,   nil,   nil,   954, 25697,   nil,   nil,
  1115,   nil,   nil,   nil,  3738,   990,  1059,  1131,  1181,  1103,
   nil,  1113,  1127,  1131,  1134,  1153,   641,  1158,  3199,  2469,
   nil,   nil,   nil,   262,  2046,   nil,   nil,  4161,  1764,   nil,
 25766,   nil, 25783,   nil, 25820,   nil, 25835,   nil,   nil,   nil,
  1327,  1201,  1205,   nil,  1293, 11306, 26010, 26078,   849, 26140,
   nil,   nil,   nil,   nil,   509,  1183,   307,   nil,   nil,   nil,
  1304,  1314,  1317,  1199,  1202,  1204,  1205,   nil,   nil,  1213,
    -9,    -8,    10,   813,  1219,  1220,   nil,   nil,   nil,   nil,
   575,   nil,   nil,   nil,   nil,    21,   nil,  -106,   nil ]

racc_action_default = [
    -1,  -623,  -622,  -623,    -2,  -609,    -4,    -5,  -623,    -8,
    -9,  -623,  -623,  -623,   -29,  -623,  -623,  -623,  -280,  -623,
   -40,   -43,  -611,  -623,   -48,   -50,   -51,   -52,   -57,  -257,
  -257,  -257,  -293,  -332,  -333,   -69,  -622,   -73,   -81,   -83,
  -623,  -515,  -516,  -623,  -623,  -623,  -623,  -623,  -611,  -238,
  -271,  -272,  -273,  -274,  -275,  -276,  -277,  -278,  -279,  -598,
  -282,  -611,  -622,  -291,  -301,  -404,  -623,  -623,  -306,  -309,
  -609,  -623,  -317,  -324,  -623,  -334,  -335,  -446,  -447,  -448,
  -449,  -450,  -451,  -622,  -454,  -622,  -622,  -622,  -622,  -622,
  -622,  -622,  -491,  -497,  -499,  -500,  -501,  -502,  -596,  -504,
  -505,  -597,  -507,  -508,  -509,  -510,  -511,  -512,  -513,  -514,
  -519,  -520,  1049,    -3,  -610,  -618,  -619,  -620,    -7,  -623,
  -623,  -623,  -623,  -623,  -623,   -17,  -623,  -112,  -113,  -114,
  -115,  -116,  -117,  -118,  -119,  -120,  -124,  -125,  -126,  -127,
  -128,  -129,  -130,  -131,  -132,  -133,  -134,  -135,  -136,  -137,
  -138,  -139,  -140,  -141,  -142,  -143,  -144,  -145,  -146,  -147,
  -148,  -149,  -150,  -151,  -152,  -153,  -154,  -155,  -156,  -157,
  -158,  -159,  -160,  -161,  -162,  -163,  -164,  -165,  -166,  -167,
  -168,  -169,  -170,  -171,  -172,  -173,  -174,  -175,  -176,  -177,
  -178,  -179,  -180,  -181,  -182,  -183,  -184,  -185,  -186,  -187,
  -188,  -189,  -190,  -191,  -192,  -193,  -194,   -22,  -121,  -622,
  -623,  -623,  -622,  -623,  -623,  -608,  -623,  -623,  -623,  -623,
  -623,  -611,  -612,   -47,  -623,  -515,  -516,  -623,  -280,  -623,
  -623,  -230,  -623,  -622,  -623,  -623,  -623,  -623,  -623,  -623,
  -623,  -623,  -623,  -623,  -623,  -623,  -623,  -623,  -623,  -623,
  -623,  -623,  -623,  -623,  -623,  -623,  -623,  -623,  -623,  -623,
  -623,  -410,  -413,  -623,  -606,  -607,   -58,  -623,  -300,  -623,
  -427,  -430,   -64,  -622,  -424,   -65,  -611,   -66,  -239,  -252,
  -622,  -622,  -256,  -623,  -262,  -623,  -591,  -623,  -623,   -67,
   -68,  -609,   -13,   -14,  -623,   -71,  -622,  -611,  -623,   -74,
   -77,  -622,   -89,   -90,  -623,  -623,   -97,  -293,  -296,  -611,
  -417,  -332,  -333,  -336,  -425,  -623,   -79,  -623,   -85,  -289,
  -498,  -623,  -215,  -216,  -231,  -623,  -622,  -285,  -284,  -623,
  -240,  -615,  -615,  -623,  -622,  -302,  -303,  -547,   -49,  -623,
  -623,  -623,  -623,  -609,  -623,  -610,  -515,  -516,  -623,  -623,
  -280,  -623,  -357,  -358,  -623,  -320,  -623,  -112,  -113,  -154,
  -155,  -156,  -172,  -177,  -184,  -187,  -327,  -623,  -515,  -516,
  -586,  -587,  -452,  -623,  -475,  -623,  -477,  -623,  -479,  -623,
  -623,  -459,  -623,  -623,  -465,  -623,  -623,  -471,  -623,  -623,
  -473,  -623,  -490,  -492,  -493,  -494,  -495,    -6,  -621,   -23,
   -24,   -25,   -26,   -27,  -622,  -623,   -19,   -20,   -21,  -122,
  -623,   -30,   -39,  -267,  -623,  -623,  -266,   -31,  -197,  -611,
  -247,  -248,  -622,  -622,  -599,  -600,  -257,  -422,  -601,  -602,
  -600,  -599,  -257,  -421,  -423,  -601,  -602,   -37,  -205,   -38,
  -623,   -41,   -42,  -195,  -262,   -44,   -45,   -46,  -611,  -299,
  -623,  -623,  -622,  -289,  -623,  -623,  -623,  -206,  -207,  -208,
  -209,  -210,  -211,  -212,  -213,  -217,  -218,  -219,  -220,  -221,
  -222,  -223,  -224,  -225,  -226,  -227,  -228,  -229,  -232,  -233,
  -234,  -235,  -611,  -622,  -257,  -599,  -600,   -54,   -59,  -258,
  -418,  -622,  -622,  -611,  -611,  -295,  -253,  -623,  -261,  -254,
  -623,  -259,  -623,  -263,  -594,  -595,   -12,  -610,   -16,  -611,
   -70,  -287,   -86,   -75,  -623,  -611,  -622,  -623,  -623,   -96,
  -623,  -498,  -623,   -82,   -87,  -623,  -623,  -623,  -623,  -236,
  -623,  -438,  -623,  -611,  -613,  -241,  -617,  -616,  -243,  -617,
  -290,  -623,  -589,  -615,  -623,  -623,  -547,  -407,  -585,  -585,
  -530,  -532,  -532,  -532,  -546,  -548,  -549,  -550,  -551,  -552,
  -553,  -554,  -623,  -556,  -558,  -560,  -565,  -567,  -568,  -570,
  -575,  -577,  -578,  -580,  -581,  -582,  -623,  -622,  -348,  -349,
  -622,  -623,  -623,  -623,  -623,  -433,  -622,  -623,  -623,  -289,
  -314,  -107,  -108,  -623,  -110,  -623,  -280,  -623,  -623,  -325,
  -547,  -329,  -623,  -453,  -476,  -481,  -482,  -484,  -455,  -478,
  -456,  -480,  -457,  -458,  -623,  -461,  -463,  -623,  -464,  -467,
  -468,  -623,  -469,  -470,  -623,  -496,  -623,   -18,  -623,   -28,
  -270,  -623,  -623,  -426,  -623,  -249,  -251,  -623,  -623,   -60,
  -245,  -246,  -419,  -623,  -623,   -62,  -420,  -623,  -623,  -298,
  -599,  -600,  -599,  -600,  -611,  -195,  -623,  -393,  -394,  -611,
  -396,  -411,   -53,  -414,  -622,  -428,  -431,  -244,  -294,  -622,
  -260,  -264,  -623,  -592,  -593,   -15,   -72,  -623,   -78,   -84,
  -611,  -599,  -600,  -622,   -93,   -95,  -623,   -80,  -623,  -204,
  -214,  -611,  -622,  -622,  -283,  -286,  -615,  -292,  -590,  -405,
  -622,  -622,  -611,  -623,  -528,  -529,  -623,  -623,  -539,  -623,
  -542,  -623,  -544,  -623,  -359,  -623,  -361,  -363,  -370,  -611,
  -559,  -569,  -579,  -583,  -622,  -350,  -622,  -307,  -351,  -352,
  -310,  -623,  -313,  -623,  -611,  -599,  -600,  -603,  -288,  -623,
  -107,  -108,  -109,  -623,  -623,  -622,  -318,  -521,  -522,  -623,
  -321,  -622,  -622,  -547,  -623,  -623,  -611,  -623,  -622,  -460,
  -462,  -466,  -472,  -474,   -10,  -123,  -268,  -623,  -198,  -623,
  -614,  -622,   -33,  -200,   -34,  -201,   -61,   -35,  -203,   -36,
  -202,   -63,  -196,  -623,  -623,  -623,  -623,  -426,  -623,  -585,
  -585,  -375,  -622,  -622,  -622,  -392,  -623,  -611,  -398,  -554,
  -562,  -563,  -573,  -622,  -416,  -415,   -55,  -622,  -622,  -255,
  -265,   -76,   -91,   -88,  -297,  -622,  -355,  -622,  -439,  -622,
  -440,  -441,  -242,  -623,  -623,  -611,  -585,  -566,  -584,  -531,
  -532,  -532,  -557,  -532,  -532,  -576,  -532,  -554,  -571,  -611,
  -623,  -368,  -623,  -555,  -623,  -353,  -623,  -623,  -622,  -622,
  -312,  -623,  -426,  -623,  -107,  -108,  -111,  -611,  -622,  -623,
  -524,  -623,  -623,  -623,  -611,  -526,  -330,  -588,  -483,  -486,
  -487,  -488,  -489,  -623,  -269,   -32,  -199,  -250,  -623,  -237,
  -623,  -373,  -374,  -383,  -377,  -385,  -623,  -388,  -623,  -390,
  -395,  -623,  -623,  -623,  -561,  -623,  -623,  -622,  -623,  -623,
   -11,  -622,  -445,  -356,  -623,  -623,  -443,  -408,  -409,  -406,
  -527,  -623,  -535,  -623,  -537,  -623,  -540,  -623,  -543,  -545,
  -360,  -362,  -366,  -623,  -371,  -304,  -623,  -305,  -623,  -623,
  -623,  -622,  -315,  -426,  -623,  -623,  -322,  -326,  -328,  -525,
  -547,  -485,  -585,  -564,  -376,  -622,  -622,  -622,  -622,  -574,
  -622,  -397,  -611,  -400,  -402,  -403,  -572,  -623,  -289,  -412,
  -623,  -429,  -432,  -444,  -622,   -98,   -99,  -623,  -623,  -106,
  -442,  -532,  -532,  -532,  -532,  -364,  -623,  -369,  -623,  -622,
  -308,  -311,  -264,  -622,  -622,  -319,  -523,  -622,  -622,  -372,
  -623,  -380,  -623,  -382,  -623,  -386,  -623,  -389,  -391,  -399,
  -623,  -288,  -603,   -56,  -438,  -622,  -623,  -623,  -105,  -623,
  -533,  -536,  -538,  -541,  -623,  -367,  -622,  -434,  -435,  -436,
  -623,  -623,  -623,  -622,  -622,  -622,  -622,  -401,  -437,  -611,
  -599,  -600,  -603,  -104,  -532,  -365,  -354,  -316,  -323,  -331,
  -623,  -378,  -381,  -384,  -387,  -426,  -534,  -622,  -379 ]

clist = [
'6,419,220,299,213,366,584,279,279,279,262,532,117,125,208,130,130,335',
'135,135,692,633,393,274,280,280,280,499,325,133,133,547,416,577,580',
'442,673,554,4,439,327,266,272,275,114,338,338,113,752,338,223,535,538',
'488,331,426,432,844,835,9,330,793,493,339,340,9,670,343,955,670,704',
'705,815,16,263,673,921,117,130,16,316,374,320,376,378,381,384,387,390',
'376,118,523,295,832,719,130,727,730,338,338,338,338,277,289,290,484',
'847,16,742,29,739,297,344,661,796,29,399,400,401,402,949,665,666,953',
'984,375,614,924,354,617,29,391,597,858,599,598,861,790,987,29,29,29',
'356,29,751,600,755,940,628,795,897,664,797,405,281,281,281,825,952,313',
'313,545,699,337,412,353,800,483,29,499,803,9,673,29,29,491,955,29,807',
'492,403,826,808,1017,332,16,733,279,819,904,372,373,377,313,16,380,397',
'445,446,447,448,1,415,383,670,670,427,386,977,415,420,450,389,604,921',
'868,757,611,436,758,615,29,392,615,949,859,29,29,29,29,29,1027,207,900',
'830,124,827,411,417,943,702,654,279,437,441,731,554,839,279,602,336',
'279,891,2,541,370,787,351,856,280,835,1015,490,698,746,663,333,367,280',
'832,326,420,533,334,341,708,710,712,498,498,16,794,812,524,848,945,342',
'849,678,520,,517,426,432,806,,687,,117,1035,554,,,832,16,680,,274,527',
',,881,882,,,,29,29,29,29,338,338,,29,29,29,29,29,29,831,507,833,542',
'506,,587,852,489,581,582,29,,513,,,,494,328,910,1036,117,508,295,521',
',,,295,942,683,,790,,1018,790,16,790,16,932,683,,509,16,,29,734,515',
',,,29,,832,29,791,583,,800,988,281,800,,,800,,800,298,16,281,634,,29',
'6,29,,,,627,29,130,,,135,673,601,809,822,,,641,498,498,313,133,640,646',
'776,279,828,683,,828,781,29,,,862,863,639,313,626,,,427,645,,670,864',
'29,29,420,811,,554,760,436,543,760,,933,,9,656,,989,442,,,790,,790,',
'790,,790,16,313,641,313,,524,657,640,,,,,,524,657,657,279,,1028,,,662',
'800,,800,,800,,800,,946,,449,947,691,427,29,,,420,820,,809,790,,427',
',436,,,,,,,,,,436,971,857,,,,,,,,,934,,931,,800,,,,,,,912,914,,916,918',
'29,919,279,495,,675,,,,,410,,,,,,,792,750,16,,427,756,,510,420,,683',
',728,728,,,436,298,,,,,964,,,,,,747,828,,,791,,,791,1023,791,29,,805',
',,669,979,,,29,,,834,,836,,765,1045,130,,634,135,313,29,,798,554,,,524',
'313,1019,133,804,16,,,16,,,813,,298,,696,,634,298,657,,772,774,,498',
',,777,779,1021,1022,441,,641,42,,646,,640,798,42,29,415,866,29,,,816',
'821,,29,,1010,1011,1012,1013,,,,,,,29,,,,29,,42,303,303,634,791,,791',
'338,791,279,791,816,,816,851,,,,,,,,,649,,853,427,,,,,,420,29,29,347',
'436,,369,29,29,,,29,,860,771,1046,130,,865,,,,791,,,,498,,16,16,,,,',
'798,,667,668,,,,,,,,,42,884,884,884,,1029,676,875,,42,313,,679,,948',
',950,,29,29,,313,,,902,,,,906,,695,,,16,16,,338,,,972,16,973,,974,,',
',,634,338,,,,,926,,,29,,683,,,,29,,,,935,,29,29,728,,,,,29,17,,936,',
',,17,,16,,29,,16,16,,,,,42,,,224,16,,,,,,,,224,224,224,,17,304,304,',
',,,1024,42,1025,29,1026,,,29,29,,,,16,16,,313,,29,224,1034,,,16,224',
'224,999,,224,348,,724,,,726,,986,884,884,884,884,,884,,,,,29,1006,29',
'29,1047,,,,436,,,,29,29,,16,42,,42,16,,,303,42,814,17,,279,816,,224',
'224,224,224,17,,,,,303,885,887,889,,,,427,,42,16,420,29,843,,,29,634',
',436,,,816,313,,,,,,884,884,884,884,,,313,,369,,369,,,,16,,,29,,,,867',
',,884,,,,,16,,,,,16,,,16,16,823,824,,,,,,,,,,29,,17,224,224,224,,,42',
'224,224,224,224,224,224,29,,,,,29,,,29,29,,17,,,,,,,,,,41,,,,909,29',
'41,,,,,873,,,,,,,920,,,,,,224,,,,,,224,,,224,41,302,302,,,991,993,995',
'997,939,998,,,,,,,17,,17,,,896,304,17,,898,899,,,,,,,,346,903,,368,',
'304,42,,,,,,,303,17,,,,,,,303,,,,,,,,224,224,,928,929,,,,,,,,,595,41',
'595,,,,1041,1042,1043,1044,41,,,,,,,,,,,,,,,,,,,,1048,,,,42,,,42,,960',
',,,963,,,,,,,17,,,,,,,,,,,,,,,,,,,,,,,983,,,,,18,,,,,,18,,,,,,,,,,,',
'41,,224,,,,,,,,1004,,,,,,18,306,306,,,,,,41,1016,,,,,1020,,,,,,,,303',
',,,,,,,,,,303,,350,,,,,,17,,,,42,42,,304,,224,,561,,,,304,,,,,,,,224',
',,,,41,,41,,,,302,41,,18,,,,,413,,,,18,,,444,,302,,,,42,42,,,,41,,42',
',,,,,,,17,,,17,,,,,,224,,,,,,,,,368,,368,224,,,,224,,,,,,,,,369,,,42',
',,,42,42,,,501,19,503,,504,505,42,19,,,,,,,,224,224,18,,,,224,224,41',
',224,,,,,,,,,,19,,42,42,,,18,,,,,,42,,,,544,,,,304,,,,,,,,,,,304,,,',
'352,,,,,,,,17,17,,,369,,,,42,,,,42,,,,966,,,,,,,,18,,18,561,,,306,18',
',,,19,,,,224,,,42,714,19,224,,306,41,,,17,17,630,,302,18,,17,,,,,302',
',,,,,224,,,,,,42,,,,,,561,,,596,,596,,,,42,,,,,42,,,42,42,894,,,17,',
',,17,17,,,,,,,,,17,41,,,41,,,,,,,,,19,,,,18,,671,,440,544,799,674,,',
',,224,,17,17,,,,,19,,,,17,224,,,,,,,,,,,,,,,,671,,,544,,,,,,,,,,561',
',561,,,956,,,714,17,,841,,17,,,720,967,,,,,,,,,,19,,19,302,,,,19,,,',
',,,302,,17,,,561,,,18,,,,41,41,,306,,,19,,,,,306,,,,,,,,,,,,17,,,,,',
'766,,,,671,544,,,,17,,,,,17,,,17,17,,,,41,41,,,,,,41,,,,,,224,,18,,',
'18,810,,,,,,,,,,714,,714,,19,,,,,,,818,,,,,,,,,368,,,41,,,,41,41,,,838',
',,,,,41,,,,,,799,,,799,,,,,444,,,,,,,,,,,,,,,,,41,41,,561,,,,,,,41,',
',,975,714,,874,306,,,,,,,,,,,306,,,561,,,,,,,19,,18,18,,,368,,,,41,',
',,41,,,,965,,,,,,,,,,,714,,714,,,,,,,,,,,,799,41,,,,,,,,,18,18,,,,,872',
'18,,,,,,,714,,,19,,,19,,,,41,,,,,,,,,,,544,,,,41,,,,,41,,,41,41,596',
',,18,,,,18,18,,,,,,,,,18,,,,,,,,,,,,,,,,,,,,,440,982,,231,,,,,,,18,18',
'278,278,278,,,,,,18,,,,,322,323,324,,,,,,,,,,,,,,,278,,,,,,,,,,,19,19',
'596,,,,18,,,,18,,,,969,,,,,,,,,,,,,,,,,,,,,,,,,,18,,,,,,,,,,,19,19,',
',,,,19,,,,,,,,,,,,,,,18,,,,,,,,,,,,,,,18,,,,,18,,,18,18,,,,,,19,,,,19',
'19,,,,,,,,,19,,,,,,,,,,,,,,,,,,,,278,418,278,,,,438,443,,,,19,19,,,',
',,,,,19,231,,,457,458,459,460,461,462,463,464,465,466,467,468,469,470',
'471,472,473,474,475,476,477,478,479,480,481,482,,,,,,,278,,,19,,,278',
'19,,278,,970,,,,,278,,278,,278,278,,,,,,,,,,,,,,,,19,,,,,,,,,,,,,,,',
',,,,,529,,,,,,,,,278,,,19,,,,,,,,,,,,,,,19,,,,,19,,,19,19,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,278,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,278,,438,655,418,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,278,,,278,,278,,,,,,,,,,,,,,278,,,,,,,,,689,690,,,,,,,,,,278,,,278',
',,,,,,,,,,,,,,,,,,,,,,,,,278,,,,,,,,,,,,,,,,,,,,,278,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,278,768,,,278,278,773,775,,,,,778,780,',
',655,782,,,,,,,,,,,,,,,,,,,,,,,,278,,,,,,,,,,,,,,,,,,,,,278,,,,,,,,',
',,,,,,,,,,,278,,,,,,,,,,,,,,,,,,,,278,,,,,,,,,,,,278,,,,,,,,,,,,,,,',
',,,,,,278,,876,,,,,,,,,,,,,,773,775,780,778,,879,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',278,876,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,278,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,278' ]
        racc_goto_table = arr = ::Array.new(3118, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'6,25,34,53,27,60,95,36,36,36,154,10,98,17,17,61,61,89,65,65,13,26,60',
'74,71,71,71,76,34,64,64,153,30,92,92,20,198,184,2,30,32,41,41,41,8,32',
'32,5,99,32,22,72,72,42,71,40,40,93,193,9,6,143,25,19,19,9,77,19,149',
'77,138,138,14,23,39,198,131,98,61,23,54,6,67,6,6,6,6,6,6,6,7,55,49,188',
'133,61,94,94,32,32,32,32,48,48,48,40,14,23,58,44,108,50,5,43,146,44',
'19,19,19,19,194,43,43,148,109,171,174,134,110,174,44,171,59,111,59,112',
'113,137,114,44,44,44,115,44,116,117,118,119,66,135,46,45,141,33,73,73',
'73,146,147,68,68,150,151,152,31,21,189,155,44,76,156,9,198,44,44,159',
'149,44,160,161,9,137,162,163,73,23,164,36,165,166,169,170,172,68,23',
'173,7,32,32,32,32,1,71,176,77,77,74,177,134,71,6,27,178,175,131,179',
'180,175,61,181,175,44,182,175,194,183,44,44,44,44,44,148,18,15,187,11',
'190,22,22,191,153,25,36,22,22,95,184,133,36,197,91,36,146,3,88,87,26',
'96,58,71,193,134,74,72,97,75,70,100,71,188,101,6,102,103,104,186,186',
'186,6,6,23,144,26,53,105,143,106,107,55,34,,27,40,40,43,,55,,98,134',
'184,,,188,23,25,,74,27,,,138,138,,,,44,44,44,44,32,32,,44,44,44,44,44',
'44,144,8,144,6,5,,27,26,48,19,19,44,,54,,,,48,51,138,93,98,9,49,67,',
',,49,137,40,,137,,14,137,23,137,23,94,40,,50,23,,44,25,50,,,,44,,188',
'44,139,5,,189,99,73,189,,,189,,189,12,23,73,34,,44,6,44,,,,17,44,61',
',,65,198,39,76,72,,,74,6,6,68,64,6,74,42,36,139,40,,139,42,44,,,10,10',
'41,68,2,,,74,41,,77,153,44,44,6,55,,184,175,61,73,175,,26,,9,34,,138',
'20,,,137,,137,,137,,137,23,68,74,68,,53,6,6,,,,,,53,6,6,36,,13,,,41',
'189,,189,,189,,189,,144,,51,144,32,74,44,,,6,30,,76,137,,74,,61,,,,',
',,,,,61,144,25,,,,,,,,,10,,92,,189,,,,,,,186,186,,186,186,44,186,36',
'51,,9,,,,,12,,,,,,,142,32,23,,74,32,,51,6,,40,,98,98,,,61,12,,,,,92',
',,,,,98,139,,,139,,,139,144,139,44,,89,,,73,92,,,44,,,142,,142,,17,26',
'61,,34,65,68,44,,34,184,,,53,68,95,64,154,23,,,23,,,53,,12,,73,,34,12',
'6,,22,22,,6,,,22,22,10,10,22,,74,57,,74,,6,34,57,44,71,60,44,,,6,6,',
'44,,186,186,186,186,,,,,,,44,,,,44,,57,57,57,34,139,,139,32,139,36,139',
'6,,6,71,,,,,,,,,51,,19,74,,,,,,6,44,44,57,61,,57,44,44,,,44,,98,73,186',
'61,,98,,,,139,,,,6,,23,23,,,,,34,,51,51,,,,,,,,,57,6,6,6,,25,51,22,',
'57,68,,51,,142,,142,,44,44,,68,,,6,,,,6,,51,,,23,23,,32,,,142,23,142',
',142,,,,,34,32,,,,,19,,,44,,40,,,,44,,,,19,,44,44,98,,,,,44,24,,98,',
',,24,,23,,44,,23,23,,,,,57,,,24,23,,,,,,,,24,24,24,,24,24,24,,,,,142',
'57,142,44,142,,,44,44,,,,23,23,,68,,44,24,142,,,23,24,24,34,,24,24,',
'12,,,12,,98,6,6,6,6,,6,,,,,44,27,44,44,142,,,,61,,,,44,44,,23,57,,57',
'23,,,57,57,51,24,,36,6,,24,24,24,24,24,,,,,57,140,140,140,,,,74,,57',
'23,6,44,51,,,44,34,,61,,,6,68,,,,,,6,6,6,6,,,68,,57,,57,,,,23,,,44,',
',,51,,,6,,,,,23,,,,,23,,,23,23,12,12,,,,,,,,,,44,,24,24,24,24,,,57,24',
'24,24,24,24,24,44,,,,,44,,,44,44,,24,,,,,,,,,,56,,,,51,44,56,,,,,12',
',,,,,,51,,,,,,24,,,,,,24,,,24,56,56,56,,,140,140,140,140,51,140,,,,',
',,24,,24,,,12,24,24,,12,12,,,,,,,,56,12,,56,,24,57,,,,,,,57,24,,,,,',
',57,,,,,,,,24,24,,12,12,,,,,,,,,24,56,24,,,,140,140,140,140,56,,,,,',
',,,,,,,,,,,,,,140,,,,57,,,57,,12,,,,12,,,,,,,24,,,,,,,,,,,,,,,,,,,,',
',,12,,,,,28,,,,,,28,,,,,,,,,,,,56,,24,,,,,,,,12,,,,,,28,28,28,,,,,,56',
'12,,,,,12,,,,,,,,57,,,,,,,,,,,57,,28,,,,,,24,,,,57,57,,24,,24,,132,',
',,24,,,,,,,,24,,,,,56,,56,,,,56,56,,28,,,,,69,,,,28,,,69,,56,,,,57,57',
',,,56,,57,,,,,,,,24,,,24,,,,,,24,,,,,,,,,56,,56,24,,,,24,,,,,,,,,57',
',,57,,,,57,57,,,69,29,69,,69,69,57,29,,,,,,,,24,24,28,,,,24,24,56,,24',
',,,,,,,,,29,,57,57,,,28,,,,,,57,,,,69,,,,24,,,,,,,,,,,24,,,,29,,,,,',
',,24,24,,,57,,,,57,,,,57,,,,57,,,,,,,,28,,28,132,,,28,28,,,,29,,,,24',
',,57,132,29,24,,28,56,,,24,24,69,,56,28,,24,,,,,56,,,,,,24,,,,,,57,',
',,,,132,,,28,,28,,,,57,,,,,57,,,57,57,24,,,24,,,,24,24,,,,,,,,,24,56',
',,56,,,,,,,,,29,,,,28,,69,,29,69,132,69,,,,,24,,24,24,,,,,29,,,,24,24',
',,,,,,,,,,,,,,,69,,,69,,,,,,,,,,132,,132,,,24,,,132,24,,132,,24,,,69',
'24,,,,,,,,,,29,,29,56,,,,29,,,,,,,56,,24,,,132,,,28,,,,56,56,,28,,,29',
',,,,28,,,,,,,,,,,,24,,,,,,69,,,,69,69,,,,24,,,,,24,,,24,24,,,,56,56',
',,,,,56,,,,,,24,,28,,,28,69,,,,,,,,,,132,,132,,29,,,,,,,69,,,,,,,,,56',
',,56,,,,56,56,,,69,,,,,,56,,,,,,132,,,132,,,,,69,,,,,,,,,,,,,,,,,56',
'56,,132,,,,,,,56,,,,132,132,,69,28,,,,,,,,,,,28,,,132,,,,,,,29,,28,28',
',,56,,,,56,,,,56,,,,56,,,,,,,,,,,132,,132,,,,,,,,,,,,132,56,,,,,,,,',
'28,28,,,,,28,28,,,,,,,132,,,29,,,29,,,,56,,,,,,,,,,,69,,,,56,,,,,56',
',,56,56,28,,,28,,,,28,28,,,,,,,,,28,,,,,,,,,,,,,,,,,,,,,29,69,,35,,',
',,,,28,28,35,35,35,,,,,,28,,,,,35,35,35,,,,,,,,,,,,,,,35,,,,,,,,,,,29',
'29,28,,,,28,,,,28,,,,28,,,,,,,,,,,,,,,,,,,,,,,,,,28,,,,,,,,,,,29,29',
',,,,,29,,,,,,,,,,,,,,,28,,,,,,,,,,,,,,,28,,,,,28,,,28,28,,,,,,29,,,',
'29,29,,,,,,,,,29,,,,,,,,,,,,,,,,,,,,35,35,35,,,,35,35,,,,29,29,,,,,',
',,,29,35,,,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35',
'35,35,35,35,35,35,35,,,,,,,35,,,29,,,35,29,,35,,29,,,,,35,,35,,35,35',
',,,,,,,,,,,,,,,29,,,,,,,,,,,,,,,,,,,,,35,,,,,,,,,35,,,29,,,,,,,,,,,',
',,,29,,,,,29,,,29,29,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,35,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,35,,35,35,35,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,35,,,35,,35,,,,,,,,,,,,,,35,,,,,,,,,35',
'35,,,,,,,,,,35,,,35,,,,,,,,,,,,,,,,,,,,,,,,,,35,,,,,,,,,,,,,,,,,,,,',
'35,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,35,35,,,35,35,35,35,',
',,,35,35,,,35,35,,,,,,,,,,,,,,,,,,,,,,,,35,,,,,,,,,,,,,,,,,,,,,35,,',
',,,,,,,,,,,,,,,,,35,,,,,,,,,,,,,,,,,,,,35,,,,,,,,,,,,35,,,,,,,,,,,,',
',,,,,,,,,35,,35,,,,,,,,,,,,,,35,35,35,35,,35,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,35',
'35,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,35,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,35' ]
        racc_goto_check = arr = ::Array.new(3118, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_goto_pointer = [
   nil,   201,    36,   253,   nil,    42,    -2,    82,    39,    57,
  -315,   225,   360,  -511,  -620,  -582,   nil,     2,   220,    -3,
  -182,    94,    27,    71,   864,  -211,  -398,   -13,  1294,  1485,
  -178,   -46,   -21,    28,   -20,  2112,   -25,   nil,   nil,    47,
  -158,    12,  -213,  -370,   107,  -336,  -656,   nil,    70,    56,
    75,   286,   nil,   -34,    42,  -226,  1105,   675,  -485,  -222,
   -69,     4,   nil,   nil,    18,     7,  -261,    38,   122,  1203,
   204,    -8,  -280,   122,    -7,  -219,  -254,  -431,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   181,   -80,   -47,
   nil,   185,  -306,  -667,  -485,  -338,   186,  -333,     7,  -552,
   193,   210,   -55,   210,   206,  -443,   217,  -443,  -480,  -808,
    56,  -613,  -220,  -614,  -798,    69,  -455,  -221,  -455,  -719,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,  -764,  1045,  -468,  -715,  -510,   nil,  -522,  -478,  -275,
   201,  -507,   -83,  -598,  -378,   nil,  -545,  -734,  -769,  -824,
  -176,  -383,    98,  -306,   -15,   -94,  -491,   nil,   nil,   -95,
  -487,   -92,  -484,  -800,  -399,  -505,  -630,   nil,   nil,   110,
   108,    40,   106,   108,  -254,  -160,   115,   118,   122,  -542,
  -390,  -388,   131,  -523,  -300,   nil,  -276,  -473,  -614,  -493,
  -467,  -641,   nil,  -651,  -766,   nil,   nil,  -122,  -464 ]

racc_goto_default = [
   nil,   nil,   nil,   nil,     5,   nil,   292,     7,   345,   293,
   nil,   nil,   531,   nil,   845,   nil,   291,   nil,   nil,   nil,
    14,    15,    21,   230,   321,   nil,   nil,   744,   228,   229,
   nil,   nil,    20,   nil,   329,    24,    25,    26,    27,   nil,
   686,   nil,   nil,   nil,   310,   nil,   nil,    28,   421,    35,
   nil,   nil,    37,    40,    39,   nil,   225,   226,   594,   nil,
   132,   429,   131,   134,    78,    79,   nil,    93,    49,   284,
   nil,   422,   nil,   423,   434,   642,   496,   282,   267,    50,
    51,    52,    53,    54,    55,    56,    57,    58,   nil,   268,
    64,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   578,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   716,   837,   nil,   717,   944,   789,   549,   nil,   550,
   nil,   nil,   551,   nil,   553,   658,   nil,   nil,   nil,   559,
   nil,   nil,   nil,   754,   nil,   nil,   nil,   433,   269,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    77,    80,    82,
   nil,   nil,   nil,   nil,   nil,   609,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   829,   548,   nil,   552,   563,   565,
   566,   801,   569,   570,   802,   573,   576,   nil,   286 ]

racc_reduce_table = [
  0, 0, :racc_error,
  0, 147, :_reduce_1,
  2, 145, :_reduce_2,
  2, 146, :_reduce_3,
  1, 148, :_reduce_none,
  1, 148, :_reduce_none,
  3, 148, :_reduce_6,
  2, 148, :_reduce_none,
  1, 151, :_reduce_8,
  0, 155, :_reduce_9,
  5, 151, :_reduce_10,
  4, 154, :_reduce_11,
  2, 156, :_reduce_12,
  1, 160, :_reduce_none,
  1, 160, :_reduce_none,
  3, 160, :_reduce_15,
  2, 160, :_reduce_16,
  0, 177, :_reduce_17,
  4, 153, :_reduce_18,
  3, 153, :_reduce_19,
  3, 153, :_reduce_20,
  3, 153, :_reduce_21,
  2, 153, :_reduce_22,
  3, 153, :_reduce_23,
  3, 153, :_reduce_24,
  3, 153, :_reduce_25,
  3, 153, :_reduce_26,
  3, 153, :_reduce_27,
  4, 153, :_reduce_28,
  1, 153, :_reduce_none,
  3, 153, :_reduce_30,
  3, 153, :_reduce_31,
  6, 153, :_reduce_32,
  5, 153, :_reduce_33,
  5, 153, :_reduce_34,
  5, 153, :_reduce_35,
  5, 153, :_reduce_36,
  3, 153, :_reduce_37,
  3, 153, :_reduce_38,
  3, 153, :_reduce_39,
  1, 153, :_reduce_none,
  3, 164, :_reduce_41,
  3, 164, :_reduce_42,
  1, 176, :_reduce_none,
  3, 176, :_reduce_44,
  3, 176, :_reduce_45,
  3, 176, :_reduce_46,
  2, 176, :_reduce_47,
  1, 176, :_reduce_none,
  1, 163, :_reduce_49,
  1, 166, :_reduce_none,
  1, 166, :_reduce_none,
  1, 181, :_reduce_none,
  4, 181, :_reduce_53,
  0, 189, :_reduce_54,
  0, 190, :_reduce_55,
  6, 186, :_reduce_56,
  1, 188, :_reduce_57,
  2, 180, :_reduce_58,
  3, 180, :_reduce_59,
  4, 180, :_reduce_60,
  5, 180, :_reduce_61,
  4, 180, :_reduce_62,
  5, 180, :_reduce_63,
  2, 180, :_reduce_64,
  2, 180, :_reduce_65,
  2, 180, :_reduce_66,
  2, 180, :_reduce_67,
  2, 180, :_reduce_68,
  1, 165, :_reduce_none,
  3, 165, :_reduce_70,
  1, 194, :_reduce_none,
  3, 194, :_reduce_72,
  1, 193, :_reduce_73,
  2, 193, :_reduce_74,
  3, 193, :_reduce_75,
  5, 193, :_reduce_76,
  2, 193, :_reduce_77,
  4, 193, :_reduce_78,
  2, 193, :_reduce_79,
  4, 193, :_reduce_80,
  1, 193, :_reduce_81,
  3, 193, :_reduce_82,
  1, 197, :_reduce_none,
  3, 197, :_reduce_84,
  2, 196, :_reduce_85,
  3, 196, :_reduce_86,
  1, 199, :_reduce_87,
  3, 199, :_reduce_88,
  1, 198, :_reduce_89,
  1, 198, :_reduce_90,
  4, 198, :_reduce_91,
  3, 198, :_reduce_92,
  3, 198, :_reduce_93,
  3, 198, :_reduce_94,
  3, 198, :_reduce_95,
  2, 198, :_reduce_96,
  1, 198, :_reduce_97,
  1, 173, :_reduce_98,
  1, 173, :_reduce_99,
  4, 173, :_reduce_100,
  3, 173, :_reduce_101,
  3, 173, :_reduce_102,
  3, 173, :_reduce_103,
  3, 173, :_reduce_104,
  2, 173, :_reduce_105,
  1, 173, :_reduce_106,
  1, 202, :_reduce_107,
  1, 202, :_reduce_none,
  2, 203, :_reduce_109,
  1, 203, :_reduce_110,
  3, 203, :_reduce_111,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_115,
  1, 204, :_reduce_116,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 161, :_reduce_119,
  1, 161, :_reduce_none,
  1, 162, :_reduce_121,
  0, 210, :_reduce_122,
  4, 162, :_reduce_123,
  1, 205, :_reduce_none,
  1, 205, :_reduce_none,
  1, 205, :_reduce_none,
  1, 205, :_reduce_none,
  1, 205, :_reduce_none,
  1, 205, :_reduce_none,
  1, 205, :_reduce_none,
  1, 205, :_reduce_none,
  1, 205, :_reduce_none,
  1, 205, :_reduce_none,
  1, 205, :_reduce_none,
  1, 205, :_reduce_none,
  1, 205, :_reduce_none,
  1, 205, :_reduce_none,
  1, 205, :_reduce_none,
  1, 205, :_reduce_none,
  1, 205, :_reduce_none,
  1, 205, :_reduce_none,
  1, 205, :_reduce_none,
  1, 205, :_reduce_none,
  1, 205, :_reduce_none,
  1, 205, :_reduce_none,
  1, 205, :_reduce_none,
  1, 205, :_reduce_none,
  1, 205, :_reduce_none,
  1, 205, :_reduce_none,
  1, 205, :_reduce_none,
  1, 205, :_reduce_none,
  1, 205, :_reduce_none,
  1, 205, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  3, 179, :_reduce_195,
  5, 179, :_reduce_196,
  3, 179, :_reduce_197,
  5, 179, :_reduce_198,
  6, 179, :_reduce_199,
  5, 179, :_reduce_200,
  5, 179, :_reduce_201,
  5, 179, :_reduce_202,
  5, 179, :_reduce_203,
  4, 179, :_reduce_204,
  3, 179, :_reduce_205,
  3, 179, :_reduce_206,
  3, 179, :_reduce_207,
  3, 179, :_reduce_208,
  3, 179, :_reduce_209,
  3, 179, :_reduce_210,
  3, 179, :_reduce_211,
  3, 179, :_reduce_212,
  3, 179, :_reduce_213,
  4, 179, :_reduce_214,
  2, 179, :_reduce_215,
  2, 179, :_reduce_216,
  3, 179, :_reduce_217,
  3, 179, :_reduce_218,
  3, 179, :_reduce_219,
  3, 179, :_reduce_220,
  3, 179, :_reduce_221,
  3, 179, :_reduce_222,
  3, 179, :_reduce_223,
  3, 179, :_reduce_224,
  3, 179, :_reduce_225,
  3, 179, :_reduce_226,
  3, 179, :_reduce_227,
  3, 179, :_reduce_228,
  3, 179, :_reduce_229,
  2, 179, :_reduce_230,
  2, 179, :_reduce_231,
  3, 179, :_reduce_232,
  3, 179, :_reduce_233,
  3, 179, :_reduce_234,
  3, 179, :_reduce_235,
  3, 179, :_reduce_236,
  6, 179, :_reduce_237,
  1, 179, :_reduce_none,
  1, 213, :_reduce_239,
  1, 214, :_reduce_none,
  2, 214, :_reduce_241,
  4, 214, :_reduce_242,
  2, 214, :_reduce_243,
  3, 218, :_reduce_244,
  1, 219, :_reduce_none,
  1, 219, :_reduce_none,
  1, 169, :_reduce_247,
  1, 169, :_reduce_248,
  2, 169, :_reduce_249,
  4, 169, :_reduce_250,
  2, 169, :_reduce_251,
  1, 192, :_reduce_252,
  2, 192, :_reduce_253,
  2, 192, :_reduce_254,
  4, 192, :_reduce_255,
  1, 192, :_reduce_256,
  0, 222, :_reduce_257,
  2, 185, :_reduce_258,
  2, 221, :_reduce_259,
  2, 220, :_reduce_260,
  1, 220, :_reduce_none,
  1, 215, :_reduce_262,
  2, 215, :_reduce_263,
  3, 215, :_reduce_264,
  4, 215, :_reduce_265,
  1, 175, :_reduce_266,
  1, 175, :_reduce_267,
  3, 174, :_reduce_268,
  4, 174, :_reduce_269,
  2, 174, :_reduce_270,
  1, 212, :_reduce_none,
  1, 212, :_reduce_none,
  1, 212, :_reduce_none,
  1, 212, :_reduce_none,
  1, 212, :_reduce_none,
  1, 212, :_reduce_none,
  1, 212, :_reduce_none,
  1, 212, :_reduce_none,
  1, 212, :_reduce_none,
  1, 212, :_reduce_none,
  1, 212, :_reduce_281,
  0, 245, :_reduce_282,
  4, 212, :_reduce_283,
  2, 212, :_reduce_284,
  0, 246, :_reduce_285,
  4, 212, :_reduce_286,
  3, 212, :_reduce_287,
  3, 212, :_reduce_288,
  2, 212, :_reduce_289,
  3, 212, :_reduce_290,
  0, 247, :_reduce_291,
  4, 212, :_reduce_292,
  1, 212, :_reduce_293,
  4, 212, :_reduce_294,
  3, 212, :_reduce_295,
  1, 212, :_reduce_296,
  5, 212, :_reduce_297,
  4, 212, :_reduce_298,
  3, 212, :_reduce_299,
  2, 212, :_reduce_300,
  1, 212, :_reduce_none,
  2, 212, :_reduce_302,
  2, 212, :_reduce_303,
  6, 212, :_reduce_304,
  6, 212, :_reduce_305,
  0, 248, :_reduce_306,
  0, 249, :_reduce_307,
  7, 212, :_reduce_308,
  0, 250, :_reduce_309,
  0, 251, :_reduce_310,
  7, 212, :_reduce_311,
  5, 212, :_reduce_312,
  4, 212, :_reduce_313,
  0, 252, :_reduce_314,
  0, 253, :_reduce_315,
  9, 212, :_reduce_316,
  0, 254, :_reduce_317,
  0, 255, :_reduce_318,
  7, 212, :_reduce_319,
  0, 256, :_reduce_320,
  0, 257, :_reduce_321,
  0, 258, :_reduce_322,
  9, 212, :_reduce_323,
  0, 259, :_reduce_324,
  0, 260, :_reduce_325,
  6, 212, :_reduce_326,
  0, 261, :_reduce_327,
  6, 212, :_reduce_328,
  0, 262, :_reduce_329,
  0, 263, :_reduce_330,
  9, 212, :_reduce_331,
  1, 212, :_reduce_332,
  1, 212, :_reduce_333,
  1, 212, :_reduce_334,
  1, 212, :_reduce_335,
  1, 168, :_reduce_336,
  1, 264, :_reduce_none,
  1, 265, :_reduce_none,
  1, 266, :_reduce_none,
  1, 267, :_reduce_none,
  1, 268, :_reduce_none,
  1, 269, :_reduce_none,
  1, 270, :_reduce_none,
  1, 271, :_reduce_none,
  1, 272, :_reduce_none,
  1, 273, :_reduce_none,
  1, 274, :_reduce_none,
  1, 236, :_reduce_none,
  1, 236, :_reduce_none,
  2, 236, :_reduce_none,
  1, 238, :_reduce_none,
  1, 238, :_reduce_none,
  1, 237, :_reduce_none,
  5, 237, :_reduce_354,
  1, 158, :_reduce_none,
  2, 158, :_reduce_356,
  1, 240, :_reduce_none,
  1, 240, :_reduce_358,
  1, 275, :_reduce_none,
  3, 275, :_reduce_360,
  1, 278, :_reduce_361,
  3, 278, :_reduce_362,
  1, 277, :_reduce_363,
  4, 277, :_reduce_364,
  6, 277, :_reduce_365,
  3, 277, :_reduce_366,
  5, 277, :_reduce_367,
  2, 277, :_reduce_368,
  4, 277, :_reduce_369,
  1, 277, :_reduce_370,
  3, 277, :_reduce_371,
  4, 279, :_reduce_372,
  2, 279, :_reduce_373,
  2, 279, :_reduce_374,
  1, 279, :_reduce_375,
  2, 284, :_reduce_376,
  1, 284, :_reduce_none,
  6, 285, :_reduce_378,
  8, 285, :_reduce_379,
  4, 285, :_reduce_380,
  6, 285, :_reduce_381,
  4, 285, :_reduce_382,
  2, 285, :_reduce_383,
  6, 285, :_reduce_384,
  2, 285, :_reduce_385,
  4, 285, :_reduce_386,
  6, 285, :_reduce_387,
  2, 285, :_reduce_388,
  4, 285, :_reduce_389,
  2, 285, :_reduce_390,
  4, 285, :_reduce_391,
  1, 285, :_reduce_392,
  1, 187, :_reduce_393,
  1, 187, :_reduce_none,
  3, 289, :_reduce_395,
  1, 289, :_reduce_396,
  4, 289, :_reduce_397,
  1, 290, :_reduce_none,
  4, 290, :_reduce_399,
  1, 291, :_reduce_400,
  3, 291, :_reduce_401,
  1, 292, :_reduce_402,
  1, 292, :_reduce_none,
  0, 296, :_reduce_404,
  3, 235, :_reduce_405,
  4, 294, :_reduce_406,
  1, 294, :_reduce_407,
  3, 295, :_reduce_408,
  3, 295, :_reduce_409,
  0, 299, :_reduce_410,
  0, 300, :_reduce_411,
  6, 298, :_reduce_412,
  2, 182, :_reduce_413,
  4, 182, :_reduce_414,
  5, 182, :_reduce_415,
  5, 182, :_reduce_416,
  0, 302, :_reduce_417,
  3, 234, :_reduce_418,
  4, 234, :_reduce_419,
  4, 234, :_reduce_420,
  3, 234, :_reduce_421,
  3, 234, :_reduce_422,
  3, 234, :_reduce_423,
  2, 234, :_reduce_424,
  1, 234, :_reduce_425,
  4, 234, :_reduce_426,
  0, 303, :_reduce_427,
  0, 304, :_reduce_428,
  6, 233, :_reduce_429,
  0, 305, :_reduce_430,
  0, 306, :_reduce_431,
  6, 233, :_reduce_432,
  0, 308, :_reduce_433,
  6, 239, :_reduce_434,
  1, 307, :_reduce_none,
  1, 307, :_reduce_none,
  6, 157, :_reduce_437,
  0, 157, :_reduce_438,
  1, 309, :_reduce_439,
  1, 309, :_reduce_none,
  1, 309, :_reduce_none,
  2, 310, :_reduce_442,
  1, 310, :_reduce_none,
  2, 159, :_reduce_444,
  1, 159, :_reduce_none,
  1, 223, :_reduce_446,
  1, 223, :_reduce_447,
  1, 223, :_reduce_none,
  1, 224, :_reduce_449,
  1, 312, :_reduce_450,
  1, 312, :_reduce_none,
  2, 312, :_reduce_452,
  3, 313, :_reduce_453,
  1, 313, :_reduce_454,
  3, 225, :_reduce_455,
  3, 226, :_reduce_456,
  3, 227, :_reduce_457,
  3, 227, :_reduce_458,
  1, 317, :_reduce_459,
  3, 317, :_reduce_460,
  1, 318, :_reduce_none,
  2, 318, :_reduce_462,
  3, 229, :_reduce_463,
  3, 229, :_reduce_464,
  1, 320, :_reduce_465,
  3, 320, :_reduce_466,
  3, 228, :_reduce_467,
  3, 228, :_reduce_468,
  3, 230, :_reduce_469,
  3, 230, :_reduce_470,
  1, 321, :_reduce_471,
  3, 321, :_reduce_472,
  1, 322, :_reduce_473,
  3, 322, :_reduce_474,
  1, 314, :_reduce_475,
  2, 314, :_reduce_476,
  1, 315, :_reduce_477,
  2, 315, :_reduce_478,
  1, 316, :_reduce_479,
  2, 316, :_reduce_480,
  1, 319, :_reduce_481,
  0, 324, :_reduce_482,
  3, 319, :_reduce_483,
  0, 325, :_reduce_484,
  4, 319, :_reduce_485,
  1, 323, :_reduce_486,
  1, 323, :_reduce_487,
  1, 323, :_reduce_488,
  1, 323, :_reduce_none,
  2, 208, :_reduce_490,
  1, 208, :_reduce_491,
  1, 326, :_reduce_none,
  1, 326, :_reduce_none,
  1, 326, :_reduce_none,
  1, 326, :_reduce_none,
  3, 209, :_reduce_496,
  1, 311, :_reduce_none,
  2, 311, :_reduce_498,
  1, 211, :_reduce_none,
  1, 211, :_reduce_none,
  1, 211, :_reduce_none,
  1, 211, :_reduce_none,
  1, 200, :_reduce_none,
  1, 200, :_reduce_none,
  1, 200, :_reduce_none,
  1, 200, :_reduce_none,
  1, 200, :_reduce_none,
  1, 201, :_reduce_508,
  1, 201, :_reduce_509,
  1, 201, :_reduce_510,
  1, 201, :_reduce_511,
  1, 201, :_reduce_512,
  1, 201, :_reduce_513,
  1, 201, :_reduce_514,
  1, 231, :_reduce_515,
  1, 231, :_reduce_516,
  1, 167, :_reduce_517,
  1, 167, :_reduce_518,
  1, 172, :_reduce_519,
  1, 172, :_reduce_520,
  1, 241, :_reduce_521,
  0, 327, :_reduce_522,
  4, 241, :_reduce_523,
  2, 241, :_reduce_524,
  3, 243, :_reduce_525,
  2, 243, :_reduce_526,
  4, 328, :_reduce_527,
  2, 328, :_reduce_528,
  2, 328, :_reduce_529,
  1, 328, :_reduce_none,
  2, 330, :_reduce_531,
  0, 330, :_reduce_532,
  6, 297, :_reduce_533,
  8, 297, :_reduce_534,
  4, 297, :_reduce_535,
  6, 297, :_reduce_536,
  4, 297, :_reduce_537,
  6, 297, :_reduce_538,
  2, 297, :_reduce_539,
  4, 297, :_reduce_540,
  6, 297, :_reduce_541,
  2, 297, :_reduce_542,
  4, 297, :_reduce_543,
  2, 297, :_reduce_544,
  4, 297, :_reduce_545,
  1, 297, :_reduce_546,
  0, 297, :_reduce_547,
  1, 293, :_reduce_548,
  1, 293, :_reduce_549,
  1, 293, :_reduce_550,
  1, 293, :_reduce_551,
  1, 276, :_reduce_none,
  1, 276, :_reduce_553,
  1, 332, :_reduce_none,
  3, 332, :_reduce_555,
  1, 286, :_reduce_556,
  3, 286, :_reduce_557,
  1, 333, :_reduce_none,
  2, 334, :_reduce_559,
  1, 334, :_reduce_560,
  2, 335, :_reduce_561,
  1, 335, :_reduce_562,
  1, 280, :_reduce_none,
  3, 280, :_reduce_564,
  1, 329, :_reduce_none,
  3, 329, :_reduce_566,
  1, 336, :_reduce_none,
  1, 336, :_reduce_none,
  2, 281, :_reduce_569,
  1, 281, :_reduce_570,
  3, 337, :_reduce_571,
  3, 338, :_reduce_572,
  1, 287, :_reduce_573,
  3, 287, :_reduce_574,
  1, 331, :_reduce_575,
  3, 331, :_reduce_576,
  1, 339, :_reduce_none,
  1, 339, :_reduce_none,
  2, 288, :_reduce_579,
  1, 288, :_reduce_580,
  1, 340, :_reduce_none,
  1, 340, :_reduce_none,
  2, 283, :_reduce_583,
  2, 282, :_reduce_584,
  0, 282, :_reduce_585,
  1, 244, :_reduce_none,
  0, 341, :_reduce_587,
  4, 244, :_reduce_588,
  1, 232, :_reduce_589,
  2, 232, :_reduce_590,
  1, 217, :_reduce_none,
  3, 217, :_reduce_592,
  3, 342, :_reduce_593,
  2, 342, :_reduce_594,
  2, 342, :_reduce_595,
  1, 191, :_reduce_none,
  1, 191, :_reduce_none,
  1, 191, :_reduce_none,
  1, 184, :_reduce_none,
  1, 184, :_reduce_none,
  1, 184, :_reduce_none,
  1, 184, :_reduce_none,
  1, 301, :_reduce_none,
  1, 301, :_reduce_none,
  1, 301, :_reduce_none,
  1, 183, :_reduce_none,
  1, 183, :_reduce_none,
  1, 171, :_reduce_none,
  0, 149, :_reduce_none,
  1, 149, :_reduce_none,
  0, 178, :_reduce_none,
  1, 178, :_reduce_none,
  2, 195, :_reduce_none,
  2, 170, :_reduce_none,
  0, 216, :_reduce_none,
  1, 216, :_reduce_none,
  1, 216, :_reduce_none,
  1, 242, :_reduce_618,
  1, 242, :_reduce_none,
  1, 152, :_reduce_none,
  2, 152, :_reduce_621,
  0, 150, :_reduce_622 ]

racc_reduce_n = 623

racc_shift_n = 1049

racc_token_table = {
  false => 0,
  :error => 1,
  :kCLASS => 2,
  :kMODULE => 3,
  :kDEF => 4,
  :kUNDEF => 5,
  :kBEGIN => 6,
  :kRESCUE => 7,
  :kENSURE => 8,
  :kEND => 9,
  :kIF => 10,
  :kUNLESS => 11,
  :kTHEN => 12,
  :kELSIF => 13,
  :kELSE => 14,
  :kCASE => 15,
  :kWHEN => 16,
  :kWHILE => 17,
  :kUNTIL => 18,
  :kFOR => 19,
  :kBREAK => 20,
  :kNEXT => 21,
  :kREDO => 22,
  :kRETRY => 23,
  :kIN => 24,
  :kDO => 25,
  :kDO_COND => 26,
  :kDO_BLOCK => 27,
  :kDO_LAMBDA => 28,
  :kRETURN => 29,
  :kYIELD => 30,
  :kSUPER => 31,
  :kSELF => 32,
  :kNIL => 33,
  :kTRUE => 34,
  :kFALSE => 35,
  :kAND => 36,
  :kOR => 37,
  :kNOT => 38,
  :kIF_MOD => 39,
  :kUNLESS_MOD => 40,
  :kWHILE_MOD => 41,
  :kUNTIL_MOD => 42,
  :kRESCUE_MOD => 43,
  :kALIAS => 44,
  :kDEFINED => 45,
  :klBEGIN => 46,
  :klEND => 47,
  :k__LINE__ => 48,
  :k__FILE__ => 49,
  :k__ENCODING__ => 50,
  :tIDENTIFIER => 51,
  :tFID => 52,
  :tGVAR => 53,
  :tIVAR => 54,
  :tCONSTANT => 55,
  :tLABEL => 56,
  :tCVAR => 57,
  :tNTH_REF => 58,
  :tBACK_REF => 59,
  :tSTRING_CONTENT => 60,
  :tINTEGER => 61,
  :tFLOAT => 62,
  :tREGEXP_END => 63,
  :tUPLUS => 64,
  :tUMINUS => 65,
  :tUMINUS_NUM => 66,
  :tPOW => 67,
  :tCMP => 68,
  :tEQ => 69,
  :tEQQ => 70,
  :tNEQ => 71,
  :tGEQ => 72,
  :tLEQ => 73,
  :tANDOP => 74,
  :tOROP => 75,
  :tMATCH => 76,
  :tNMATCH => 77,
  :tDOT => 78,
  :tDOT2 => 79,
  :tDOT3 => 80,
  :tAREF => 81,
  :tASET => 82,
  :tLSHFT => 83,
  :tRSHFT => 84,
  :tCOLON2 => 85,
  :tCOLON3 => 86,
  :tOP_ASGN => 87,
  :tASSOC => 88,
  :tLPAREN => 89,
  :tLPAREN2 => 90,
  :tRPAREN => 91,
  :tLPAREN_ARG => 92,
  :tLBRACK => 93,
  :tLBRACK2 => 94,
  :tRBRACK => 95,
  :tLBRACE => 96,
  :tLBRACE_ARG => 97,
  :tSTAR => 98,
  :tSTAR2 => 99,
  :tAMPER => 100,
  :tAMPER2 => 101,
  :tTILDE => 102,
  :tPERCENT => 103,
  :tDIVIDE => 104,
  :tPLUS => 105,
  :tMINUS => 106,
  :tLT => 107,
  :tGT => 108,
  :tPIPE => 109,
  :tBANG => 110,
  :tCARET => 111,
  :tLCURLY => 112,
  :tRCURLY => 113,
  :tBACK_REF2 => 114,
  :tSYMBEG => 115,
  :tSTRING_BEG => 116,
  :tXSTRING_BEG => 117,
  :tREGEXP_BEG => 118,
  :tWORDS_BEG => 119,
  :tQWORDS_BEG => 120,
  :tSTRING_DBEG => 121,
  :tSTRING_DVAR => 122,
  :tSTRING_END => 123,
  :tSTRING => 124,
  :tSYMBOL => 125,
  :tNL => 126,
  :tEH => 127,
  :tCOLON => 128,
  :tCOMMA => 129,
  :tSPACE => 130,
  :tSEMI => 131,
  :tLAMBDA => 132,
  :tLAMBEG => 133,
  :tDSTAR => 134,
  :tCHAR => 135,
  :tSYMBOLS_BEG => 136,
  :tQSYMBOLS_BEG => 137,
  :tSTRING_DEND => 138,
  :tUBANG => 139,
  :tRATIONAL => 140,
  :tIMAGINARY => 141,
  :tEQL => 142,
  :tLOWEST => 143 }

racc_nt_base = 144

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "kCLASS",
  "kMODULE",
  "kDEF",
  "kUNDEF",
  "kBEGIN",
  "kRESCUE",
  "kENSURE",
  "kEND",
  "kIF",
  "kUNLESS",
  "kTHEN",
  "kELSIF",
  "kELSE",
  "kCASE",
  "kWHEN",
  "kWHILE",
  "kUNTIL",
  "kFOR",
  "kBREAK",
  "kNEXT",
  "kREDO",
  "kRETRY",
  "kIN",
  "kDO",
  "kDO_COND",
  "kDO_BLOCK",
  "kDO_LAMBDA",
  "kRETURN",
  "kYIELD",
  "kSUPER",
  "kSELF",
  "kNIL",
  "kTRUE",
  "kFALSE",
  "kAND",
  "kOR",
  "kNOT",
  "kIF_MOD",
  "kUNLESS_MOD",
  "kWHILE_MOD",
  "kUNTIL_MOD",
  "kRESCUE_MOD",
  "kALIAS",
  "kDEFINED",
  "klBEGIN",
  "klEND",
  "k__LINE__",
  "k__FILE__",
  "k__ENCODING__",
  "tIDENTIFIER",
  "tFID",
  "tGVAR",
  "tIVAR",
  "tCONSTANT",
  "tLABEL",
  "tCVAR",
  "tNTH_REF",
  "tBACK_REF",
  "tSTRING_CONTENT",
  "tINTEGER",
  "tFLOAT",
  "tREGEXP_END",
  "tUPLUS",
  "tUMINUS",
  "tUMINUS_NUM",
  "tPOW",
  "tCMP",
  "tEQ",
  "tEQQ",
  "tNEQ",
  "tGEQ",
  "tLEQ",
  "tANDOP",
  "tOROP",
  "tMATCH",
  "tNMATCH",
  "tDOT",
  "tDOT2",
  "tDOT3",
  "tAREF",
  "tASET",
  "tLSHFT",
  "tRSHFT",
  "tCOLON2",
  "tCOLON3",
  "tOP_ASGN",
  "tASSOC",
  "tLPAREN",
  "tLPAREN2",
  "tRPAREN",
  "tLPAREN_ARG",
  "tLBRACK",
  "tLBRACK2",
  "tRBRACK",
  "tLBRACE",
  "tLBRACE_ARG",
  "tSTAR",
  "tSTAR2",
  "tAMPER",
  "tAMPER2",
  "tTILDE",
  "tPERCENT",
  "tDIVIDE",
  "tPLUS",
  "tMINUS",
  "tLT",
  "tGT",
  "tPIPE",
  "tBANG",
  "tCARET",
  "tLCURLY",
  "tRCURLY",
  "tBACK_REF2",
  "tSYMBEG",
  "tSTRING_BEG",
  "tXSTRING_BEG",
  "tREGEXP_BEG",
  "tWORDS_BEG",
  "tQWORDS_BEG",
  "tSTRING_DBEG",
  "tSTRING_DVAR",
  "tSTRING_END",
  "tSTRING",
  "tSYMBOL",
  "tNL",
  "tEH",
  "tCOLON",
  "tCOMMA",
  "tSPACE",
  "tSEMI",
  "tLAMBDA",
  "tLAMBEG",
  "tDSTAR",
  "tCHAR",
  "tSYMBOLS_BEG",
  "tQSYMBOLS_BEG",
  "tSTRING_DEND",
  "tUBANG",
  "tRATIONAL",
  "tIMAGINARY",
  "tEQL",
  "tLOWEST",
  "$start",
  "program",
  "top_compstmt",
  "@1",
  "top_stmts",
  "opt_terms",
  "none",
  "top_stmt",
  "terms",
  "stmt",
  "bodystmt",
  "@2",
  "compstmt",
  "opt_rescue",
  "opt_else",
  "opt_ensure",
  "stmts",
  "fitem",
  "undef_list",
  "expr_value",
  "command_asgn",
  "mlhs",
  "command_call",
  "var_lhs",
  "primary_value",
  "opt_call_args",
  "rbracket",
  "call_op",
  "backref",
  "lhs",
  "mrhs",
  "mrhs_arg",
  "expr",
  "@3",
  "opt_nl",
  "arg",
  "command",
  "block_command",
  "block_call",
  "dot_or_colon",
  "operation2",
  "command_args",
  "cmd_brace_block",
  "opt_block_param",
  "fcall",
  "@4",
  "@5",
  "operation",
  "call_args",
  "mlhs_basic",
  "mlhs_inner",
  "rparen",
  "mlhs_head",
  "mlhs_item",
  "mlhs_node",
  "mlhs_post",
  "user_variable",
  "keyword_variable",
  "cname",
  "cpath",
  "fname",
  "op",
  "reswords",
  "fsym",
  "symbol",
  "dsym",
  "@6",
  "simple_numeric",
  "primary",
  "arg_value",
  "aref_args",
  "args",
  "trailer",
  "assocs",
  "paren_args",
  "opt_paren_args",
  "opt_block_arg",
  "block_arg",
  "@7",
  "literal",
  "strings",
  "xstring",
  "regexp",
  "words",
  "qwords",
  "symbols",
  "qsymbols",
  "var_ref",
  "assoc_list",
  "brace_block",
  "method_call",
  "lambda",
  "then",
  "if_tail",
  "do",
  "case_body",
  "for_var",
  "superclass",
  "term",
  "f_arglist",
  "singleton",
  "@8",
  "@9",
  "@10",
  "@11",
  "@12",
  "@13",
  "@14",
  "@15",
  "@16",
  "@17",
  "@18",
  "@19",
  "@20",
  "@21",
  "@22",
  "@23",
  "@24",
  "@25",
  "@26",
  "k_begin",
  "k_if",
  "k_unless",
  "k_while",
  "k_until",
  "k_case",
  "k_for",
  "k_class",
  "k_module",
  "k_def",
  "k_end",
  "f_marg",
  "f_norm_arg",
  "f_margs",
  "f_marg_list",
  "block_args_tail",
  "f_block_kwarg",
  "f_kwrest",
  "opt_f_block_arg",
  "f_block_arg",
  "opt_block_args_tail",
  "block_param",
  "f_arg",
  "f_block_optarg",
  "f_rest_arg",
  "block_param_def",
  "opt_bv_decl",
  "bv_decls",
  "bvar",
  "f_bad_arg",
  "f_larglist",
  "lambda_body",
  "@27",
  "f_args",
  "do_block",
  "@28",
  "@29",
  "operation3",
  "@30",
  "@31",
  "@32",
  "@33",
  "@34",
  "cases",
  "@35",
  "exc_list",
  "exc_var",
  "numeric",
  "string",
  "string1",
  "string_contents",
  "xstring_contents",
  "regexp_contents",
  "word_list",
  "word",
  "string_content",
  "symbol_list",
  "qword_list",
  "qsym_list",
  "string_dvar",
  "@36",
  "@37",
  "sym",
  "@38",
  "args_tail",
  "f_kwarg",
  "opt_args_tail",
  "f_optarg",
  "f_arg_item",
  "f_label",
  "f_kw",
  "f_block_kw",
  "kwrest_mark",
  "f_opt",
  "f_block_opt",
  "restarg_mark",
  "blkarg_mark",
  "@39",
  "assoc" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

def _reduce_1(val, _values, result)
                      self.lexer.lex_state = :expr_beg
                    
    result
end

def _reduce_2(val, _values, result)
                      result = new_compstmt val
                    
    result
end

def _reduce_3(val, _values, result)
                      result = val[0]
                    
    result
end

# reduce 4 omitted

# reduce 5 omitted

def _reduce_6(val, _values, result)
                      result = self.block_append val[0], val[2]
                    
    result
end

# reduce 7 omitted

def _reduce_8(val, _values, result)
                      result = val[0]

                      # TODO: remove once I have more confidence this is fixed
                      # result.each_of_type :call_args do |s|
                      #   debug20 666, s, result
                      # end
                    
    result
end

def _reduce_9(val, _values, result)
                      if (self.in_def || self.in_single > 0) then
                        debug20 1
                        yyerror "BEGIN in method"
                      end
                      self.env.extend
                    
    result
end

def _reduce_10(val, _values, result)
                      result = new_iter s(:preexe), nil, val[3]
                    
    result
end

def _reduce_11(val, _values, result)
                      result = new_body val
                    
    result
end

def _reduce_12(val, _values, result)
                      result = new_compstmt val
                    
    result
end

# reduce 13 omitted

# reduce 14 omitted

def _reduce_15(val, _values, result)
                      result = self.block_append val[0], val[2]
                    
    result
end

def _reduce_16(val, _values, result)
                      result = val[1]
                      debug20 2, val, result
                    
    result
end

def _reduce_17(val, _values, result)
                      lexer.lex_state = :expr_fname
                      result = self.lexer.lineno
                    
    result
end

def _reduce_18(val, _values, result)
                      result = s(:alias, val[1], val[3]).line(val[2])
                    
    result
end

def _reduce_19(val, _values, result)
                      result = s(:valias, val[1].to_sym, val[2].to_sym)
                    
    result
end

def _reduce_20(val, _values, result)
                      result = s(:valias, val[1].to_sym, :"$#{val[2]}")
                    
    result
end

def _reduce_21(val, _values, result)
                      yyerror "can't make alias for the number variables"
                    
    result
end

def _reduce_22(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_23(val, _values, result)
                      result = new_if val[2], val[0], nil
                    
    result
end

def _reduce_24(val, _values, result)
                      result = new_if val[2], nil, val[0]
                    
    result
end

def _reduce_25(val, _values, result)
                      result = new_while val[0], val[2], true
                    
    result
end

def _reduce_26(val, _values, result)
                      result = new_until val[0], val[2], true
                    
    result
end

def _reduce_27(val, _values, result)
                      result = s(:rescue, val[0], new_resbody(s(:array), val[2]))
                    
    result
end

def _reduce_28(val, _values, result)
                      if (self.in_def || self.in_single > 0) then
                        debug20 3
                        yyerror "END in method; use at_exit"
                      end
                      result = new_iter s(:postexe), 0, val[2]
                    
    result
end

# reduce 29 omitted

def _reduce_30(val, _values, result)
                      result = new_masgn val[0], val[2], :wrap
                    
    result
end

def _reduce_31(val, _values, result)
                      result = new_op_asgn val
                    
    result
end

def _reduce_32(val, _values, result)
                      result = s(:op_asgn1, val[0], val[2], val[4].to_sym, val[5])
                    
    result
end

def _reduce_33(val, _values, result)
                      result = s(:op_asgn, val[0], val[4], val[2].to_sym, val[3].to_sym)
                      if val[1] == '&.'
                        result[0] = :safe_op_asgn
                      end
                      result.line = val[0].line
                    
    result
end

def _reduce_34(val, _values, result)
                      result = s(:op_asgn, val[0], val[4], val[2].to_sym, val[3].to_sym)
                      if val[1] == '&.'
                        result[0] = :safe_op_asgn
                      end
                      result.line = val[0].line
                    
    result
end

def _reduce_35(val, _values, result)
                      result = s(:op_asgn, val[0], val[4], val[2], val[3])
                      debug20 4, val, result
                    
    result
end

def _reduce_36(val, _values, result)
                      result = s(:op_asgn, val[0], val[4], val[2], val[3])
                      debug20 5, val, result
                    
    result
end

def _reduce_37(val, _values, result)
                      self.backref_assign_error val[0]
                    
    result
end

def _reduce_38(val, _values, result)
                      result = new_assign val[0], s(:svalue, val[2])
                    
    result
end

def _reduce_39(val, _values, result)
                      result = new_masgn val[0], val[2]
                    
    result
end

# reduce 40 omitted

def _reduce_41(val, _values, result)
                      result = new_assign val[0], val[2]
                    
    result
end

def _reduce_42(val, _values, result)
                      result = new_assign val[0], val[2]
                    
    result
end

# reduce 43 omitted

def _reduce_44(val, _values, result)
                      result = logical_op :and, val[0], val[2]
                    
    result
end

def _reduce_45(val, _values, result)
                      result = logical_op :or, val[0], val[2]
                    
    result
end

def _reduce_46(val, _values, result)
                      result = s(:call, val[2], :"!")
                    
    result
end

def _reduce_47(val, _values, result)
                      result = s(:call, val[1], :"!")
                    
    result
end

# reduce 48 omitted

def _reduce_49(val, _values, result)
                      result = value_expr(val[0])
                    
    result
end

# reduce 50 omitted

# reduce 51 omitted

# reduce 52 omitted

def _reduce_53(val, _values, result)
                      result = new_call val[0], val[2].to_sym, val[3]
                    
    result
end

def _reduce_54(val, _values, result)
                      self.env.extend(:dynamic)
                      result = self.lexer.lineno
                    
    result
end

def _reduce_55(val, _values, result)
                      result = nil # self.env.dynamic.keys
                    
    result
end

def _reduce_56(val, _values, result)
                      result = new_iter nil, val[2], val[4]
                      result.line = val[1]

                      self.env.unextend
                    
    result
end

def _reduce_57(val, _values, result)
                      result = new_call nil, val[0].to_sym
                    
    result
end

def _reduce_58(val, _values, result)
                      result = val[0].concat val[1][1..-1] # REFACTOR pattern
                    
    result
end

def _reduce_59(val, _values, result)
                      result = val[0].concat val[1][1..-1]
                      if val[2] then
                        block_dup_check result, val[2]

                        result, operation = val[2], result
                        result.insert 1, operation
                      end
                    
    result
end

def _reduce_60(val, _values, result)
                      result = new_call val[0], val[2].to_sym, val[3], val[1]
                    
    result
end

def _reduce_61(val, _values, result)
                      recv, _, msg, args, block = val
                      call = new_call recv, msg.to_sym, args, val[1]

                      block_dup_check call, block

                      block.insert 1, call
                      result = block
                    
    result
end

def _reduce_62(val, _values, result)
                      result = new_call val[0], val[2].to_sym, val[3]
                    
    result
end

def _reduce_63(val, _values, result)
                      recv, _, msg, args, block = val
                      call = new_call recv, msg.to_sym, args

                      block_dup_check call, block

                      block.insert 1, call
                      result = block
                    
    result
end

def _reduce_64(val, _values, result)
                      result = new_super val[1]
                    
    result
end

def _reduce_65(val, _values, result)
                      result = new_yield val[1]
                    
    result
end

def _reduce_66(val, _values, result)
                      line = val[0].last
                      result = s(:return, ret_args(val[1])).line(line)
                    
    result
end

def _reduce_67(val, _values, result)
                      line = val[0].last
                      result = s(:break, ret_args(val[1])).line(line)
                    
    result
end

def _reduce_68(val, _values, result)
                      line = val[0].last
                      result = s(:next, ret_args(val[1])).line(line)
                    
    result
end

# reduce 69 omitted

def _reduce_70(val, _values, result)
                      result = val[1]
                    
    result
end

# reduce 71 omitted

def _reduce_72(val, _values, result)
                      result = s(:masgn, s(:array, val[1]))
                    
    result
end

def _reduce_73(val, _values, result)
                      result = s(:masgn, val[0])
                    
    result
end

def _reduce_74(val, _values, result)
                      result = s(:masgn, val[0] << val[1].compact)
                    
    result
end

def _reduce_75(val, _values, result)
                      result = s(:masgn, val[0] << s(:splat, val[2]))
                    
    result
end

def _reduce_76(val, _values, result)
                      ary1, _, splat, _, ary2 = val

                      result = list_append ary1, s(:splat, splat)
                      result.concat ary2[1..-1]
                      result = s(:masgn, result)
                    
    result
end

def _reduce_77(val, _values, result)
                      result = s(:masgn, val[0] << s(:splat))
                    
    result
end

def _reduce_78(val, _values, result)
                      ary = list_append val[0], s(:splat)
                      ary.concat val[3][1..-1]
                      result = s(:masgn, ary)
                    
    result
end

def _reduce_79(val, _values, result)
                      result = s(:masgn, s(:array, s(:splat, val[1])))
                    
    result
end

def _reduce_80(val, _values, result)
                      ary = s(:array, s(:splat, val[1]))
                      ary.concat val[3][1..-1]
                      result = s(:masgn, ary)
                    
    result
end

def _reduce_81(val, _values, result)
                      result = s(:masgn, s(:array, s(:splat)))
                    
    result
end

def _reduce_82(val, _values, result)
                      result = s(:masgn, s(:array, s(:splat), *val[2][1..-1]))
                    
    result
end

# reduce 83 omitted

def _reduce_84(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_85(val, _values, result)
                      result = s(:array, val[0])
                    
    result
end

def _reduce_86(val, _values, result)
                      result = val[0] << val[1].compact
                    
    result
end

def _reduce_87(val, _values, result)
                      result = s(:array, val[0])
                    
    result
end

def _reduce_88(val, _values, result)
                      result = list_append val[0], val[2]
                    
    result
end

def _reduce_89(val, _values, result)
                      result = self.assignable val[0]
                    
    result
end

def _reduce_90(val, _values, result)
                      result = self.assignable val[0]
                    
    result
end

def _reduce_91(val, _values, result)
                      result = self.aryset val[0], val[2]
                    
    result
end

def _reduce_92(val, _values, result)
                      result = new_attrasgn val[0], val[2], val[1]
                    
    result
end

def _reduce_93(val, _values, result)
                      result = s(:attrasgn, val[0], :"#{val[2]}=")
                    
    result
end

def _reduce_94(val, _values, result)
                      result = new_attrasgn val[0], val[2], val[1]
                    
    result
end

def _reduce_95(val, _values, result)
                      if (self.in_def || self.in_single > 0) then
                        debug20 7
                        yyerror "dynamic constant assignment"
                      end

                      result = s(:const, s(:colon2, val[0], val[2].to_sym), nil)
                    
    result
end

def _reduce_96(val, _values, result)
                      if (self.in_def || self.in_single > 0) then
                        debug20 8
                        yyerror "dynamic constant assignment"
                      end

                      result = s(:const, nil, s(:colon3, val[1].to_sym))
                    
    result
end

def _reduce_97(val, _values, result)
                      self.backref_assign_error val[0]
                    
    result
end

def _reduce_98(val, _values, result)
                      result = self.assignable val[0]
                    
    result
end

def _reduce_99(val, _values, result)
                      result = self.assignable val[0]
                      debug20 9, val, result
                    
    result
end

def _reduce_100(val, _values, result)
                      result = self.aryset val[0], val[2]
                    
    result
end

def _reduce_101(val, _values, result)
                      result = new_attrasgn val[0], val[2], val[1]
                    
    result
end

def _reduce_102(val, _values, result)
                      result = s(:attrasgn, val[0], :"#{val[2]}=")
                    
    result
end

def _reduce_103(val, _values, result)
                      result = new_attrasgn val[0], val[2], val[1]
                    
    result
end

def _reduce_104(val, _values, result)
                      if (self.in_def || self.in_single > 0) then
                        debug20 10
                        yyerror "dynamic constant assignment"
                      end

                      result = s(:const, s(:colon2, val[0], val[2].to_sym))
                    
    result
end

def _reduce_105(val, _values, result)
                      if (self.in_def || self.in_single > 0) then
                        debug20 11
                        yyerror "dynamic constant assignment"
                      end

                      result = s(:const, s(:colon3, val[1].to_sym))
                    
    result
end

def _reduce_106(val, _values, result)
                      self.backref_assign_error val[0]
                    
    result
end

def _reduce_107(val, _values, result)
                      yyerror "class/module name must be CONSTANT"
                    
    result
end

# reduce 108 omitted

def _reduce_109(val, _values, result)
                      result = s(:colon3, val[1].to_sym)
                    
    result
end

def _reduce_110(val, _values, result)
                      result = val[0].to_sym
                    
    result
end

def _reduce_111(val, _values, result)
                      result = s(:colon2, val[0], val[2].to_sym)
                    
    result
end

# reduce 112 omitted

# reduce 113 omitted

# reduce 114 omitted

def _reduce_115(val, _values, result)
                      lexer.lex_state = :expr_end
                      result = val[0]
                    
    result
end

def _reduce_116(val, _values, result)
                      lexer.lex_state = :expr_end
                      result = val[0]
                    
    result
end

# reduce 117 omitted

# reduce 118 omitted

def _reduce_119(val, _values, result)
                      result = s(:lit, val[0].to_sym)
                    
    result
end

# reduce 120 omitted

def _reduce_121(val, _values, result)
                      result = new_undef val[0]
                    
    result
end

def _reduce_122(val, _values, result)
                      lexer.lex_state = :expr_fname
                    
    result
end

def _reduce_123(val, _values, result)
                      result = new_undef val[0], val[3]
                    
    result
end

# reduce 124 omitted

# reduce 125 omitted

# reduce 126 omitted

# reduce 127 omitted

# reduce 128 omitted

# reduce 129 omitted

# reduce 130 omitted

# reduce 131 omitted

# reduce 132 omitted

# reduce 133 omitted

# reduce 134 omitted

# reduce 135 omitted

# reduce 136 omitted

# reduce 137 omitted

# reduce 138 omitted

# reduce 139 omitted

# reduce 140 omitted

# reduce 141 omitted

# reduce 142 omitted

# reduce 143 omitted

# reduce 144 omitted

# reduce 145 omitted

# reduce 146 omitted

# reduce 147 omitted

# reduce 148 omitted

# reduce 149 omitted

# reduce 150 omitted

# reduce 151 omitted

# reduce 152 omitted

# reduce 153 omitted

# reduce 154 omitted

# reduce 155 omitted

# reduce 156 omitted

# reduce 157 omitted

# reduce 158 omitted

# reduce 159 omitted

# reduce 160 omitted

# reduce 161 omitted

# reduce 162 omitted

# reduce 163 omitted

# reduce 164 omitted

# reduce 165 omitted

# reduce 166 omitted

# reduce 167 omitted

# reduce 168 omitted

# reduce 169 omitted

# reduce 170 omitted

# reduce 171 omitted

# reduce 172 omitted

# reduce 173 omitted

# reduce 174 omitted

# reduce 175 omitted

# reduce 176 omitted

# reduce 177 omitted

# reduce 178 omitted

# reduce 179 omitted

# reduce 180 omitted

# reduce 181 omitted

# reduce 182 omitted

# reduce 183 omitted

# reduce 184 omitted

# reduce 185 omitted

# reduce 186 omitted

# reduce 187 omitted

# reduce 188 omitted

# reduce 189 omitted

# reduce 190 omitted

# reduce 191 omitted

# reduce 192 omitted

# reduce 193 omitted

# reduce 194 omitted

def _reduce_195(val, _values, result)
                      result = new_assign val[0], val[2]
                    
    result
end

def _reduce_196(val, _values, result)
                      result = new_assign val[0], s(:rescue, val[2], new_resbody(s(:array), val[4]))
                    
    result
end

def _reduce_197(val, _values, result)
                      result = new_op_asgn val
                    
    result
end

def _reduce_198(val, _values, result)
                      result = new_op_asgn val
                      result = s(:rescue, result, new_resbody(s(:array), val[4]))
                    
    result
end

def _reduce_199(val, _values, result)
                      val[2][0] = :arglist if val[2]
                      result = s(:op_asgn1, val[0], val[2], val[4].to_sym, val[5])
                    
    result
end

def _reduce_200(val, _values, result)
                      result = new_op_asgn2 val
                    
    result
end

def _reduce_201(val, _values, result)
                      result = new_op_asgn2 val
                    
    result
end

def _reduce_202(val, _values, result)
                      result = s(:op_asgn, val[0], val[4], val[2].to_sym, val[3].to_sym)
                    
    result
end

def _reduce_203(val, _values, result)
                      yyerror "constant re-assignment"
                    
    result
end

def _reduce_204(val, _values, result)
                      yyerror "constant re-assignment"
                    
    result
end

def _reduce_205(val, _values, result)
                      self.backref_assign_error val[0]
                    
    result
end

def _reduce_206(val, _values, result)
                      v1, v2 = val[0], val[2]
                      if v1.node_type == :lit and v2.node_type == :lit and Integer === v1.last and Integer === v2.last then
                        result = s(:lit, (v1.last)..(v2.last))
                      else
                        result = s(:dot2, v1, v2)
                      end
                    
    result
end

def _reduce_207(val, _values, result)
                      v1, v2 = val[0], val[2]
                      if v1.node_type == :lit and v2.node_type == :lit and Integer === v1.last and Integer === v2.last then
                        result = s(:lit, (v1.last)...(v2.last))
                      else
                        result = s(:dot3, v1, v2)
                      end
                    
    result
end

def _reduce_208(val, _values, result)
                      result = new_call val[0], :+, argl(val[2])
                    
    result
end

def _reduce_209(val, _values, result)
                      result = new_call val[0], :-, argl(val[2])
                    
    result
end

def _reduce_210(val, _values, result)
                      result = new_call val[0], :*, argl(val[2])
                    
    result
end

def _reduce_211(val, _values, result)
                      result = new_call val[0], :"/", argl(val[2])
                    
    result
end

def _reduce_212(val, _values, result)
                      result = new_call val[0], :"%", argl(val[2])
                    
    result
end

def _reduce_213(val, _values, result)
                      result = new_call val[0], :**, argl(val[2])
                    
    result
end

def _reduce_214(val, _values, result)
                      result = new_call(new_call(s(:lit, val[1]), :"**", argl(val[3])), :"-@")
                    
    result
end

def _reduce_215(val, _values, result)
                      result = new_call val[1], :"+@"
                    
    result
end

def _reduce_216(val, _values, result)
                      result = new_call val[1], :"-@"
                    
    result
end

def _reduce_217(val, _values, result)
                      result = new_call val[0], :"|", argl(val[2])
                    
    result
end

def _reduce_218(val, _values, result)
                      result = new_call val[0], :"^", argl(val[2])
                    
    result
end

def _reduce_219(val, _values, result)
                      result = new_call val[0], :"&", argl(val[2])
                    
    result
end

def _reduce_220(val, _values, result)
                      result = new_call val[0], :"<=>", argl(val[2])
                    
    result
end

def _reduce_221(val, _values, result)
                      result = new_call val[0], :">", argl(val[2])
                    
    result
end

def _reduce_222(val, _values, result)
                      result = new_call val[0], :">=", argl(val[2])
                    
    result
end

def _reduce_223(val, _values, result)
                      result = new_call val[0], :"<", argl(val[2])
                    
    result
end

def _reduce_224(val, _values, result)
                      result = new_call val[0], :"<=", argl(val[2])
                    
    result
end

def _reduce_225(val, _values, result)
                      result = new_call val[0], :"==", argl(val[2])
                    
    result
end

def _reduce_226(val, _values, result)
                      result = new_call val[0], :"===", argl(val[2])
                    
    result
end

def _reduce_227(val, _values, result)
                      result = new_call val[0], :"!=", argl(val[2])
                    
    result
end

def _reduce_228(val, _values, result)
                      result = new_match val[0], val[2]
                    
    result
end

def _reduce_229(val, _values, result)
                      result = s(:not, new_match(val[0], val[2]))
                    
    result
end

def _reduce_230(val, _values, result)
                      result = new_call val[1], :"!"
                    
    result
end

def _reduce_231(val, _values, result)
                      result = new_call value_expr(val[1]), :"~"
                    
    result
end

def _reduce_232(val, _values, result)
                      val[0] = value_expr val[0]
                      val[2] = value_expr val[2]
                      result = new_call val[0], :"\<\<", argl(val[2])
                    
    result
end

def _reduce_233(val, _values, result)
                      val[0] = value_expr val[0]
                      val[2] = value_expr val[2]
                      result = new_call val[0], :">>", argl(val[2])
                    
    result
end

def _reduce_234(val, _values, result)
                      result = logical_op :and, val[0], val[2]
                    
    result
end

def _reduce_235(val, _values, result)
                      result = logical_op :or, val[0], val[2]
                    
    result
end

def _reduce_236(val, _values, result)
                      result = s(:defined, val[2])
                    
    result
end

def _reduce_237(val, _values, result)
                      result = s(:if, val[0], val[2], val[5])
                    
    result
end

# reduce 238 omitted

def _reduce_239(val, _values, result)
                      result = value_expr(val[0])
                    
    result
end

# reduce 240 omitted

def _reduce_241(val, _values, result)
                      result = args [val[0]]
                    
    result
end

def _reduce_242(val, _values, result)
                      result = args [val[0], array_to_hash(val[2])]
                    
    result
end

def _reduce_243(val, _values, result)
                      result = args [array_to_hash(val[0])]
                    
    result
end

def _reduce_244(val, _values, result)
                      result = val[1]
                    
    result
end

# reduce 245 omitted

# reduce 246 omitted

def _reduce_247(val, _values, result)
                      result = val[0]
                    
    result
end

def _reduce_248(val, _values, result)
                      result = val[0]
                    
    result
end

def _reduce_249(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_250(val, _values, result)
                      result = args [val[0], array_to_hash(val[2])]
                    
    result
end

def _reduce_251(val, _values, result)
                      result = args [array_to_hash(val[0])]
                    
    result
end

def _reduce_252(val, _values, result)
                      warning "parenthesize argument(s) for future version"
                      result = call_args val
                    
    result
end

def _reduce_253(val, _values, result)
                      result = call_args val
                      result = self.arg_blk_pass val[0], val[1]
                    
    result
end

def _reduce_254(val, _values, result)
                      result = call_args [array_to_hash(val[0])]
                      result = self.arg_blk_pass result, val[1]
                    
    result
end

def _reduce_255(val, _values, result)
                      result = call_args [val[0], array_to_hash(val[2])]
                      result = self.arg_blk_pass result, val[3]
                    
    result
end

def _reduce_256(val, _values, result)
                      result = call_args val
                    
    result
end

def _reduce_257(val, _values, result)
                      result = lexer.cmdarg.stack.dup # TODO: smell?
                      lexer.cmdarg.push true
                    
    result
end

def _reduce_258(val, _values, result)
                      lexer.cmdarg.stack.replace val[0]
                      result = val[1]
                    
    result
end

def _reduce_259(val, _values, result)
                      result = s(:block_pass, val[1])
                    
    result
end

def _reduce_260(val, _values, result)
                      result = val[1]
                    
    result
end

# reduce 261 omitted

def _reduce_262(val, _values, result)
                      result = s(:array, val[0])
                    
    result
end

def _reduce_263(val, _values, result)
                      result = s(:array, s(:splat, val[1]))
                    
    result
end

def _reduce_264(val, _values, result)
                      result = self.list_append val[0], val[2]
                    
    result
end

def _reduce_265(val, _values, result)
                      result = self.list_append val[0], s(:splat, val[3])
                    
    result
end

def _reduce_266(val, _values, result)
                      result = new_masgn_arg val[0]
                    
    result
end

def _reduce_267(val, _values, result)
                      result = new_masgn_arg val[0], :wrap
                    
    result
end

def _reduce_268(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_269(val, _values, result)
                      result = self.arg_concat val[0], val[3]
                    
    result
end

def _reduce_270(val, _values, result)
                      result = s(:splat, val[1])
                    
    result
end

# reduce 271 omitted

# reduce 272 omitted

# reduce 273 omitted

# reduce 274 omitted

# reduce 275 omitted

# reduce 276 omitted

# reduce 277 omitted

# reduce 278 omitted

# reduce 279 omitted

# reduce 280 omitted

def _reduce_281(val, _values, result)
                      result = new_call nil, val[0].to_sym
                    
    result
end

def _reduce_282(val, _values, result)
                      result = self.lexer.lineno
                    
    result
end

def _reduce_283(val, _values, result)
                      unless val[2] then
                        result = s(:nil)
                      else
                        result = s(:begin, val[2])
                      end

                      result.line = val[1]
                    
    result
end

def _reduce_284(val, _values, result)
                      debug20 13, val, result
                    
    result
end

def _reduce_285(val, _values, result)
                      lexer.lex_state = :expr_endarg
                    
    result
end

def _reduce_286(val, _values, result)
                      warning "(...) interpreted as grouped expression"
                      result = val[1]
                    
    result
end

def _reduce_287(val, _values, result)
                      result = val[1] || s(:nil)
                      result.paren = true
                    
    result
end

def _reduce_288(val, _values, result)
                      result = s(:colon2, val[0], val[2].to_sym)
                    
    result
end

def _reduce_289(val, _values, result)
                      result = s(:colon3, val[1].to_sym)
                    
    result
end

def _reduce_290(val, _values, result)
                      result = val[1] || s(:array)
                      result[0] = :array # aref_args is :args
                    
    result
end

def _reduce_291(val, _values, result)
                      result = self.lexer.lineno
                    
    result
end

def _reduce_292(val, _values, result)
                      result = new_hash val
                    
    result
end

def _reduce_293(val, _values, result)
                      result = s(:return)
                    
    result
end

def _reduce_294(val, _values, result)
                      result = new_yield val[2]
                    
    result
end

def _reduce_295(val, _values, result)
                      result = new_yield
                    
    result
end

def _reduce_296(val, _values, result)
                      result = new_yield
                    
    result
end

def _reduce_297(val, _values, result)
                      result = s(:defined, val[3])
                    
    result
end

def _reduce_298(val, _values, result)
                      result = s(:call, val[2], :"!")
                    
    result
end

def _reduce_299(val, _values, result)
                      debug20 14, val, result
                    
    result
end

def _reduce_300(val, _values, result)
                      oper, iter = val[0], val[1]
                      call = oper # FIX
                      iter.insert 1, call
                      result = iter
                      call.line = iter.line
                    
    result
end

# reduce 301 omitted

def _reduce_302(val, _values, result)
                      call, iter = val[0], val[1]
                      block_dup_check call, iter
                      iter.insert 1, call # FIX
                      result = iter
                    
    result
end

def _reduce_303(val, _values, result)
                      result = val[1] # TODO: fix lineno
                    
    result
end

def _reduce_304(val, _values, result)
                      result = new_if val[1], val[3], val[4]
                    
    result
end

def _reduce_305(val, _values, result)
                      result = new_if val[1], val[4], val[3]
                    
    result
end

def _reduce_306(val, _values, result)
                      lexer.cond.push true
                    
    result
end

def _reduce_307(val, _values, result)
                      lexer.cond.pop
                    
    result
end

def _reduce_308(val, _values, result)
                      result = new_while val[5], val[2], true
                    
    result
end

def _reduce_309(val, _values, result)
                      lexer.cond.push true
                    
    result
end

def _reduce_310(val, _values, result)
                      lexer.cond.pop
                    
    result
end

def _reduce_311(val, _values, result)
                      result = new_until val[5], val[2], true
                    
    result
end

def _reduce_312(val, _values, result)
                      (_, line), expr, _, body, _ = val
                      result = new_case expr, body, line
                    
    result
end

def _reduce_313(val, _values, result)
                      (_, line), _, body, _ = val
                      result = new_case nil, body, line
                    
    result
end

def _reduce_314(val, _values, result)
                      lexer.cond.push true
                    
    result
end

def _reduce_315(val, _values, result)
                      lexer.cond.pop
                    
    result
end

def _reduce_316(val, _values, result)
                      result = new_for val[4], val[1], val[7]
                    
    result
end

def _reduce_317(val, _values, result)
                      result = self.lexer.lineno
                    
    result
end

def _reduce_318(val, _values, result)
                      self.comments.push self.lexer.comments
                      if (self.in_def || self.in_single > 0) then
                        yyerror "class definition in method body"
                      end
                      self.env.extend
                    
    result
end

def _reduce_319(val, _values, result)
                      result = new_class val
                      self.env.unextend
                      self.lexer.comments # we don't care about comments in the body
                    
    result
end

def _reduce_320(val, _values, result)
                      result = self.lexer.lineno
                    
    result
end

def _reduce_321(val, _values, result)
                      result = self.in_def
                      self.in_def = false
                    
    result
end

def _reduce_322(val, _values, result)
                      result = self.in_single
                      self.in_single = 0
                      self.env.extend
                    
    result
end

def _reduce_323(val, _values, result)
                      result = new_sclass val
                      self.env.unextend
                      self.lexer.comments # we don't care about comments in the body
                    
    result
end

def _reduce_324(val, _values, result)
                      result = self.lexer.lineno
                    
    result
end

def _reduce_325(val, _values, result)
                      self.comments.push self.lexer.comments
                      yyerror "module definition in method body" if
                        self.in_def or self.in_single > 0

                      self.env.extend
                    
    result
end

def _reduce_326(val, _values, result)
                      result = new_module val
                      self.env.unextend
                      self.lexer.comments # we don't care about comments in the body
                    
    result
end

def _reduce_327(val, _values, result)
                      result = [self.in_def, self.lexer.cmdarg.stack.dup]

                      self.comments.push self.lexer.comments
                      self.in_def = true
                      self.env.extend
                      # TODO: local->cmdargs = cmdarg_stack;
                      # TODO: port local_push_gen and local_pop_gen
                      lexer.cmdarg.stack.replace [false]
                    
    result
end

def _reduce_328(val, _values, result)
                      in_def, cmdarg = val[2]

                      result = new_defn val

                      lexer.cmdarg.stack.replace cmdarg
                      self.env.unextend
                      self.in_def = in_def
                      self.lexer.comments # we don't care about comments in the body
                    
    result
end

def _reduce_329(val, _values, result)
                      self.comments.push self.lexer.comments
                      lexer.lex_state = :expr_fname
                    
    result
end

def _reduce_330(val, _values, result)
                      self.in_single += 1
                      self.env.extend
                      lexer.lex_state = :expr_endfn # force for args
                      result = lexer.lineno
                    
    result
end

def _reduce_331(val, _values, result)
                      result = new_defs val
                      result[3].line val[5]

                      self.env.unextend
                      self.in_single -= 1
                      self.lexer.comments # we don't care about comments in the body
                    
    result
end

def _reduce_332(val, _values, result)
                      result = s(:break)
                    
    result
end

def _reduce_333(val, _values, result)
                      result = s(:next)
                    
    result
end

def _reduce_334(val, _values, result)
                      result = s(:redo)
                    
    result
end

def _reduce_335(val, _values, result)
                      result = s(:retry)
                    
    result
end

def _reduce_336(val, _values, result)
                      result = value_expr(val[0])
                    
    result
end

# reduce 337 omitted

# reduce 338 omitted

# reduce 339 omitted

# reduce 340 omitted

# reduce 341 omitted

# reduce 342 omitted

# reduce 343 omitted

# reduce 344 omitted

# reduce 345 omitted

# reduce 346 omitted

# reduce 347 omitted

# reduce 348 omitted

# reduce 349 omitted

# reduce 350 omitted

# reduce 351 omitted

# reduce 352 omitted

# reduce 353 omitted

def _reduce_354(val, _values, result)
                      result = s(:if, val[1], val[3], val[4])
                    
    result
end

# reduce 355 omitted

def _reduce_356(val, _values, result)
                      result = val[1]
                    
    result
end

# reduce 357 omitted

def _reduce_358(val, _values, result)
                      val[0].delete_at 1 if val[0][1].nil? # HACK
                    
    result
end

# reduce 359 omitted

def _reduce_360(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_361(val, _values, result)
                      result = s(:array, val[0])
                    
    result
end

def _reduce_362(val, _values, result)
                      result = list_append val[0], val[2]
                    
    result
end

def _reduce_363(val, _values, result)
                      args, = val

                      result = block_var args
                    
    result
end

def _reduce_364(val, _values, result)
                      args, _, _, splat = val

                      result = block_var args, "*#{splat}".to_sym
                    
    result
end

def _reduce_365(val, _values, result)
                      args, _, _, splat, _, args2 = val

                      result = block_var args, "*#{splat}".to_sym, args2
                    
    result
end

def _reduce_366(val, _values, result)
                      args, _, _ = val

                      result = block_var args, :*
                    
    result
end

def _reduce_367(val, _values, result)
                      args, _, _, _, args2 = val

                      result = block_var args, :*, args2
                    
    result
end

def _reduce_368(val, _values, result)
                      _, splat = val

                      result = block_var :"*#{splat}"
                    
    result
end

def _reduce_369(val, _values, result)
                      _, splat, _, args = val

                      result = block_var :"*#{splat}", args
                    
    result
end

def _reduce_370(val, _values, result)
                      result = block_var :*
                    
    result
end

def _reduce_371(val, _values, result)
                      _, _, args = val

                      result = block_var :*, args
                    
    result
end

def _reduce_372(val, _values, result)
                      result = call_args val
                    
    result
end

def _reduce_373(val, _values, result)
                      result = call_args val
                    
    result
end

def _reduce_374(val, _values, result)
                      result = call_args val
                    
    result
end

def _reduce_375(val, _values, result)
                      result = call_args val
                    
    result
end

def _reduce_376(val, _values, result)
                      result = args val
                    
    result
end

# reduce 377 omitted

def _reduce_378(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_379(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_380(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_381(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_382(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_383(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_384(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_385(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_386(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_387(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_388(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_389(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_390(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_391(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_392(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_393(val, _values, result)
 result = 0 
    result
end

# reduce 394 omitted

def _reduce_395(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_396(val, _values, result)
                      self.lexer.command_start = true
                      result = s(:args)
                    
    result
end

def _reduce_397(val, _values, result)
                      result = args val
                    
    result
end

# reduce 398 omitted

def _reduce_399(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_400(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_401(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_402(val, _values, result)
                      result = s(:shadow, val[0].to_sym)
                    
    result
end

# reduce 403 omitted

def _reduce_404(val, _values, result)
                      self.env.extend :dynamic
                      result = self.lexer.lineno

                      result = lexer.lpar_beg
                      lexer.paren_nest += 1
                      lexer.lpar_beg = lexer.paren_nest
                    
    result
end

def _reduce_405(val, _values, result)
                      lpar, args, body = val
                      lexer.lpar_beg = lpar

                      call = new_call nil, :lambda
                      result = new_iter call, args, body
                      self.env.unextend
                    
    result
end

def _reduce_406(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_407(val, _values, result)
                      result = val[0]
                      result = 0 if result == s(:args)
                    
    result
end

def _reduce_408(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_409(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_410(val, _values, result)
                      self.env.extend :dynamic
                      result = self.lexer.lineno
                    
    result
end

def _reduce_411(val, _values, result)
                      result = nil # self.env.dynamic.keys
                    
    result
end

def _reduce_412(val, _values, result)
                      args   = val[2]
                      body   = val[4]
                      result = new_iter nil, args, body
                      result.line = val[1]

                      self.env.unextend
                    
    result
end

def _reduce_413(val, _values, result)
                      # TODO:
                      ## if (nd_type($1) == NODE_YIELD) {
                      ##     compile_error(PARSER_ARG "block given to yield");

                      syntax_error "Both block arg and actual block given." if
                        val[0].block_pass?

                      val = invert_block_call val if inverted? val

                      result = val[1]
                      result.insert 1, val[0]
                    
    result
end

def _reduce_414(val, _values, result)
                      result = new_call val[0], val[2].to_sym, val[3]
                    
    result
end

def _reduce_415(val, _values, result)
                      iter1, _, name, args, iter2 = val

                      call = new_call iter1, name.to_sym, args
                      iter2.insert 1, call

                      result = iter2
                    
    result
end

def _reduce_416(val, _values, result)
                      iter1, _, name, args, iter2 = val

                      call = new_call iter1, name.to_sym, args
                      iter2.insert 1, call

                      result = iter2
                    
    result
end

def _reduce_417(val, _values, result)
                      result = self.lexer.lineno
                    
    result
end

def _reduce_418(val, _values, result)
                      args = self.call_args val[2..-1]
                      result = val[0].concat args[1..-1]
                    
    result
end

def _reduce_419(val, _values, result)
                      result = new_call val[0], val[2].to_sym, val[3], val[1]
                    
    result
end

def _reduce_420(val, _values, result)
                      result = new_call val[0], val[2].to_sym, val[3]
                    
    result
end

def _reduce_421(val, _values, result)
                      result = new_call val[0], val[2].to_sym
                    
    result
end

def _reduce_422(val, _values, result)
                      result = new_call val[0], :call, val[2], val[1]
                    
    result
end

def _reduce_423(val, _values, result)
                      result = new_call val[0], :call, val[2]
                    
    result
end

def _reduce_424(val, _values, result)
                      result = new_super val[1]
                    
    result
end

def _reduce_425(val, _values, result)
                      result = s(:zsuper)
                    
    result
end

def _reduce_426(val, _values, result)
                      result = new_aref val
                    
    result
end

def _reduce_427(val, _values, result)
                      self.env.extend :dynamic
                      result = self.lexer.lineno
                    
    result
end

def _reduce_428(val, _values, result)
                      result = nil # self.env.dynamic.keys
                    
    result
end

def _reduce_429(val, _values, result)
                      _, line, args, _, body, _ = val

                      result = new_iter nil, args, body
                      result.line = line

                      self.env.unextend
                    
    result
end

def _reduce_430(val, _values, result)
                      self.env.extend :dynamic
                      result = self.lexer.lineno
                    
    result
end

def _reduce_431(val, _values, result)
                      result = nil # self.env.dynamic.keys
                    
    result
end

def _reduce_432(val, _values, result)
                      _, line, args, _, body, _ = val

                      result = new_iter nil, args, body
                      result.line = line

                      self.env.unextend
                    
    result
end

def _reduce_433(val, _values, result)
                      result = self.lexer.lineno
                    
    result
end

def _reduce_434(val, _values, result)
                      result = new_when(val[2], val[4])
                      result.line = val[1]
                      result << val[5] if val[5]
                    
    result
end

# reduce 435 omitted

# reduce 436 omitted

def _reduce_437(val, _values, result)
                      _, klasses, var, _, body, rest = val

                      klasses ||= s(:array)
                      klasses << new_assign(var, s(:gvar, :"$!")) if var

                      result = new_resbody(klasses, body)
                      result << rest if rest # UGH, rewritten above
                    
    result
end

def _reduce_438(val, _values, result)
                      result = nil
                    
    result
end

def _reduce_439(val, _values, result)
                      result = s(:array, val[0])
                    
    result
end

# reduce 440 omitted

# reduce 441 omitted

def _reduce_442(val, _values, result)
                      result = val[1]
                    
    result
end

# reduce 443 omitted

def _reduce_444(val, _values, result)
                      _, body = val

                      result = body || s(:nil)
                    
    result
end

# reduce 445 omitted

def _reduce_446(val, _values, result)
                      result = s(:lit, val[0])
                    
    result
end

def _reduce_447(val, _values, result)
                      result = s(:lit, val[0])
                    
    result
end

# reduce 448 omitted

def _reduce_449(val, _values, result)
                      val[0] = s(:dstr, val[0].value) if val[0][0] == :evstr
                      result = val[0]
                    
    result
end

def _reduce_450(val, _values, result)
                      debug20 23, val, result
                    
    result
end

# reduce 451 omitted

def _reduce_452(val, _values, result)
                      result = self.literal_concat val[0], val[1]
                    
    result
end

def _reduce_453(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_454(val, _values, result)
                      result = new_string val
                    
    result
end

def _reduce_455(val, _values, result)
                      result = new_xstring val[1]
                    
    result
end

def _reduce_456(val, _values, result)
                      result = new_regexp val
                    
    result
end

def _reduce_457(val, _values, result)
                      result = s(:array)
                    
    result
end

def _reduce_458(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_459(val, _values, result)
                      result = new_word_list
                    
    result
end

def _reduce_460(val, _values, result)
                      result = val[0].dup << new_word_list_entry(val)
                    
    result
end

# reduce 461 omitted

def _reduce_462(val, _values, result)
                      result = self.literal_concat val[0], val[1]
                    
    result
end

def _reduce_463(val, _values, result)
                      result = s(:array)
                    
    result
end

def _reduce_464(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_465(val, _values, result)
                      result = new_symbol_list
                    
    result
end

def _reduce_466(val, _values, result)
                      result = val[0].dup << new_symbol_list_entry(val)
                    
    result
end

def _reduce_467(val, _values, result)
                      result = s(:array)
                    
    result
end

def _reduce_468(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_469(val, _values, result)
                      result = s(:array)
                    
    result
end

def _reduce_470(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_471(val, _values, result)
                      result = new_qword_list
                    
    result
end

def _reduce_472(val, _values, result)
                      result = val[0].dup << new_qword_list_entry(val)
                    
    result
end

def _reduce_473(val, _values, result)
                      result = new_qsym_list
                    
    result
end

def _reduce_474(val, _values, result)
                      result = val[0].dup << new_qsym_list_entry(val)
                    
    result
end

def _reduce_475(val, _values, result)
                      result = s(:str, "")
                    
    result
end

def _reduce_476(val, _values, result)
                      result = literal_concat(val[0], val[1])
                    
    result
end

def _reduce_477(val, _values, result)
                      result = nil
                    
    result
end

def _reduce_478(val, _values, result)
                      result = literal_concat(val[0], val[1])
                    
    result
end

def _reduce_479(val, _values, result)
                      result = nil
                    
    result
end

def _reduce_480(val, _values, result)
                      result = literal_concat(val[0], val[1])
                    
    result
end

def _reduce_481(val, _values, result)
                      result = new_string val
                    
    result
end

def _reduce_482(val, _values, result)
                      result = lexer.lex_strterm

                      lexer.lex_strterm = nil
                      lexer.lex_state = :expr_beg # TODO: expr_value ?
                    
    result
end

def _reduce_483(val, _values, result)
                      lexer.lex_strterm = val[1]
                      result = s(:evstr, val[2])
                    
    result
end

def _reduce_484(val, _values, result)
                      result = [lexer.lex_strterm,
                                lexer.brace_nest,
                                lexer.string_nest, # TODO: remove
                                lexer.cond.store,
                                lexer.cmdarg.store,
                                lexer.lex_state,
                               ]

                      lexer.lex_strterm = nil
                      lexer.brace_nest  = 0
                      lexer.string_nest = 0

                      lexer.lex_state   = :expr_value
                    
    result
end

def _reduce_485(val, _values, result)
                      # TODO: tRCURLY -> tSTRING_END
                      _, memo, stmt, _ = val

                      lex_strterm, brace_nest, string_nest, oldcond, oldcmdarg, oldlex_state = memo

                      lexer.lex_strterm = lex_strterm
                      lexer.brace_nest  = brace_nest
                      lexer.string_nest = string_nest

                      lexer.cond.restore oldcond
                      lexer.cmdarg.restore oldcmdarg

                      lexer.lex_state = oldlex_state

                      case stmt
                      when Sexp then
                        case stmt[0]
                        when :str, :dstr, :evstr then
                          result = stmt
                        else
                          result = s(:evstr, stmt)
                        end
                      when nil then
                        result = s(:evstr)
                      else
                        debug20 25
                        raise "unknown string body: #{stmt.inspect}"
                      end
                    
    result
end

def _reduce_486(val, _values, result)
 result = s(:gvar, val[0].to_sym) 
    result
end

def _reduce_487(val, _values, result)
 result = s(:ivar, val[0].to_sym) 
    result
end

def _reduce_488(val, _values, result)
 result = s(:cvar, val[0].to_sym) 
    result
end

# reduce 489 omitted

def _reduce_490(val, _values, result)
                      lexer.lex_state = :expr_end
                      result = val[1].to_sym
                    
    result
end

def _reduce_491(val, _values, result)
                      result = val[0].to_sym
                    
    result
end

# reduce 492 omitted

# reduce 493 omitted

# reduce 494 omitted

# reduce 495 omitted

def _reduce_496(val, _values, result)
                      lexer.lex_state = :expr_end
                      result = val[1]

                      result ||= s(:str, "")

                      case result[0]
                      when :dstr then
                        result[0] = :dsym
                      when :str then
                        result = s(:lit, result.last.to_sym)
                      when :evstr then
                        result = s(:dsym, "", result)
                      else
                        debug20 26, val, result
                      end
                    
    result
end

# reduce 497 omitted

def _reduce_498(val, _values, result)
                      result = -val[1] # TODO: pt_testcase
                    
    result
end

# reduce 499 omitted

# reduce 500 omitted

# reduce 501 omitted

# reduce 502 omitted

# reduce 503 omitted

# reduce 504 omitted

# reduce 505 omitted

# reduce 506 omitted

# reduce 507 omitted

def _reduce_508(val, _values, result)
 result = s(:nil)   
    result
end

def _reduce_509(val, _values, result)
 result = s(:self)  
    result
end

def _reduce_510(val, _values, result)
 result = s(:true)  
    result
end

def _reduce_511(val, _values, result)
 result = s(:false) 
    result
end

def _reduce_512(val, _values, result)
 result = s(:str, self.file) 
    result
end

def _reduce_513(val, _values, result)
 result = s(:lit, lexer.lineno) 
    result
end

def _reduce_514(val, _values, result)
                      result =
                        if defined? Encoding then
                          s(:colon2, s(:const, :Encoding), :UTF_8)
                        else
                          s(:str, "Unsupported!")
                        end
                    
    result
end

def _reduce_515(val, _values, result)
                      var = val[0]
                      result = Sexp === var ? var : self.gettable(var)
                    
    result
end

def _reduce_516(val, _values, result)
                      var = val[0]
                      result = Sexp === var ? var : self.gettable(var)
                    
    result
end

def _reduce_517(val, _values, result)
                      result = self.assignable val[0]
                    
    result
end

def _reduce_518(val, _values, result)
                      result = self.assignable val[0]
                      debug20 29, val, result
                    
    result
end

def _reduce_519(val, _values, result)
 result = s(:nth_ref,  val[0]) 
    result
end

def _reduce_520(val, _values, result)
 result = s(:back_ref, val[0]) 
    result
end

def _reduce_521(val, _values, result)
                      result = nil
                    
    result
end

def _reduce_522(val, _values, result)
                      lexer.lex_state = :expr_beg
                    
    result
end

def _reduce_523(val, _values, result)
                      result = val[2]
                    
    result
end

def _reduce_524(val, _values, result)
                      yyerrok
                      result = nil
                      debug20 30, val, result
                    
    result
end

def _reduce_525(val, _values, result)
                      result = val[1]
                      self.lexer.lex_state = :expr_beg
                      self.lexer.command_start = true
                      # TODO:
                      # $<num>$ = parser->parser_in_kwarg;
                      # parser->parser_in_kwarg = 1;
                    
    result
end

def _reduce_526(val, _values, result)
                      # TODO: parser->parser_in_kwarg = $<num>1;
                      result = val[0]
                      self.lexer.lex_state = :expr_beg
                      self.lexer.command_start = true
                    
    result
end

def _reduce_527(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_528(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_529(val, _values, result)
                      result = args val
                    
    result
end

# reduce 530 omitted

def _reduce_531(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_532(val, _values, result)
                      result = nil
                    
    result
end

def _reduce_533(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_534(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_535(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_536(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_537(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_538(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_539(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_540(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_541(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_542(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_543(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_544(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_545(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_546(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_547(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_548(val, _values, result)
                      yyerror "formal argument cannot be a constant"
                    
    result
end

def _reduce_549(val, _values, result)
                      yyerror "formal argument cannot be an instance variable"
                    
    result
end

def _reduce_550(val, _values, result)
                      yyerror "formal argument cannot be a global variable"
                    
    result
end

def _reduce_551(val, _values, result)
                      yyerror "formal argument cannot be a class variable"
                    
    result
end

# reduce 552 omitted

def _reduce_553(val, _values, result)
                      identifier = val[0].to_sym
                      self.env[identifier] = :lvar

                      result = identifier
                    
    result
end

# reduce 554 omitted

def _reduce_555(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_556(val, _values, result)
                      case val[0]
                      when Symbol then
                        result = s(:args)
                        result << val[0]
                      when Sexp then
                        result = val[0]
                      else
                        debug20 32
                        raise "Unknown f_arg type: #{val.inspect}"
                      end
                    
    result
end

def _reduce_557(val, _values, result)
                      list, _, item = val

                      if list.sexp_type == :args then
                        result = list
                      else
                        result = s(:args, list)
                      end

                      result << item
                    
    result
end

# reduce 558 omitted

def _reduce_559(val, _values, result)
                      # TODO: call_args
                      label, _ = val[0] # TODO: fix lineno?
                      identifier = label.to_sym
                      self.env[identifier] = :lvar

                      result = s(:array, s(:kwarg, identifier, val[1]))
                    
    result
end

def _reduce_560(val, _values, result)
                      label, _ = val[0] # TODO: fix lineno?
                      identifier = label.to_sym
                      self.env[identifier] = :lvar

                      result = s(:array, s(:kwarg, identifier))
                    
    result
end

def _reduce_561(val, _values, result)
                      # TODO: call_args
                      label, _ = val[0] # TODO: fix lineno?
                      identifier = label.to_sym
                      self.env[identifier] = :lvar

                      result = s(:array, s(:kwarg, identifier, val[1]))
                    
    result
end

def _reduce_562(val, _values, result)
                      label, _ = val[0] # TODO: fix lineno?
                      identifier = label.to_sym
                      self.env[identifier] = :lvar

                      result = s(:array, s(:kwarg, identifier))
                    
    result
end

# reduce 563 omitted

def _reduce_564(val, _values, result)
                      list, _, item = val
                      result = list << item.last
                    
    result
end

# reduce 565 omitted

def _reduce_566(val, _values, result)
                      result = args val
                    
    result
end

# reduce 567 omitted

# reduce 568 omitted

def _reduce_569(val, _values, result)
                      result = :"**#{val[1]}"
                    
    result
end

def _reduce_570(val, _values, result)
                      result = :"**"
                    
    result
end

def _reduce_571(val, _values, result)
                      result = self.assignable val[0], val[2]
                      # TODO: detect duplicate names
                    
    result
end

def _reduce_572(val, _values, result)
                      result = self.assignable val[0], val[2]
                    
    result
end

def _reduce_573(val, _values, result)
                      result = s(:block, val[0])
                    
    result
end

def _reduce_574(val, _values, result)
                      result = val[0]
                      result << val[2]
                    
    result
end

def _reduce_575(val, _values, result)
                      result = s(:block, val[0])
                    
    result
end

def _reduce_576(val, _values, result)
                      result = self.block_append val[0], val[2]
                    
    result
end

# reduce 577 omitted

# reduce 578 omitted

def _reduce_579(val, _values, result)
                      # TODO: differs from parse.y - needs tests
                      name = val[1].to_sym
                      self.assignable name
                      result = :"*#{name}"
                    
    result
end

def _reduce_580(val, _values, result)
                      name = :"*"
                      self.env[name] = :lvar
                      result = name
                    
    result
end

# reduce 581 omitted

# reduce 582 omitted

def _reduce_583(val, _values, result)
                      identifier = val[1].to_sym

                      self.env[identifier] = :lvar
                      result = "&#{identifier}".to_sym
                    
    result
end

def _reduce_584(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_585(val, _values, result)
                      result = nil
                    
    result
end

# reduce 586 omitted

def _reduce_587(val, _values, result)
                      lexer.lex_state = :expr_beg
                    
    result
end

def _reduce_588(val, _values, result)
                      result = val[2]
                      yyerror "Can't define single method for literals." if
                        result[0] == :lit
                    
    result
end

def _reduce_589(val, _values, result)
                      result = s(:array)
                    
    result
end

def _reduce_590(val, _values, result)
                      result = val[0]
                    
    result
end

# reduce 591 omitted

def _reduce_592(val, _values, result)
                      list = val[0].dup
                      more = val[2][1..-1]
                      list.push(*more) unless more.empty?
                      result = list
                      result[0] = :hash
                    
    result
end

def _reduce_593(val, _values, result)
                      result = s(:array, val[0], val[2])
                    
    result
end

def _reduce_594(val, _values, result)
                      result = s(:array, s(:lit, val[0][0].to_sym), val[1])
                    
    result
end

def _reduce_595(val, _values, result)
                      result = s(:array, s(:kwsplat, val[1]))
                    
    result
end

# reduce 596 omitted

# reduce 597 omitted

# reduce 598 omitted

# reduce 599 omitted

# reduce 600 omitted

# reduce 601 omitted

# reduce 602 omitted

# reduce 603 omitted

# reduce 604 omitted

# reduce 605 omitted

# reduce 606 omitted

# reduce 607 omitted

# reduce 608 omitted

# reduce 609 omitted

# reduce 610 omitted

# reduce 611 omitted

# reduce 612 omitted

# reduce 613 omitted

# reduce 614 omitted

# reduce 615 omitted

# reduce 616 omitted

# reduce 617 omitted

def _reduce_618(val, _values, result)
 yyerrok 
    result
end

# reduce 619 omitted

# reduce 620 omitted

def _reduce_621(val, _values, result)
 yyerrok 
    result
end

def _reduce_622(val, _values, result)
 result = nil; 
    result
end

def _reduce_none(val, _values, result)
  val[0]
end

end   # class Ruby21Parser
